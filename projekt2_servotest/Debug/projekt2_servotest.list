
projekt2_servotest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dd8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08005ee8  08005ee8  00015ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fa8  08005fa8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005fa8  08005fa8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fa8  08005fa8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fa8  08005fa8  00015fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fac  08005fac  00015fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000074  08006024  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  08006024  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010387  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000027f0  00000000  00000000  00030424  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c08  00000000  00000000  00032c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ac0  00000000  00000000  00033820  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019400  00000000  00000000  000342e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c72e  00000000  00000000  0004d6e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008db31  00000000  00000000  00059e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e793f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003718  00000000  00000000  000e79bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08005ed0 	.word	0x08005ed0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08005ed0 	.word	0x08005ed0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	d1ed      	bne.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_f2iz>:
 8000ce4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ce8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000cec:	d30f      	bcc.n	8000d0e <__aeabi_f2iz+0x2a>
 8000cee:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000cf2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000cf6:	d90d      	bls.n	8000d14 <__aeabi_f2iz+0x30>
 8000cf8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000cfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d00:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d04:	fa23 f002 	lsr.w	r0, r3, r2
 8000d08:	bf18      	it	ne
 8000d0a:	4240      	negne	r0, r0
 8000d0c:	4770      	bx	lr
 8000d0e:	f04f 0000 	mov.w	r0, #0
 8000d12:	4770      	bx	lr
 8000d14:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d18:	d101      	bne.n	8000d1e <__aeabi_f2iz+0x3a>
 8000d1a:	0242      	lsls	r2, r0, #9
 8000d1c:	d105      	bne.n	8000d2a <__aeabi_f2iz+0x46>
 8000d1e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d22:	bf08      	it	eq
 8000d24:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d28:	4770      	bx	lr
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	4770      	bx	lr

08000d30 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d40:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <MX_ADC1_Init+0x94>)
 8000d42:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <MX_ADC1_Init+0x98>)
 8000d44:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d46:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <MX_ADC1_Init+0x94>)
 8000d48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <MX_ADC1_Init+0x94>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d54:	4b1b      	ldr	r3, [pc, #108]	; (8000dc4 <MX_ADC1_Init+0x94>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d5a:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_ADC1_Init+0x94>)
 8000d5c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000d60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d62:	4b18      	ldr	r3, [pc, #96]	; (8000dc4 <MX_ADC1_Init+0x94>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <MX_ADC1_Init+0x94>)
 8000d6a:	2202      	movs	r2, #2
 8000d6c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d6e:	4815      	ldr	r0, [pc, #84]	; (8000dc4 <MX_ADC1_Init+0x94>)
 8000d70:	f000 ffb0 	bl	8001cd4 <HAL_ADC_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000d7a:	f000 fcde 	bl	800173a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d7e:	2308      	movs	r3, #8
 8000d80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d82:	2301      	movs	r3, #1
 8000d84:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000d86:	2307      	movs	r3, #7
 8000d88:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <MX_ADC1_Init+0x94>)
 8000d90:	f001 f972 	bl	8002078 <HAL_ADC_ConfigChannel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000d9a:	f000 fcce 	bl	800173a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d9e:	2309      	movs	r3, #9
 8000da0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000da2:	2302      	movs	r3, #2
 8000da4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	4619      	mov	r1, r3
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <MX_ADC1_Init+0x94>)
 8000dac:	f001 f964 	bl	8002078 <HAL_ADC_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000db6:	f000 fcc0 	bl	800173a <Error_Handler>
  }

}
 8000dba:	bf00      	nop
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2000009c 	.word	0x2000009c
 8000dc8:	40012400 	.word	0x40012400

08000dcc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b088      	sub	sp, #32
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a28      	ldr	r2, [pc, #160]	; (8000e88 <HAL_ADC_MspInit+0xbc>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d149      	bne.n	8000e80 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dec:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <HAL_ADC_MspInit+0xc0>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	4a26      	ldr	r2, [pc, #152]	; (8000e8c <HAL_ADC_MspInit+0xc0>)
 8000df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df6:	6193      	str	r3, [r2, #24]
 8000df8:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <HAL_ADC_MspInit+0xc0>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e04:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <HAL_ADC_MspInit+0xc0>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	4a20      	ldr	r2, [pc, #128]	; (8000e8c <HAL_ADC_MspInit+0xc0>)
 8000e0a:	f043 0308 	orr.w	r3, r3, #8
 8000e0e:	6193      	str	r3, [r2, #24]
 8000e10:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <HAL_ADC_MspInit+0xc0>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	f003 0308 	and.w	r3, r3, #8
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e1c:	2303      	movs	r3, #3
 8000e1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e20:	2303      	movs	r3, #3
 8000e22:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 0310 	add.w	r3, r7, #16
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4819      	ldr	r0, [pc, #100]	; (8000e90 <HAL_ADC_MspInit+0xc4>)
 8000e2c:	f001 fe0a 	bl	8002a44 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <HAL_ADC_MspInit+0xc8>)
 8000e32:	4a19      	ldr	r2, [pc, #100]	; (8000e98 <HAL_ADC_MspInit+0xcc>)
 8000e34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e36:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <HAL_ADC_MspInit+0xc8>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_ADC_MspInit+0xc8>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <HAL_ADC_MspInit+0xc8>)
 8000e44:	2280      	movs	r2, #128	; 0x80
 8000e46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_ADC_MspInit+0xc8>)
 8000e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e50:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <HAL_ADC_MspInit+0xc8>)
 8000e52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <HAL_ADC_MspInit+0xc8>)
 8000e5a:	2220      	movs	r2, #32
 8000e5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e5e:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <HAL_ADC_MspInit+0xc8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e64:	480b      	ldr	r0, [pc, #44]	; (8000e94 <HAL_ADC_MspInit+0xc8>)
 8000e66:	f001 fbff 	bl	8002668 <HAL_DMA_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000e70:	f000 fc63 	bl	800173a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <HAL_ADC_MspInit+0xc8>)
 8000e78:	621a      	str	r2, [r3, #32]
 8000e7a:	4a06      	ldr	r2, [pc, #24]	; (8000e94 <HAL_ADC_MspInit+0xc8>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40012400 	.word	0x40012400
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40010c00 	.word	0x40010c00
 8000e94:	200000cc 	.word	0x200000cc
 8000e98:	40020008 	.word	0x40020008

08000e9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_DMA_Init+0x38>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <MX_DMA_Init+0x38>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6153      	str	r3, [r2, #20]
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_DMA_Init+0x38>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000eba:	2200      	movs	r2, #0
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	200b      	movs	r0, #11
 8000ec0:	f001 fb9b 	bl	80025fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ec4:	200b      	movs	r0, #11
 8000ec6:	f001 fbb4 	bl	8002632 <HAL_NVIC_EnableIRQ>

}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <strtoINT>:
 *  Created on: Dec 12, 2020
 *      Author: root
 */
#include "functions.h"

void strtoINT(uint32_t number, int lenght){
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	466b      	mov	r3, sp
 8000ee4:	461d      	mov	r5, r3
	uch string[lenght];
 8000ee6:	6838      	ldr	r0, [r7, #0]
 8000ee8:	1e43      	subs	r3, r0, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	4603      	mov	r3, r0
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f04f 0200 	mov.w	r2, #0
 8000ef4:	f04f 0300 	mov.w	r3, #0
 8000ef8:	f04f 0400 	mov.w	r4, #0
 8000efc:	00d4      	lsls	r4, r2, #3
 8000efe:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000f02:	00cb      	lsls	r3, r1, #3
 8000f04:	4603      	mov	r3, r0
 8000f06:	4619      	mov	r1, r3
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	f04f 0300 	mov.w	r3, #0
 8000f10:	f04f 0400 	mov.w	r4, #0
 8000f14:	00d4      	lsls	r4, r2, #3
 8000f16:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000f1a:	00cb      	lsls	r3, r1, #3
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	3307      	adds	r3, #7
 8000f20:	08db      	lsrs	r3, r3, #3
 8000f22:	00db      	lsls	r3, r3, #3
 8000f24:	ebad 0d03 	sub.w	sp, sp, r3
 8000f28:	466b      	mov	r3, sp
 8000f2a:	3300      	adds	r3, #0
 8000f2c:	60bb      	str	r3, [r7, #8]
	sprintf(string,"%d",number);
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	4906      	ldr	r1, [pc, #24]	; (8000f4c <strtoINT+0x74>)
 8000f34:	4618      	mov	r0, r3
 8000f36:	f003 fb8f 	bl	8004658 <siprintf>

	LCD_string(string);
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 f957 	bl	80011f0 <LCD_string>
 8000f42:	46ad      	mov	sp, r5
}
 8000f44:	bf00      	nop
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000f4c:	08005ee8 	.word	0x08005ee8

08000f50 <reverse>:

void reverse(char* str, int len)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b087      	sub	sp, #28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8000f64:	e018      	b.n	8000f98 <reverse+0x48>
        temp = str[i];
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	687a      	ldr	r2, [r7, #4]
 8000f74:	441a      	add	r2, r3
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	6879      	ldr	r1, [r7, #4]
 8000f7a:	440b      	add	r3, r1
 8000f7c:	7812      	ldrb	r2, [r2, #0]
 8000f7e:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	701a      	strb	r2, [r3, #0]
        i++;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	617b      	str	r3, [r7, #20]
        j--;
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	dbe2      	blt.n	8000f66 <reverse+0x16>
    }
}
 8000fa0:	bf00      	nop
 8000fa2:	371c      	adds	r7, #28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr
	...

08000fac <intToStr>:

int intToStr(int x, char *str, int d) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
    int i = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
    while (x) {
 8000fbc:	e01d      	b.n	8000ffa <intToStr+0x4e>
        str[i++] = (x % 10) + '0';
 8000fbe:	68fa      	ldr	r2, [r7, #12]
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <intToStr+0x8c>)
 8000fc2:	fb83 1302 	smull	r1, r3, r3, r2
 8000fc6:	1099      	asrs	r1, r3, #2
 8000fc8:	17d3      	asrs	r3, r2, #31
 8000fca:	1ac9      	subs	r1, r1, r3
 8000fcc:	460b      	mov	r3, r1
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	1ad1      	subs	r1, r2, r3
 8000fd6:	b2ca      	uxtb	r2, r1
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	1c59      	adds	r1, r3, #1
 8000fdc:	6179      	str	r1, [r7, #20]
 8000fde:	4619      	mov	r1, r3
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	440b      	add	r3, r1
 8000fe4:	3230      	adds	r2, #48	; 0x30
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	4a12      	ldr	r2, [pc, #72]	; (8001038 <intToStr+0x8c>)
 8000fee:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff2:	1092      	asrs	r2, r2, #2
 8000ff4:	17db      	asrs	r3, r3, #31
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	60fb      	str	r3, [r7, #12]
    while (x) {
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1de      	bne.n	8000fbe <intToStr+0x12>
    }
    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8001000:	e007      	b.n	8001012 <intToStr+0x66>
        str[i++] = '0';
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	1c5a      	adds	r2, r3, #1
 8001006:	617a      	str	r2, [r7, #20]
 8001008:	461a      	mov	r2, r3
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	4413      	add	r3, r2
 800100e:	2230      	movs	r2, #48	; 0x30
 8001010:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	429a      	cmp	r2, r3
 8001018:	dbf3      	blt.n	8001002 <intToStr+0x56>

    reverse(str, i);
 800101a:	6979      	ldr	r1, [r7, #20]
 800101c:	68b8      	ldr	r0, [r7, #8]
 800101e:	f7ff ff97 	bl	8000f50 <reverse>
    str[i] = '\0';
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	68ba      	ldr	r2, [r7, #8]
 8001026:	4413      	add	r3, r2
 8001028:	2200      	movs	r2, #0
 800102a:	701a      	strb	r2, [r3, #0]

    return i;
 800102c:	697b      	ldr	r3, [r7, #20]
}
 800102e:	4618      	mov	r0, r3
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	66666667 	.word	0x66666667

0800103c <ftoa>:

void ftoa(float n, char* res, int afterpoint) {
 800103c:	b5b0      	push	{r4, r5, r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
    // Extract integer part
    int ipart = (int)n;
 8001048:	68f8      	ldr	r0, [r7, #12]
 800104a:	f7ff fe4b 	bl	8000ce4 <__aeabi_f2iz>
 800104e:	4603      	mov	r3, r0
 8001050:	61fb      	str	r3, [r7, #28]

    // Extract floating part
    float fpart = n - (float)ipart;
 8001052:	69f8      	ldr	r0, [r7, #28]
 8001054:	f7ff fdf2 	bl	8000c3c <__aeabi_i2f>
 8001058:	4603      	mov	r3, r0
 800105a:	4619      	mov	r1, r3
 800105c:	68f8      	ldr	r0, [r7, #12]
 800105e:	f7ff fd37 	bl	8000ad0 <__aeabi_fsub>
 8001062:	4603      	mov	r3, r0
 8001064:	61bb      	str	r3, [r7, #24]

    // convert integer part to string
    int i = intToStr(ipart, res, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	69f8      	ldr	r0, [r7, #28]
 800106c:	f7ff ff9e 	bl	8000fac <intToStr>
 8001070:	6178      	str	r0, [r7, #20]

    // check for display option after point
    if (afterpoint != 0) {
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d02c      	beq.n	80010d2 <ftoa+0x96>
        res[i] = '.'; // add dot
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	4413      	add	r3, r2
 800107e:	222e      	movs	r2, #46	; 0x2e
 8001080:	701a      	strb	r2, [r3, #0]

        // Get the value of fraction part upto given no.
        // of points after dot. The third parameter
        // is needed to handle cases like 233.007
        fpart = fpart * pow(10, afterpoint);
 8001082:	69b8      	ldr	r0, [r7, #24]
 8001084:	f7ff f9c8 	bl	8000418 <__aeabi_f2d>
 8001088:	4604      	mov	r4, r0
 800108a:	460d      	mov	r5, r1
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff f9b1 	bl	80003f4 <__aeabi_i2d>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	f04f 0000 	mov.w	r0, #0
 800109a:	4910      	ldr	r1, [pc, #64]	; (80010dc <ftoa+0xa0>)
 800109c:	f003 feee 	bl	8004e7c <pow>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4620      	mov	r0, r4
 80010a6:	4629      	mov	r1, r5
 80010a8:	f7ff fa0e 	bl	80004c8 <__aeabi_dmul>
 80010ac:	4603      	mov	r3, r0
 80010ae:	460c      	mov	r4, r1
 80010b0:	4618      	mov	r0, r3
 80010b2:	4621      	mov	r1, r4
 80010b4:	f7ff fcb8 	bl	8000a28 <__aeabi_d2f>
 80010b8:	4603      	mov	r3, r0
 80010ba:	61bb      	str	r3, [r7, #24]

        intToStr((int)fpart, res + i + 1, afterpoint);
 80010bc:	69b8      	ldr	r0, [r7, #24]
 80010be:	f7ff fe11 	bl	8000ce4 <__aeabi_f2iz>
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	4413      	add	r3, r2
 80010ca:	687a      	ldr	r2, [r7, #4]
 80010cc:	4619      	mov	r1, r3
 80010ce:	f7ff ff6d 	bl	8000fac <intToStr>
    }
}
 80010d2:	bf00      	nop
 80010d4:	3720      	adds	r7, #32
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bdb0      	pop	{r4, r5, r7, pc}
 80010da:	bf00      	nop
 80010dc:	40240000 	.word	0x40240000

080010e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e6:	f107 0310 	add.w	r3, r7, #16
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f4:	4b2d      	ldr	r3, [pc, #180]	; (80011ac <MX_GPIO_Init+0xcc>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a2c      	ldr	r2, [pc, #176]	; (80011ac <MX_GPIO_Init+0xcc>)
 80010fa:	f043 0310 	orr.w	r3, r3, #16
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b2a      	ldr	r3, [pc, #168]	; (80011ac <MX_GPIO_Init+0xcc>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f003 0310 	and.w	r3, r3, #16
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800110c:	4b27      	ldr	r3, [pc, #156]	; (80011ac <MX_GPIO_Init+0xcc>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a26      	ldr	r2, [pc, #152]	; (80011ac <MX_GPIO_Init+0xcc>)
 8001112:	f043 0320 	orr.w	r3, r3, #32
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b24      	ldr	r3, [pc, #144]	; (80011ac <MX_GPIO_Init+0xcc>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0320 	and.w	r3, r3, #32
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001124:	4b21      	ldr	r3, [pc, #132]	; (80011ac <MX_GPIO_Init+0xcc>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	4a20      	ldr	r2, [pc, #128]	; (80011ac <MX_GPIO_Init+0xcc>)
 800112a:	f043 0304 	orr.w	r3, r3, #4
 800112e:	6193      	str	r3, [r2, #24]
 8001130:	4b1e      	ldr	r3, [pc, #120]	; (80011ac <MX_GPIO_Init+0xcc>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <MX_GPIO_Init+0xcc>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a1a      	ldr	r2, [pc, #104]	; (80011ac <MX_GPIO_Init+0xcc>)
 8001142:	f043 0308 	orr.w	r3, r3, #8
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b18      	ldr	r3, [pc, #96]	; (80011ac <MX_GPIO_Init+0xcc>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0308 	and.w	r3, r3, #8
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_panel_GPIO_Port, led_panel_Pin, GPIO_PIN_RESET);
 8001154:	2200      	movs	r2, #0
 8001156:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800115a:	4815      	ldr	r0, [pc, #84]	; (80011b0 <MX_GPIO_Init+0xd0>)
 800115c:	f001 fdcc 	bl	8002cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DATA_7_Pin|LCD_DATA_6_Pin|LCD_DATA_5_Pin|LCD_DATA_4_Pin
 8001160:	2200      	movs	r2, #0
 8001162:	21fc      	movs	r1, #252	; 0xfc
 8001164:	4813      	ldr	r0, [pc, #76]	; (80011b4 <MX_GPIO_Init+0xd4>)
 8001166:	f001 fdc7 	bl	8002cf8 <HAL_GPIO_WritePin>
                          |LCD_E_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_panel_Pin;
 800116a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001170:	2301      	movs	r3, #1
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2302      	movs	r3, #2
 800117a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_panel_GPIO_Port, &GPIO_InitStruct);
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	4619      	mov	r1, r3
 8001182:	480b      	ldr	r0, [pc, #44]	; (80011b0 <MX_GPIO_Init+0xd0>)
 8001184:	f001 fc5e 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DATA_7_Pin|LCD_DATA_6_Pin|LCD_DATA_5_Pin|LCD_DATA_4_Pin
 8001188:	23fc      	movs	r3, #252	; 0xfc
 800118a:	613b      	str	r3, [r7, #16]
                          |LCD_E_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	2301      	movs	r3, #1
 800118e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2302      	movs	r3, #2
 8001196:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	4619      	mov	r1, r3
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_GPIO_Init+0xd4>)
 80011a0:	f001 fc50 	bl	8002a44 <HAL_GPIO_Init>

}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40011000 	.word	0x40011000
 80011b4:	40010800 	.word	0x40010800

080011b8 <LCD_test>:
 */
//I use a LCD display with 2 row and 16 cool, with Hitachi basic
//i use it in 4 data_bit mode
#include "lcd.h"

void LCD_test(){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	LCD_goto(0,0);
 80011bc:	2100      	movs	r1, #0
 80011be:	2000      	movs	r0, #0
 80011c0:	f000 f82b 	bl	800121a <LCD_goto>
	LCD_string("+++TEST--test+++");
 80011c4:	4809      	ldr	r0, [pc, #36]	; (80011ec <LCD_test+0x34>)
 80011c6:	f000 f813 	bl	80011f0 <LCD_string>
	LCD_goto(1,0);
 80011ca:	2100      	movs	r1, #0
 80011cc:	2001      	movs	r0, #1
 80011ce:	f000 f824 	bl	800121a <LCD_goto>
	LCD_string("+++TEST--test+++");
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <LCD_test+0x34>)
 80011d4:	f000 f80c 	bl	80011f0 <LCD_string>
	HAL_Delay(1000);
 80011d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011dc:	f000 fd58 	bl	8001c90 <HAL_Delay>
	LCD_cmd(CLEAR);
 80011e0:	2001      	movs	r0, #1
 80011e2:	f000 f86b 	bl	80012bc <LCD_cmd>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	08005eec 	.word	0x08005eec

080011f0 <LCD_string>:

void LCD_string(char *str){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	while(*str){
 80011f8:	e007      	b.n	800120a <LCD_string+0x1a>
		LCD_data(*str);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f8c4 	bl	800138c <LCD_data>
		str++;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3301      	adds	r3, #1
 8001208:	607b      	str	r3, [r7, #4]
	while(*str){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1f3      	bne.n	80011fa <LCD_string+0xa>
	}
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <LCD_goto>:

void LCD_goto(u8 row, u8 col){
 800121a:	b580      	push	{r7, lr}
 800121c:	b084      	sub	sp, #16
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	460a      	mov	r2, r1
 8001224:	71fb      	strb	r3, [r7, #7]
 8001226:	4613      	mov	r3, r2
 8001228:	71bb      	strb	r3, [r7, #6]
	switch(row){
 800122a:	79fb      	ldrb	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d002      	beq.n	8001236 <LCD_goto+0x1c>
 8001230:	2b01      	cmp	r3, #1
 8001232:	d010      	beq.n	8001256 <LCD_goto+0x3c>
			for(u8 i = col; i>0; i--){
				LCD_cmd(0x14);
			}
		 break;
	}
}
 8001234:	e01f      	b.n	8001276 <LCD_goto+0x5c>
			LCD_cmd(0x80);
 8001236:	2080      	movs	r0, #128	; 0x80
 8001238:	f000 f840 	bl	80012bc <LCD_cmd>
			for(u8 i = col; i>0; i--){
 800123c:	79bb      	ldrb	r3, [r7, #6]
 800123e:	73fb      	strb	r3, [r7, #15]
 8001240:	e005      	b.n	800124e <LCD_goto+0x34>
				LCD_cmd(0x14);
 8001242:	2014      	movs	r0, #20
 8001244:	f000 f83a 	bl	80012bc <LCD_cmd>
			for(u8 i = col; i>0; i--){
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	3b01      	subs	r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1f6      	bne.n	8001242 <LCD_goto+0x28>
		 break;
 8001254:	e00f      	b.n	8001276 <LCD_goto+0x5c>
			LCD_cmd(0xC0);
 8001256:	20c0      	movs	r0, #192	; 0xc0
 8001258:	f000 f830 	bl	80012bc <LCD_cmd>
			for(u8 i = col; i>0; i--){
 800125c:	79bb      	ldrb	r3, [r7, #6]
 800125e:	73bb      	strb	r3, [r7, #14]
 8001260:	e005      	b.n	800126e <LCD_goto+0x54>
				LCD_cmd(0x14);
 8001262:	2014      	movs	r0, #20
 8001264:	f000 f82a 	bl	80012bc <LCD_cmd>
			for(u8 i = col; i>0; i--){
 8001268:	7bbb      	ldrb	r3, [r7, #14]
 800126a:	3b01      	subs	r3, #1
 800126c:	73bb      	strb	r3, [r7, #14]
 800126e:	7bbb      	ldrb	r3, [r7, #14]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1f6      	bne.n	8001262 <LCD_goto+0x48>
		 break;
 8001274:	bf00      	nop
}
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <LCD_enable>:

void LCD_enable(){
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
	//need a square  signal _| |_ for LCD enable Port
	//we need a 0-1-0 signalflow, transition
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, RESET);	//make _
 8001284:	2200      	movs	r2, #0
 8001286:	2140      	movs	r1, #64	; 0x40
 8001288:	480b      	ldr	r0, [pc, #44]	; (80012b8 <LCD_enable+0x38>)
 800128a:	f001 fd35 	bl	8002cf8 <HAL_GPIO_WritePin>
	HAL_Delay(5);		//wait
 800128e:	2005      	movs	r0, #5
 8001290:	f000 fcfe 	bl	8001c90 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port,LCD_E_Pin, SET);	//_|
 8001294:	2201      	movs	r2, #1
 8001296:	2140      	movs	r1, #64	; 0x40
 8001298:	4807      	ldr	r0, [pc, #28]	; (80012b8 <LCD_enable+0x38>)
 800129a:	f001 fd2d 	bl	8002cf8 <HAL_GPIO_WritePin>
	HAL_Delay(5);		//wait
 800129e:	2005      	movs	r0, #5
 80012a0:	f000 fcf6 	bl	8001c90 <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port,LCD_E_Pin, RESET);	//	|_
 80012a4:	2200      	movs	r2, #0
 80012a6:	2140      	movs	r1, #64	; 0x40
 80012a8:	4803      	ldr	r0, [pc, #12]	; (80012b8 <LCD_enable+0x38>)
 80012aa:	f001 fd25 	bl	8002cf8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80012ae:	2005      	movs	r0, #5
 80012b0:	f000 fcee 	bl	8001c90 <HAL_Delay>
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40010800 	.word	0x40010800

080012bc <LCD_cmd>:

void LCD_cmd(u8 cmd){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	//we need reset RS port, why we send commands for the LCD display
		//the R/W pin is already on GNDm because we only write the display
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin, RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2180      	movs	r1, #128	; 0x80
 80012ca:	482f      	ldr	r0, [pc, #188]	; (8001388 <LCD_cmd+0xcc>)
 80012cc:	f001 fd14 	bl	8002cf8 <HAL_GPIO_WritePin>
	//we write the data with 2 cycle, first the upper Bits
		//we use PORT MASK just in case
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin,(cmd>>7) & 0x01);
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	09db      	lsrs	r3, r3, #7
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	461a      	mov	r2, r3
 80012d8:	2104      	movs	r1, #4
 80012da:	482b      	ldr	r0, [pc, #172]	; (8001388 <LCD_cmd+0xcc>)
 80012dc:	f001 fd0c 	bl	8002cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin,(cmd>>6) & 0x01);
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	099b      	lsrs	r3, r3, #6
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	461a      	mov	r2, r3
 80012ee:	2108      	movs	r1, #8
 80012f0:	4825      	ldr	r0, [pc, #148]	; (8001388 <LCD_cmd+0xcc>)
 80012f2:	f001 fd01 	bl	8002cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin,(cmd>>5) & 0x01);
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	095b      	lsrs	r3, r3, #5
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	b2db      	uxtb	r3, r3
 8001302:	461a      	mov	r2, r3
 8001304:	2110      	movs	r1, #16
 8001306:	4820      	ldr	r0, [pc, #128]	; (8001388 <LCD_cmd+0xcc>)
 8001308:	f001 fcf6 	bl	8002cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin,(cmd>>4) & 0x01);
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	091b      	lsrs	r3, r3, #4
 8001310:	b2db      	uxtb	r3, r3
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	b2db      	uxtb	r3, r3
 8001318:	461a      	mov	r2, r3
 800131a:	2120      	movs	r1, #32
 800131c:	481a      	ldr	r0, [pc, #104]	; (8001388 <LCD_cmd+0xcc>)
 800131e:	f001 fceb 	bl	8002cf8 <HAL_GPIO_WritePin>

	//we write this for LCD with LCD_enable, we send the datas
	LCD_enable();
 8001322:	f7ff ffad 	bl	8001280 <LCD_enable>

	//now we write the four lower Bit
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin,(cmd>>3) & 0x01);
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	08db      	lsrs	r3, r3, #3
 800132a:	b2db      	uxtb	r3, r3
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	b2db      	uxtb	r3, r3
 8001332:	461a      	mov	r2, r3
 8001334:	2104      	movs	r1, #4
 8001336:	4814      	ldr	r0, [pc, #80]	; (8001388 <LCD_cmd+0xcc>)
 8001338:	f001 fcde 	bl	8002cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin,(cmd>>2) & 0x01);
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	089b      	lsrs	r3, r3, #2
 8001340:	b2db      	uxtb	r3, r3
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	461a      	mov	r2, r3
 800134a:	2108      	movs	r1, #8
 800134c:	480e      	ldr	r0, [pc, #56]	; (8001388 <LCD_cmd+0xcc>)
 800134e:	f001 fcd3 	bl	8002cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin,(cmd>>1) & 0x01);
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	085b      	lsrs	r3, r3, #1
 8001356:	b2db      	uxtb	r3, r3
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	b2db      	uxtb	r3, r3
 800135e:	461a      	mov	r2, r3
 8001360:	2110      	movs	r1, #16
 8001362:	4809      	ldr	r0, [pc, #36]	; (8001388 <LCD_cmd+0xcc>)
 8001364:	f001 fcc8 	bl	8002cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin,(cmd>>0) & 0x01);		//here truly we don`t need the MASK,just in case
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	b2db      	uxtb	r3, r3
 8001370:	461a      	mov	r2, r3
 8001372:	2120      	movs	r1, #32
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <LCD_cmd+0xcc>)
 8001376:	f001 fcbf 	bl	8002cf8 <HAL_GPIO_WritePin>

	//again write for LCD
	LCD_enable();
 800137a:	f7ff ff81 	bl	8001280 <LCD_enable>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40010800 	.word	0x40010800

0800138c <LCD_data>:

void LCD_data(u8 data){
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
	//we set the RS Pin, because we send now data
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin,SET);
 8001396:	2201      	movs	r2, #1
 8001398:	2180      	movs	r1, #128	; 0x80
 800139a:	482f      	ldr	r0, [pc, #188]	; (8001458 <LCD_data+0xcc>)
 800139c:	f001 fcac 	bl	8002cf8 <HAL_GPIO_WritePin>
	//send data again with 2 cycles
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin, (data>>7) & 0x01);
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	09db      	lsrs	r3, r3, #7
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	461a      	mov	r2, r3
 80013a8:	2104      	movs	r1, #4
 80013aa:	482b      	ldr	r0, [pc, #172]	; (8001458 <LCD_data+0xcc>)
 80013ac:	f001 fca4 	bl	8002cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin, (data>>6) & 0x01);
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	099b      	lsrs	r3, r3, #6
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	2108      	movs	r1, #8
 80013c0:	4825      	ldr	r0, [pc, #148]	; (8001458 <LCD_data+0xcc>)
 80013c2:	f001 fc99 	bl	8002cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin, (data>>5) & 0x01);
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	095b      	lsrs	r3, r3, #5
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	461a      	mov	r2, r3
 80013d4:	2110      	movs	r1, #16
 80013d6:	4820      	ldr	r0, [pc, #128]	; (8001458 <LCD_data+0xcc>)
 80013d8:	f001 fc8e 	bl	8002cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin, (data>>4) & 0x01);
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	091b      	lsrs	r3, r3, #4
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	2120      	movs	r1, #32
 80013ec:	481a      	ldr	r0, [pc, #104]	; (8001458 <LCD_data+0xcc>)
 80013ee:	f001 fc83 	bl	8002cf8 <HAL_GPIO_WritePin>
	//we send the data for display
	LCD_enable();
 80013f2:	f7ff ff45 	bl	8001280 <LCD_enable>

	//now we send the low 4 bits
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin, (data>>3) & 0x01);
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	08db      	lsrs	r3, r3, #3
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	b2db      	uxtb	r3, r3
 8001402:	461a      	mov	r2, r3
 8001404:	2104      	movs	r1, #4
 8001406:	4814      	ldr	r0, [pc, #80]	; (8001458 <LCD_data+0xcc>)
 8001408:	f001 fc76 	bl	8002cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin, (data>>2) & 0x01);
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	089b      	lsrs	r3, r3, #2
 8001410:	b2db      	uxtb	r3, r3
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	b2db      	uxtb	r3, r3
 8001418:	461a      	mov	r2, r3
 800141a:	2108      	movs	r1, #8
 800141c:	480e      	ldr	r0, [pc, #56]	; (8001458 <LCD_data+0xcc>)
 800141e:	f001 fc6b 	bl	8002cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin, (data>>1) & 0x01);
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	085b      	lsrs	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	b2db      	uxtb	r3, r3
 800142e:	461a      	mov	r2, r3
 8001430:	2110      	movs	r1, #16
 8001432:	4809      	ldr	r0, [pc, #36]	; (8001458 <LCD_data+0xcc>)
 8001434:	f001 fc60 	bl	8002cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin, (data>>0) & 0x01);
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	b2db      	uxtb	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	2120      	movs	r1, #32
 8001444:	4804      	ldr	r0, [pc, #16]	; (8001458 <LCD_data+0xcc>)
 8001446:	f001 fc57 	bl	8002cf8 <HAL_GPIO_WritePin>

	LCD_enable();
 800144a:	f7ff ff19 	bl	8001280 <LCD_enable>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40010800 	.word	0x40010800

0800145c <LCD_init>:

void LCD_init(bool curzor, bool blink){
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	460a      	mov	r2, r1
 8001466:	71fb      	strb	r3, [r7, #7]
 8001468:	4613      	mov	r3, r2
 800146a:	71bb      	strb	r3, [r7, #6]
	//we before init
	HAL_Delay(15);
 800146c:	200f      	movs	r0, #15
 800146e:	f000 fc0f 	bl	8001c90 <HAL_Delay>
	//we use it in 4bit mode with 2 row - 5*8 pixel
	LCD_cmd(0x20);
 8001472:	2020      	movs	r0, #32
 8001474:	f7ff ff22 	bl	80012bc <LCD_cmd>

	//just in case we send for Enable PORT 3 cycle
	LCD_enable();
 8001478:	f7ff ff02 	bl	8001280 <LCD_enable>
	LCD_enable();
 800147c:	f7ff ff00 	bl	8001280 <LCD_enable>
	LCD_enable();
 8001480:	f7ff fefe 	bl	8001280 <LCD_enable>

	//this hexacodes is from datasheet (LCD 1602, with hitachi base)
	LCD_cmd(0x28);		//set the mode 3 time
 8001484:	2028      	movs	r0, #40	; 0x28
 8001486:	f7ff ff19 	bl	80012bc <LCD_cmd>
	LCD_cmd(0x28);		//we don`t know before the init function wich one mode is the display
 800148a:	2028      	movs	r0, #40	; 0x28
 800148c:	f7ff ff16 	bl	80012bc <LCD_cmd>
	LCD_cmd(0x28);		//when we set the mode only 2 times, the display cant work well
 8001490:	2028      	movs	r0, #40	; 0x28
 8001492:	f7ff ff13 	bl	80012bc <LCD_cmd>

	LCD_cmd(0x01);			//lcd clear
 8001496:	2001      	movs	r0, #1
 8001498:	f7ff ff10 	bl	80012bc <LCD_cmd>
	LCD_cmd(0x02);			//send the curzor to 0.row 0.cool
 800149c:	2002      	movs	r0, #2
 800149e:	f7ff ff0d 	bl	80012bc <LCD_cmd>
	//set the curzor blink and the curzor visibility
	LCD_cmd(0x08 | (1<<LCD_E) | (curzor<<LCD_curzor) | (blink<<LCD_blink));
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	f043 030c 	orr.w	r3, r3, #12
 80014ac:	b25a      	sxtb	r2, r3
 80014ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	b25b      	sxtb	r3, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff feff 	bl	80012bc <LCD_cmd>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c8:	b590      	push	{r4, r7, lr}
 80014ca:	b08b      	sub	sp, #44	; 0x2c
 80014cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uch buffer[20];
	u32 dma_data[2] = {0,0};
 80014ce:	2300      	movs	r3, #0
 80014d0:	607b      	str	r3, [r7, #4]
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
	float tmp_dma = 0.0;
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	623b      	str	r3, [r7, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014dc:	f000 fb76 	bl	8001bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e0:	f000 f8d6 	bl	8001690 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e4:	f7ff fdfc 	bl	80010e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80014e8:	f7ff fcd8 	bl	8000e9c <MX_DMA_Init>
  MX_TIM1_Init();
 80014ec:	f000 f9d4 	bl	8001898 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014f0:	f000 fa8c 	bl	8001a0c <MX_TIM2_Init>
  MX_ADC1_Init();
 80014f4:	f7ff fc1c 	bl	8000d30 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80014f8:	2100      	movs	r1, #0
 80014fa:	485f      	ldr	r0, [pc, #380]	; (8001678 <main+0x1b0>)
 80014fc:	f002 f9c8 	bl	8003890 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001500:	2104      	movs	r1, #4
 8001502:	485d      	ldr	r0, [pc, #372]	; (8001678 <main+0x1b0>)
 8001504:	f002 f9c4 	bl	8003890 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8001508:	2108      	movs	r1, #8
 800150a:	485b      	ldr	r0, [pc, #364]	; (8001678 <main+0x1b0>)
 800150c:	f002 f9c0 	bl	8003890 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 8001510:	485a      	ldr	r0, [pc, #360]	; (800167c <main+0x1b4>)
 8001512:	f002 f913 	bl	800373c <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, dma_data, 2);
 8001516:	1d3b      	adds	r3, r7, #4
 8001518:	2202      	movs	r2, #2
 800151a:	4619      	mov	r1, r3
 800151c:	4858      	ldr	r0, [pc, #352]	; (8001680 <main+0x1b8>)
 800151e:	f000 fcb1 	bl	8001e84 <HAL_ADC_Start_DMA>
  LCD_init(1,1);
 8001522:	2101      	movs	r1, #1
 8001524:	2001      	movs	r0, #1
 8001526:	f7ff ff99 	bl	800145c <LCD_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_test();
 800152a:	f7ff fe45 	bl	80011b8 <LCD_test>
  while (1)
  {
	  HAL_GPIO_TogglePin(led_panel_GPIO_Port, led_panel_Pin);
 800152e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001532:	4854      	ldr	r0, [pc, #336]	; (8001684 <main+0x1bc>)
 8001534:	f001 fbf8 	bl	8002d28 <HAL_GPIO_TogglePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  LCD_goto(1,0);
 8001538:	2100      	movs	r1, #0
 800153a:	2001      	movs	r0, #1
 800153c:	f7ff fe6d 	bl	800121a <LCD_goto>
	  //strtoINT(dma_data[0], sizeof(dma_data[0]));
	  tmp_dma = ((3.3/4096)*dma_data[0]);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4618      	mov	r0, r3
 8001544:	f7fe ff46 	bl	80003d4 <__aeabi_ui2d>
 8001548:	a349      	add	r3, pc, #292	; (adr r3, 8001670 <main+0x1a8>)
 800154a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154e:	f7fe ffbb 	bl	80004c8 <__aeabi_dmul>
 8001552:	4603      	mov	r3, r0
 8001554:	460c      	mov	r4, r1
 8001556:	4618      	mov	r0, r3
 8001558:	4621      	mov	r1, r4
 800155a:	f7ff fa65 	bl	8000a28 <__aeabi_d2f>
 800155e:	4603      	mov	r3, r0
 8001560:	623b      	str	r3, [r7, #32]
	  ftoa(tmp_dma, buffer, 2);
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	2202      	movs	r2, #2
 8001568:	4619      	mov	r1, r3
 800156a:	6a38      	ldr	r0, [r7, #32]
 800156c:	f7ff fd66 	bl	800103c <ftoa>
	  LCD_string(buffer);
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fe3b 	bl	80011f0 <LCD_string>
	  tmp_dma = ((3.3/4096)*dma_data[1]);
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ff29 	bl	80003d4 <__aeabi_ui2d>
 8001582:	a33b      	add	r3, pc, #236	; (adr r3, 8001670 <main+0x1a8>)
 8001584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001588:	f7fe ff9e 	bl	80004c8 <__aeabi_dmul>
 800158c:	4603      	mov	r3, r0
 800158e:	460c      	mov	r4, r1
 8001590:	4618      	mov	r0, r3
 8001592:	4621      	mov	r1, r4
 8001594:	f7ff fa48 	bl	8000a28 <__aeabi_d2f>
 8001598:	4603      	mov	r3, r0
 800159a:	623b      	str	r3, [r7, #32]
	  ftoa(tmp_dma, buffer, 2);
 800159c:	f107 030c 	add.w	r3, r7, #12
 80015a0:	2202      	movs	r2, #2
 80015a2:	4619      	mov	r1, r3
 80015a4:	6a38      	ldr	r0, [r7, #32]
 80015a6:	f7ff fd49 	bl	800103c <ftoa>
	  LCD_string(" ");
 80015aa:	4837      	ldr	r0, [pc, #220]	; (8001688 <main+0x1c0>)
 80015ac:	f7ff fe20 	bl	80011f0 <LCD_string>
	  LCD_string(buffer);
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fe1b 	bl	80011f0 <LCD_string>

	  for(uint16_t j = 25; j<= 125; j += 5){
 80015ba:	2319      	movs	r3, #25
 80015bc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80015be:	e022      	b.n	8001606 <main+0x13e>
		  htim1.Instance -> CCR1 = j;
 80015c0:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <main+0x1b0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015c6:	635a      	str	r2, [r3, #52]	; 0x34
		  htim1.Instance -> CCR2 = j;
 80015c8:	4b2b      	ldr	r3, [pc, #172]	; (8001678 <main+0x1b0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015ce:	639a      	str	r2, [r3, #56]	; 0x38
		  htim1.Instance -> CCR3 = j;
 80015d0:	4b29      	ldr	r3, [pc, #164]	; (8001678 <main+0x1b0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80015d6:	63da      	str	r2, [r3, #60]	; 0x3c
		  LCD_goto(0,0);
 80015d8:	2100      	movs	r1, #0
 80015da:	2000      	movs	r0, #0
 80015dc:	f7ff fe1d 	bl	800121a <LCD_goto>
		  LCD_string("    ");
 80015e0:	482a      	ldr	r0, [pc, #168]	; (800168c <main+0x1c4>)
 80015e2:	f7ff fe05 	bl	80011f0 <LCD_string>
		  LCD_goto(0,0);
 80015e6:	2100      	movs	r1, #0
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff fe16 	bl	800121a <LCD_goto>
		  strtoINT(j,sizeof(j));
 80015ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80015f0:	2102      	movs	r1, #2
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fc70 	bl	8000ed8 <strtoINT>
		  HAL_Delay(2000);
 80015f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015fc:	f000 fb48 	bl	8001c90 <HAL_Delay>
	  for(uint16_t j = 25; j<= 125; j += 5){
 8001600:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001602:	3305      	adds	r3, #5
 8001604:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001606:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001608:	2b7d      	cmp	r3, #125	; 0x7d
 800160a:	d9d9      	bls.n	80015c0 <main+0xf8>
	  }


	  htim1.Instance -> CCR1 = 25;
 800160c:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <main+0x1b0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2219      	movs	r2, #25
 8001612:	635a      	str	r2, [r3, #52]	; 0x34
	  htim1.Instance -> CCR2 = 25;
 8001614:	4b18      	ldr	r3, [pc, #96]	; (8001678 <main+0x1b0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2219      	movs	r2, #25
 800161a:	639a      	str	r2, [r3, #56]	; 0x38
	  htim1.Instance -> CCR3 = 25;
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <main+0x1b0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2219      	movs	r2, #25
 8001622:	63da      	str	r2, [r3, #60]	; 0x3c
	  HAL_Delay(2000);
 8001624:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001628:	f000 fb32 	bl	8001c90 <HAL_Delay>
	  htim1.Instance -> CCR1 = 75;
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <main+0x1b0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	224b      	movs	r2, #75	; 0x4b
 8001632:	635a      	str	r2, [r3, #52]	; 0x34
	  htim1.Instance -> CCR2 = 75;
 8001634:	4b10      	ldr	r3, [pc, #64]	; (8001678 <main+0x1b0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	224b      	movs	r2, #75	; 0x4b
 800163a:	639a      	str	r2, [r3, #56]	; 0x38
	  htim1.Instance -> CCR3 = 75;
 800163c:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <main+0x1b0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	224b      	movs	r2, #75	; 0x4b
 8001642:	63da      	str	r2, [r3, #60]	; 0x3c
	  HAL_Delay(2000);
 8001644:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001648:	f000 fb22 	bl	8001c90 <HAL_Delay>
	  htim1.Instance -> CCR1 = 125;
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <main+0x1b0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	227d      	movs	r2, #125	; 0x7d
 8001652:	635a      	str	r2, [r3, #52]	; 0x34
	  htim1.Instance -> CCR2 = 125;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <main+0x1b0>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	227d      	movs	r2, #125	; 0x7d
 800165a:	639a      	str	r2, [r3, #56]	; 0x38
	  htim1.Instance -> CCR3 = 125;
 800165c:	4b06      	ldr	r3, [pc, #24]	; (8001678 <main+0x1b0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	227d      	movs	r2, #125	; 0x7d
 8001662:	63da      	str	r2, [r3, #60]	; 0x3c
	  HAL_Delay(2000);
 8001664:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001668:	f000 fb12 	bl	8001c90 <HAL_Delay>
	  HAL_GPIO_TogglePin(led_panel_GPIO_Port, led_panel_Pin);
 800166c:	e75f      	b.n	800152e <main+0x66>
 800166e:	bf00      	nop
 8001670:	66666666 	.word	0x66666666
 8001674:	3f4a6666 	.word	0x3f4a6666
 8001678:	20000110 	.word	0x20000110
 800167c:	20000158 	.word	0x20000158
 8001680:	2000009c 	.word	0x2000009c
 8001684:	40011000 	.word	0x40011000
 8001688:	08005f00 	.word	0x08005f00
 800168c:	08005f04 	.word	0x08005f04

08001690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b094      	sub	sp, #80	; 0x50
 8001694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800169a:	2228      	movs	r2, #40	; 0x28
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f002 ffd2 	bl	8004648 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016c0:	2302      	movs	r3, #2
 80016c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016c4:	2301      	movs	r3, #1
 80016c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016c8:	2310      	movs	r3, #16
 80016ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016cc:	2302      	movs	r3, #2
 80016ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80016d0:	2300      	movs	r3, #0
 80016d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80016d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80016d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016de:	4618      	mov	r0, r3
 80016e0:	f001 fb3c 	bl	8002d5c <HAL_RCC_OscConfig>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80016ea:	f000 f826 	bl	800173a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ee:	230f      	movs	r3, #15
 80016f0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016fe:	2300      	movs	r3, #0
 8001700:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001702:	f107 0314 	add.w	r3, r7, #20
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f001 fda7 	bl	800325c <HAL_RCC_ClockConfig>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001714:	f000 f811 	bl	800173a <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001718:	2302      	movs	r3, #2
 800171a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	4618      	mov	r0, r3
 8001724:	f001 ff04 	bl	8003530 <HAL_RCCEx_PeriphCLKConfig>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800172e:	f000 f804 	bl	800173a <Error_Handler>
  }
}
 8001732:	bf00      	nop
 8001734:	3750      	adds	r7, #80	; 0x50
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800173e:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001740:	e7fe      	b.n	8001740 <Error_Handler+0x6>
	...

08001744 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_MspInit+0x5c>)
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	4a14      	ldr	r2, [pc, #80]	; (80017a0 <HAL_MspInit+0x5c>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	6193      	str	r3, [r2, #24]
 8001756:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_MspInit+0x5c>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001762:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <HAL_MspInit+0x5c>)
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <HAL_MspInit+0x5c>)
 8001768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176c:	61d3      	str	r3, [r2, #28]
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <HAL_MspInit+0x5c>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001776:	607b      	str	r3, [r7, #4]
 8001778:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800177a:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_MspInit+0x60>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	60fb      	str	r3, [r7, #12]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <HAL_MspInit+0x60>)
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001796:	bf00      	nop
 8001798:	3714      	adds	r7, #20
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010000 	.word	0x40010000

080017a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <NMI_Handler+0x4>

080017ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <HardFault_Handler+0x4>

080017b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <MemManage_Handler+0x4>

080017ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr

080017d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr

080017ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ee:	f000 fa33 	bl	8001c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <DMA1_Channel1_IRQHandler+0x10>)
 80017fe:	f000 ffed 	bl	80027dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	200000cc 	.word	0x200000cc

0800180c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001810:	4802      	ldr	r0, [pc, #8]	; (800181c <TIM2_IRQHandler+0x10>)
 8001812:	f002 f8df 	bl	80039d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000158 	.word	0x20000158

08001820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001828:	4a14      	ldr	r2, [pc, #80]	; (800187c <_sbrk+0x5c>)
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <_sbrk+0x60>)
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d102      	bne.n	8001842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <_sbrk+0x64>)
 800183e:	4a12      	ldr	r2, [pc, #72]	; (8001888 <_sbrk+0x68>)
 8001840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001842:	4b10      	ldr	r3, [pc, #64]	; (8001884 <_sbrk+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	429a      	cmp	r2, r3
 800184e:	d207      	bcs.n	8001860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001850:	f002 fed0 	bl	80045f4 <__errno>
 8001854:	4602      	mov	r2, r0
 8001856:	230c      	movs	r3, #12
 8001858:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800185e:	e009      	b.n	8001874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <_sbrk+0x64>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <_sbrk+0x64>)
 8001870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001872:	68fb      	ldr	r3, [r7, #12]
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20005000 	.word	0x20005000
 8001880:	00000400 	.word	0x00000400
 8001884:	20000090 	.word	0x20000090
 8001888:	200001a8 	.word	0x200001a8

0800188c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b096      	sub	sp, #88	; 0x58
 800189c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	615a      	str	r2, [r3, #20]
 80018c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	2220      	movs	r2, #32
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f002 feb9 	bl	8004648 <memset>

  htim1.Instance = TIM1;
 80018d6:	4b4b      	ldr	r3, [pc, #300]	; (8001a04 <MX_TIM1_Init+0x16c>)
 80018d8:	4a4b      	ldr	r2, [pc, #300]	; (8001a08 <MX_TIM1_Init+0x170>)
 80018da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 319;
 80018dc:	4b49      	ldr	r3, [pc, #292]	; (8001a04 <MX_TIM1_Init+0x16c>)
 80018de:	f240 123f 	movw	r2, #319	; 0x13f
 80018e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e4:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <MX_TIM1_Init+0x16c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80018ea:	4b46      	ldr	r3, [pc, #280]	; (8001a04 <MX_TIM1_Init+0x16c>)
 80018ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f2:	4b44      	ldr	r3, [pc, #272]	; (8001a04 <MX_TIM1_Init+0x16c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018f8:	4b42      	ldr	r3, [pc, #264]	; (8001a04 <MX_TIM1_Init+0x16c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fe:	4b41      	ldr	r3, [pc, #260]	; (8001a04 <MX_TIM1_Init+0x16c>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001904:	483f      	ldr	r0, [pc, #252]	; (8001a04 <MX_TIM1_Init+0x16c>)
 8001906:	f001 fec9 	bl	800369c <HAL_TIM_Base_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001910:	f7ff ff13 	bl	800173a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001914:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001918:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800191a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800191e:	4619      	mov	r1, r3
 8001920:	4838      	ldr	r0, [pc, #224]	; (8001a04 <MX_TIM1_Init+0x16c>)
 8001922:	f002 fa1d 	bl	8003d60 <HAL_TIM_ConfigClockSource>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800192c:	f7ff ff05 	bl	800173a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001930:	4834      	ldr	r0, [pc, #208]	; (8001a04 <MX_TIM1_Init+0x16c>)
 8001932:	f001 ff55 	bl	80037e0 <HAL_TIM_PWM_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800193c:	f7ff fefd 	bl	800173a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001940:	2300      	movs	r3, #0
 8001942:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001948:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800194c:	4619      	mov	r1, r3
 800194e:	482d      	ldr	r0, [pc, #180]	; (8001a04 <MX_TIM1_Init+0x16c>)
 8001950:	f002 fd8e 	bl	8004470 <HAL_TIMEx_MasterConfigSynchronization>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800195a:	f7ff feee 	bl	800173a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195e:	2360      	movs	r3, #96	; 0x60
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001966:	2300      	movs	r3, #0
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800196a:	2300      	movs	r3, #0
 800196c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001976:	2300      	movs	r3, #0
 8001978:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800197a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197e:	2200      	movs	r2, #0
 8001980:	4619      	mov	r1, r3
 8001982:	4820      	ldr	r0, [pc, #128]	; (8001a04 <MX_TIM1_Init+0x16c>)
 8001984:	f002 f92e 	bl	8003be4 <HAL_TIM_PWM_ConfigChannel>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800198e:	f7ff fed4 	bl	800173a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001996:	2204      	movs	r2, #4
 8001998:	4619      	mov	r1, r3
 800199a:	481a      	ldr	r0, [pc, #104]	; (8001a04 <MX_TIM1_Init+0x16c>)
 800199c:	f002 f922 	bl	8003be4 <HAL_TIM_PWM_ConfigChannel>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80019a6:	f7ff fec8 	bl	800173a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ae:	2208      	movs	r2, #8
 80019b0:	4619      	mov	r1, r3
 80019b2:	4814      	ldr	r0, [pc, #80]	; (8001a04 <MX_TIM1_Init+0x16c>)
 80019b4:	f002 f916 	bl	8003be4 <HAL_TIM_PWM_ConfigChannel>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80019be:	f7ff febc 	bl	800173a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	4619      	mov	r1, r3
 80019e4:	4807      	ldr	r0, [pc, #28]	; (8001a04 <MX_TIM1_Init+0x16c>)
 80019e6:	f002 fda1 	bl	800452c <HAL_TIMEx_ConfigBreakDeadTime>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80019f0:	f7ff fea3 	bl	800173a <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <MX_TIM1_Init+0x16c>)
 80019f6:	f000 f88f 	bl	8001b18 <HAL_TIM_MspPostInit>

}
 80019fa:	bf00      	nop
 80019fc:	3758      	adds	r7, #88	; 0x58
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	20000110 	.word	0x20000110
 8001a08:	40012c00 	.word	0x40012c00

08001a0c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a12:	f107 0308 	add.w	r3, r7, #8
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]
 8001a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a20:	463b      	mov	r3, r7
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <MX_TIM2_Init+0x98>)
 8001a2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001a30:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <MX_TIM2_Init+0x98>)
 8001a32:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001a36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a38:	4b1a      	ldr	r3, [pc, #104]	; (8001aa4 <MX_TIM2_Init+0x98>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001a3e:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <MX_TIM2_Init+0x98>)
 8001a40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a46:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <MX_TIM2_Init+0x98>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4c:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <MX_TIM2_Init+0x98>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a52:	4814      	ldr	r0, [pc, #80]	; (8001aa4 <MX_TIM2_Init+0x98>)
 8001a54:	f001 fe22 	bl	800369c <HAL_TIM_Base_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a5e:	f7ff fe6c 	bl	800173a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a68:	f107 0308 	add.w	r3, r7, #8
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <MX_TIM2_Init+0x98>)
 8001a70:	f002 f976 	bl	8003d60 <HAL_TIM_ConfigClockSource>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001a7a:	f7ff fe5e 	bl	800173a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a86:	463b      	mov	r3, r7
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4806      	ldr	r0, [pc, #24]	; (8001aa4 <MX_TIM2_Init+0x98>)
 8001a8c:	f002 fcf0 	bl	8004470 <HAL_TIMEx_MasterConfigSynchronization>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001a96:	f7ff fe50 	bl	800173a <Error_Handler>
  }

}
 8001a9a:	bf00      	nop
 8001a9c:	3718      	adds	r7, #24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000158 	.word	0x20000158

08001aa8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a16      	ldr	r2, [pc, #88]	; (8001b10 <HAL_TIM_Base_MspInit+0x68>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d10c      	bne.n	8001ad4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aba:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <HAL_TIM_Base_MspInit+0x6c>)
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	4a15      	ldr	r2, [pc, #84]	; (8001b14 <HAL_TIM_Base_MspInit+0x6c>)
 8001ac0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ac4:	6193      	str	r3, [r2, #24]
 8001ac6:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <HAL_TIM_Base_MspInit+0x6c>)
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001ad2:	e018      	b.n	8001b06 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001adc:	d113      	bne.n	8001b06 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ade:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <HAL_TIM_Base_MspInit+0x6c>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <HAL_TIM_Base_MspInit+0x6c>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	61d3      	str	r3, [r2, #28]
 8001aea:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <HAL_TIM_Base_MspInit+0x6c>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	201c      	movs	r0, #28
 8001afc:	f000 fd7d 	bl	80025fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b00:	201c      	movs	r0, #28
 8001b02:	f000 fd96 	bl	8002632 <HAL_NVIC_EnableIRQ>
}
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40012c00 	.word	0x40012c00
 8001b14:	40021000 	.word	0x40021000

08001b18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 0310 	add.w	r3, r7, #16
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a10      	ldr	r2, [pc, #64]	; (8001b74 <HAL_TIM_MspPostInit+0x5c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d118      	bne.n	8001b6a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <HAL_TIM_MspPostInit+0x60>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <HAL_TIM_MspPostInit+0x60>)
 8001b3e:	f043 0304 	orr.w	r3, r3, #4
 8001b42:	6193      	str	r3, [r2, #24]
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <HAL_TIM_MspPostInit+0x60>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0304 	and.w	r3, r3, #4
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001b50:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001b54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5e:	f107 0310 	add.w	r3, r7, #16
 8001b62:	4619      	mov	r1, r3
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <HAL_TIM_MspPostInit+0x64>)
 8001b66:	f000 ff6d 	bl	8002a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b6a:	bf00      	nop
 8001b6c:	3720      	adds	r7, #32
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40012c00 	.word	0x40012c00
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	40010800 	.word	0x40010800

08001b80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b80:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b82:	e003      	b.n	8001b8c <LoopCopyDataInit>

08001b84 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001b86:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b88:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b8a:	3104      	adds	r1, #4

08001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b8c:	480a      	ldr	r0, [pc, #40]	; (8001bb8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001b90:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b92:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b94:	d3f6      	bcc.n	8001b84 <CopyDataInit>
  ldr r2, =_sbss
 8001b96:	4a0a      	ldr	r2, [pc, #40]	; (8001bc0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001b98:	e002      	b.n	8001ba0 <LoopFillZerobss>

08001b9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b9c:	f842 3b04 	str.w	r3, [r2], #4

08001ba0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001ba0:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001ba2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001ba4:	d3f9      	bcc.n	8001b9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001ba6:	f7ff fe71 	bl	800188c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001baa:	f002 fd29 	bl	8004600 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bae:	f7ff fc8b 	bl	80014c8 <main>
  bx lr
 8001bb2:	4770      	bx	lr
  ldr r3, =_sidata
 8001bb4:	08005fb0 	.word	0x08005fb0
  ldr r0, =_sdata
 8001bb8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001bbc:	20000074 	.word	0x20000074
  ldr r2, =_sbss
 8001bc0:	20000074 	.word	0x20000074
  ldr r3, = _ebss
 8001bc4:	200001a8 	.word	0x200001a8

08001bc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bc8:	e7fe      	b.n	8001bc8 <ADC1_2_IRQHandler>
	...

08001bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <HAL_Init+0x28>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a07      	ldr	r2, [pc, #28]	; (8001bf4 <HAL_Init+0x28>)
 8001bd6:	f043 0310 	orr.w	r3, r3, #16
 8001bda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bdc:	2003      	movs	r0, #3
 8001bde:	f000 fd01 	bl	80025e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001be2:	2000      	movs	r0, #0
 8001be4:	f000 f808 	bl	8001bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be8:	f7ff fdac 	bl	8001744 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40022000 	.word	0x40022000

08001bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_InitTick+0x54>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_InitTick+0x58>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c16:	4618      	mov	r0, r3
 8001c18:	f000 fd19 	bl	800264e <HAL_SYSTICK_Config>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e00e      	b.n	8001c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b0f      	cmp	r3, #15
 8001c2a:	d80a      	bhi.n	8001c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c34:	f000 fce1 	bl	80025fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c38:	4a06      	ldr	r2, [pc, #24]	; (8001c54 <HAL_InitTick+0x5c>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	e000      	b.n	8001c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000000 	.word	0x20000000
 8001c50:	20000008 	.word	0x20000008
 8001c54:	20000004 	.word	0x20000004

08001c58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c5c:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <HAL_IncTick+0x1c>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <HAL_IncTick+0x20>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4413      	add	r3, r2
 8001c68:	4a03      	ldr	r2, [pc, #12]	; (8001c78 <HAL_IncTick+0x20>)
 8001c6a:	6013      	str	r3, [r2, #0]
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bc80      	pop	{r7}
 8001c72:	4770      	bx	lr
 8001c74:	20000008 	.word	0x20000008
 8001c78:	200001a0 	.word	0x200001a0

08001c7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c80:	4b02      	ldr	r3, [pc, #8]	; (8001c8c <HAL_GetTick+0x10>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr
 8001c8c:	200001a0 	.word	0x200001a0

08001c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff fff0 	bl	8001c7c <HAL_GetTick>
 8001c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ca8:	d005      	beq.n	8001cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_Delay+0x40>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cb6:	bf00      	nop
 8001cb8:	f7ff ffe0 	bl	8001c7c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d8f7      	bhi.n	8001cb8 <HAL_Delay+0x28>
  {
  }
}
 8001cc8:	bf00      	nop
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000008 	.word	0x20000008

08001cd4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e0be      	b.n	8001e74 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d109      	bne.n	8001d18 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff f85a 	bl	8000dcc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 faf7 	bl	800230c <ADC_ConversionStop_Disable>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d26:	f003 0310 	and.w	r3, r3, #16
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f040 8099 	bne.w	8001e62 <HAL_ADC_Init+0x18e>
 8001d30:	7dfb      	ldrb	r3, [r7, #23]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f040 8095 	bne.w	8001e62 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d3c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d40:	f023 0302 	bic.w	r3, r3, #2
 8001d44:	f043 0202 	orr.w	r2, r3, #2
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d54:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	7b1b      	ldrb	r3, [r3, #12]
 8001d5a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d5c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d6c:	d003      	beq.n	8001d76 <HAL_ADC_Init+0xa2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d102      	bne.n	8001d7c <HAL_ADC_Init+0xa8>
 8001d76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d7a:	e000      	b.n	8001d7e <HAL_ADC_Init+0xaa>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	7d1b      	ldrb	r3, [r3, #20]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d119      	bne.n	8001dc0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	7b1b      	ldrb	r3, [r3, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d109      	bne.n	8001da8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	035a      	lsls	r2, r3, #13
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001da4:	613b      	str	r3, [r7, #16]
 8001da6:	e00b      	b.n	8001dc0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dac:	f043 0220 	orr.w	r2, r3, #32
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db8:	f043 0201 	orr.w	r2, r3, #1
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	4b28      	ldr	r3, [pc, #160]	; (8001e7c <HAL_ADC_Init+0x1a8>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	68b9      	ldr	r1, [r7, #8]
 8001de4:	430b      	orrs	r3, r1
 8001de6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001df0:	d003      	beq.n	8001dfa <HAL_ADC_Init+0x126>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d104      	bne.n	8001e04 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	051b      	lsls	r3, r3, #20
 8001e02:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_ADC_Init+0x1ac>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d10b      	bne.n	8001e40 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e32:	f023 0303 	bic.w	r3, r3, #3
 8001e36:	f043 0201 	orr.w	r2, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e3e:	e018      	b.n	8001e72 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e44:	f023 0312 	bic.w	r3, r3, #18
 8001e48:	f043 0210 	orr.w	r2, r3, #16
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	f043 0201 	orr.w	r2, r3, #1
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e60:	e007      	b.n	8001e72 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	f043 0210 	orr.w	r2, r3, #16
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	ffe1f7fd 	.word	0xffe1f7fd
 8001e80:	ff1f0efe 	.word	0xff1f0efe

08001e84 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a64      	ldr	r2, [pc, #400]	; (800202c <HAL_ADC_Start_DMA+0x1a8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d004      	beq.n	8001ea8 <HAL_ADC_Start_DMA+0x24>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a63      	ldr	r2, [pc, #396]	; (8002030 <HAL_ADC_Start_DMA+0x1ac>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d106      	bne.n	8001eb6 <HAL_ADC_Start_DMA+0x32>
 8001ea8:	4b60      	ldr	r3, [pc, #384]	; (800202c <HAL_ADC_Start_DMA+0x1a8>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f040 80b3 	bne.w	800201c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <HAL_ADC_Start_DMA+0x40>
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	e0ae      	b.n	8002022 <HAL_ADC_Start_DMA+0x19e>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 f9cb 	bl	8002268 <ADC_Enable>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ed6:	7dfb      	ldrb	r3, [r7, #23]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f040 809a 	bne.w	8002012 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ee6:	f023 0301 	bic.w	r3, r3, #1
 8001eea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a4e      	ldr	r2, [pc, #312]	; (8002030 <HAL_ADC_Start_DMA+0x1ac>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d105      	bne.n	8001f08 <HAL_ADC_Start_DMA+0x84>
 8001efc:	4b4b      	ldr	r3, [pc, #300]	; (800202c <HAL_ADC_Start_DMA+0x1a8>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d115      	bne.n	8001f34 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d026      	beq.n	8001f70 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f26:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f2a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001f32:	e01d      	b.n	8001f70 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f38:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a39      	ldr	r2, [pc, #228]	; (800202c <HAL_ADC_Start_DMA+0x1a8>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d004      	beq.n	8001f54 <HAL_ADC_Start_DMA+0xd0>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a38      	ldr	r2, [pc, #224]	; (8002030 <HAL_ADC_Start_DMA+0x1ac>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d10d      	bne.n	8001f70 <HAL_ADC_Start_DMA+0xec>
 8001f54:	4b35      	ldr	r3, [pc, #212]	; (800202c <HAL_ADC_Start_DMA+0x1a8>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d007      	beq.n	8001f70 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001f68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d006      	beq.n	8001f8a <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	f023 0206 	bic.w	r2, r3, #6
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f88:	e002      	b.n	8001f90 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	4a25      	ldr	r2, [pc, #148]	; (8002034 <HAL_ADC_Start_DMA+0x1b0>)
 8001f9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	4a24      	ldr	r2, [pc, #144]	; (8002038 <HAL_ADC_Start_DMA+0x1b4>)
 8001fa6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4a23      	ldr	r2, [pc, #140]	; (800203c <HAL_ADC_Start_DMA+0x1b8>)
 8001fae:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0202 	mvn.w	r2, #2
 8001fb8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fc8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6a18      	ldr	r0, [r3, #32]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	334c      	adds	r3, #76	; 0x4c
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f000 fb9f 	bl	800271c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001fe8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001fec:	d108      	bne.n	8002000 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001ffc:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001ffe:	e00f      	b.n	8002020 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800200e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002010:	e006      	b.n	8002020 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800201a:	e001      	b.n	8002020 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002020:	7dfb      	ldrb	r3, [r7, #23]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3718      	adds	r7, #24
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40012400 	.word	0x40012400
 8002030:	40012800 	.word	0x40012800
 8002034:	08002381 	.word	0x08002381
 8002038:	080023fd 	.word	0x080023fd
 800203c:	08002419 	.word	0x08002419

08002040 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr
	...

08002078 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002086:	2300      	movs	r3, #0
 8002088:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x20>
 8002094:	2302      	movs	r3, #2
 8002096:	e0dc      	b.n	8002252 <HAL_ADC_ConfigChannel+0x1da>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b06      	cmp	r3, #6
 80020a6:	d81c      	bhi.n	80020e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	3b05      	subs	r3, #5
 80020ba:	221f      	movs	r2, #31
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	4019      	ands	r1, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	3b05      	subs	r3, #5
 80020d4:	fa00 f203 	lsl.w	r2, r0, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	635a      	str	r2, [r3, #52]	; 0x34
 80020e0:	e03c      	b.n	800215c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b0c      	cmp	r3, #12
 80020e8:	d81c      	bhi.n	8002124 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	3b23      	subs	r3, #35	; 0x23
 80020fc:	221f      	movs	r2, #31
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	4019      	ands	r1, r3
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	6818      	ldr	r0, [r3, #0]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	4413      	add	r3, r2
 8002114:	3b23      	subs	r3, #35	; 0x23
 8002116:	fa00 f203 	lsl.w	r2, r0, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	631a      	str	r2, [r3, #48]	; 0x30
 8002122:	e01b      	b.n	800215c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685a      	ldr	r2, [r3, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	3b41      	subs	r3, #65	; 0x41
 8002136:	221f      	movs	r2, #31
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	4019      	ands	r1, r3
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	6818      	ldr	r0, [r3, #0]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	3b41      	subs	r3, #65	; 0x41
 8002150:	fa00 f203 	lsl.w	r2, r0, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b09      	cmp	r3, #9
 8002162:	d91c      	bls.n	800219e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68d9      	ldr	r1, [r3, #12]
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	4613      	mov	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4413      	add	r3, r2
 8002174:	3b1e      	subs	r3, #30
 8002176:	2207      	movs	r2, #7
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	4019      	ands	r1, r3
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	6898      	ldr	r0, [r3, #8]
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	4613      	mov	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4413      	add	r3, r2
 800218e:	3b1e      	subs	r3, #30
 8002190:	fa00 f203 	lsl.w	r2, r0, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	60da      	str	r2, [r3, #12]
 800219c:	e019      	b.n	80021d2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6919      	ldr	r1, [r3, #16]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	2207      	movs	r2, #7
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	4019      	ands	r1, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	6898      	ldr	r0, [r3, #8]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	4613      	mov	r3, r2
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	4413      	add	r3, r2
 80021c6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	430a      	orrs	r2, r1
 80021d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b10      	cmp	r3, #16
 80021d8:	d003      	beq.n	80021e2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021de:	2b11      	cmp	r3, #17
 80021e0:	d132      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a1d      	ldr	r2, [pc, #116]	; (800225c <HAL_ADC_ConfigChannel+0x1e4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d125      	bne.n	8002238 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d126      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002208:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2b10      	cmp	r3, #16
 8002210:	d11a      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002212:	4b13      	ldr	r3, [pc, #76]	; (8002260 <HAL_ADC_ConfigChannel+0x1e8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a13      	ldr	r2, [pc, #76]	; (8002264 <HAL_ADC_ConfigChannel+0x1ec>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	0c9a      	lsrs	r2, r3, #18
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002228:	e002      	b.n	8002230 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	3b01      	subs	r3, #1
 800222e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f9      	bne.n	800222a <HAL_ADC_ConfigChannel+0x1b2>
 8002236:	e007      	b.n	8002248 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223c:	f043 0220 	orr.w	r2, r3, #32
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002250:	7bfb      	ldrb	r3, [r7, #15]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	40012400 	.word	0x40012400
 8002260:	20000000 	.word	0x20000000
 8002264:	431bde83 	.word	0x431bde83

08002268 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002270:	2300      	movs	r3, #0
 8002272:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b01      	cmp	r3, #1
 8002284:	d039      	beq.n	80022fa <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f042 0201 	orr.w	r2, r2, #1
 8002294:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002296:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <ADC_Enable+0x9c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1b      	ldr	r2, [pc, #108]	; (8002308 <ADC_Enable+0xa0>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	0c9b      	lsrs	r3, r3, #18
 80022a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022a4:	e002      	b.n	80022ac <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f9      	bne.n	80022a6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80022b2:	f7ff fce3 	bl	8001c7c <HAL_GetTick>
 80022b6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022b8:	e018      	b.n	80022ec <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022ba:	f7ff fcdf 	bl	8001c7c <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d911      	bls.n	80022ec <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022cc:	f043 0210 	orr.w	r2, r3, #16
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	f043 0201 	orr.w	r2, r3, #1
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e007      	b.n	80022fc <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d1df      	bne.n	80022ba <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	20000000 	.word	0x20000000
 8002308:	431bde83 	.word	0x431bde83

0800230c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b01      	cmp	r3, #1
 8002324:	d127      	bne.n	8002376 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0201 	bic.w	r2, r2, #1
 8002334:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002336:	f7ff fca1 	bl	8001c7c <HAL_GetTick>
 800233a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800233c:	e014      	b.n	8002368 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800233e:	f7ff fc9d 	bl	8001c7c <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d90d      	bls.n	8002368 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002350:	f043 0210 	orr.w	r2, r3, #16
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235c:	f043 0201 	orr.w	r2, r3, #1
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e007      	b.n	8002378 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b01      	cmp	r3, #1
 8002374:	d0e3      	beq.n	800233e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002392:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002396:	2b00      	cmp	r3, #0
 8002398:	d127      	bne.n	80023ea <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80023b0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80023b4:	d115      	bne.n	80023e2 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d111      	bne.n	80023e2 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d105      	bne.n	80023e2 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	f043 0201 	orr.w	r2, r3, #1
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f7ff fe2c 	bl	8002040 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80023e8:	e004      	b.n	80023f4 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	4798      	blx	r3
}
 80023f4:	bf00      	nop
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f7ff fe21 	bl	8002052 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002424:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002436:	f043 0204 	orr.w	r2, r3, #4
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f7ff fe10 	bl	8002064 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002444:	bf00      	nop
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <__NVIC_SetPriorityGrouping+0x44>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002468:	4013      	ands	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002474:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800247c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800247e:	4a04      	ldr	r2, [pc, #16]	; (8002490 <__NVIC_SetPriorityGrouping+0x44>)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	60d3      	str	r3, [r2, #12]
}
 8002484:	bf00      	nop
 8002486:	3714      	adds	r7, #20
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002498:	4b04      	ldr	r3, [pc, #16]	; (80024ac <__NVIC_GetPriorityGrouping+0x18>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	f003 0307 	and.w	r3, r3, #7
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	e000ed00 	.word	0xe000ed00

080024b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	db0b      	blt.n	80024da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	f003 021f 	and.w	r2, r3, #31
 80024c8:	4906      	ldr	r1, [pc, #24]	; (80024e4 <__NVIC_EnableIRQ+0x34>)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	2001      	movs	r0, #1
 80024d2:	fa00 f202 	lsl.w	r2, r0, r2
 80024d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	e000e100 	.word	0xe000e100

080024e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	6039      	str	r1, [r7, #0]
 80024f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	db0a      	blt.n	8002512 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	490c      	ldr	r1, [pc, #48]	; (8002534 <__NVIC_SetPriority+0x4c>)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	0112      	lsls	r2, r2, #4
 8002508:	b2d2      	uxtb	r2, r2
 800250a:	440b      	add	r3, r1
 800250c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002510:	e00a      	b.n	8002528 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	b2da      	uxtb	r2, r3
 8002516:	4908      	ldr	r1, [pc, #32]	; (8002538 <__NVIC_SetPriority+0x50>)
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	3b04      	subs	r3, #4
 8002520:	0112      	lsls	r2, r2, #4
 8002522:	b2d2      	uxtb	r2, r2
 8002524:	440b      	add	r3, r1
 8002526:	761a      	strb	r2, [r3, #24]
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	bc80      	pop	{r7}
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	e000e100 	.word	0xe000e100
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800253c:	b480      	push	{r7}
 800253e:	b089      	sub	sp, #36	; 0x24
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f1c3 0307 	rsb	r3, r3, #7
 8002556:	2b04      	cmp	r3, #4
 8002558:	bf28      	it	cs
 800255a:	2304      	movcs	r3, #4
 800255c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3304      	adds	r3, #4
 8002562:	2b06      	cmp	r3, #6
 8002564:	d902      	bls.n	800256c <NVIC_EncodePriority+0x30>
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3b03      	subs	r3, #3
 800256a:	e000      	b.n	800256e <NVIC_EncodePriority+0x32>
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43da      	mvns	r2, r3
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	401a      	ands	r2, r3
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002584:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	fa01 f303 	lsl.w	r3, r1, r3
 800258e:	43d9      	mvns	r1, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002594:	4313      	orrs	r3, r2
         );
}
 8002596:	4618      	mov	r0, r3
 8002598:	3724      	adds	r7, #36	; 0x24
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr

080025a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	3b01      	subs	r3, #1
 80025ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025b0:	d301      	bcc.n	80025b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025b2:	2301      	movs	r3, #1
 80025b4:	e00f      	b.n	80025d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025b6:	4a0a      	ldr	r2, [pc, #40]	; (80025e0 <SysTick_Config+0x40>)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025be:	210f      	movs	r1, #15
 80025c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025c4:	f7ff ff90 	bl	80024e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <SysTick_Config+0x40>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ce:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <SysTick_Config+0x40>)
 80025d0:	2207      	movs	r2, #7
 80025d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	e000e010 	.word	0xe000e010

080025e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	f7ff ff2d 	bl	800244c <__NVIC_SetPriorityGrouping>
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b086      	sub	sp, #24
 80025fe:	af00      	add	r7, sp, #0
 8002600:	4603      	mov	r3, r0
 8002602:	60b9      	str	r1, [r7, #8]
 8002604:	607a      	str	r2, [r7, #4]
 8002606:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002608:	2300      	movs	r3, #0
 800260a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800260c:	f7ff ff42 	bl	8002494 <__NVIC_GetPriorityGrouping>
 8002610:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	6978      	ldr	r0, [r7, #20]
 8002618:	f7ff ff90 	bl	800253c <NVIC_EncodePriority>
 800261c:	4602      	mov	r2, r0
 800261e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002622:	4611      	mov	r1, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff5f 	bl	80024e8 <__NVIC_SetPriority>
}
 800262a:	bf00      	nop
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	4603      	mov	r3, r0
 800263a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800263c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff35 	bl	80024b0 <__NVIC_EnableIRQ>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff ffa2 	bl	80025a0 <SysTick_Config>
 800265c:	4603      	mov	r3, r0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e043      	b.n	8002706 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	4b22      	ldr	r3, [pc, #136]	; (8002710 <HAL_DMA_Init+0xa8>)
 8002686:	4413      	add	r3, r2
 8002688:	4a22      	ldr	r2, [pc, #136]	; (8002714 <HAL_DMA_Init+0xac>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	009a      	lsls	r2, r3, #2
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a1f      	ldr	r2, [pc, #124]	; (8002718 <HAL_DMA_Init+0xb0>)
 800269a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80026b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80026c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr
 8002710:	bffdfff8 	.word	0xbffdfff8
 8002714:	cccccccd 	.word	0xcccccccd
 8002718:	40020000 	.word	0x40020000

0800271c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
 8002728:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800272a:	2300      	movs	r3, #0
 800272c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_DMA_Start_IT+0x20>
 8002738:	2302      	movs	r3, #2
 800273a:	e04a      	b.n	80027d2 <HAL_DMA_Start_IT+0xb6>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800274a:	2b01      	cmp	r3, #1
 800274c:	d13a      	bne.n	80027c4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2202      	movs	r2, #2
 8002752:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2200      	movs	r2, #0
 800275a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0201 	bic.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	68b9      	ldr	r1, [r7, #8]
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f938 	bl	80029e8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 020e 	orr.w	r2, r2, #14
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e00f      	b.n	80027b2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0204 	bic.w	r2, r2, #4
 80027a0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f042 020a 	orr.w	r2, r2, #10
 80027b0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0201 	orr.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	e005      	b.n	80027d0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80027cc:	2302      	movs	r3, #2
 80027ce:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80027d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	2204      	movs	r2, #4
 80027fa:	409a      	lsls	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d04f      	beq.n	80028a4 <HAL_DMA_IRQHandler+0xc8>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b00      	cmp	r3, #0
 800280c:	d04a      	beq.n	80028a4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b00      	cmp	r3, #0
 800281a:	d107      	bne.n	800282c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 0204 	bic.w	r2, r2, #4
 800282a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a66      	ldr	r2, [pc, #408]	; (80029cc <HAL_DMA_IRQHandler+0x1f0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d029      	beq.n	800288a <HAL_DMA_IRQHandler+0xae>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a65      	ldr	r2, [pc, #404]	; (80029d0 <HAL_DMA_IRQHandler+0x1f4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d022      	beq.n	8002886 <HAL_DMA_IRQHandler+0xaa>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a63      	ldr	r2, [pc, #396]	; (80029d4 <HAL_DMA_IRQHandler+0x1f8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d01a      	beq.n	8002880 <HAL_DMA_IRQHandler+0xa4>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a62      	ldr	r2, [pc, #392]	; (80029d8 <HAL_DMA_IRQHandler+0x1fc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d012      	beq.n	800287a <HAL_DMA_IRQHandler+0x9e>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a60      	ldr	r2, [pc, #384]	; (80029dc <HAL_DMA_IRQHandler+0x200>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00a      	beq.n	8002874 <HAL_DMA_IRQHandler+0x98>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a5f      	ldr	r2, [pc, #380]	; (80029e0 <HAL_DMA_IRQHandler+0x204>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d102      	bne.n	800286e <HAL_DMA_IRQHandler+0x92>
 8002868:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800286c:	e00e      	b.n	800288c <HAL_DMA_IRQHandler+0xb0>
 800286e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002872:	e00b      	b.n	800288c <HAL_DMA_IRQHandler+0xb0>
 8002874:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002878:	e008      	b.n	800288c <HAL_DMA_IRQHandler+0xb0>
 800287a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800287e:	e005      	b.n	800288c <HAL_DMA_IRQHandler+0xb0>
 8002880:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002884:	e002      	b.n	800288c <HAL_DMA_IRQHandler+0xb0>
 8002886:	2340      	movs	r3, #64	; 0x40
 8002888:	e000      	b.n	800288c <HAL_DMA_IRQHandler+0xb0>
 800288a:	2304      	movs	r3, #4
 800288c:	4a55      	ldr	r2, [pc, #340]	; (80029e4 <HAL_DMA_IRQHandler+0x208>)
 800288e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002894:	2b00      	cmp	r3, #0
 8002896:	f000 8094 	beq.w	80029c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80028a2:	e08e      	b.n	80029c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a8:	2202      	movs	r2, #2
 80028aa:	409a      	lsls	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d056      	beq.n	8002962 <HAL_DMA_IRQHandler+0x186>
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d051      	beq.n	8002962 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10b      	bne.n	80028e4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f022 020a 	bic.w	r2, r2, #10
 80028da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a38      	ldr	r2, [pc, #224]	; (80029cc <HAL_DMA_IRQHandler+0x1f0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d029      	beq.n	8002942 <HAL_DMA_IRQHandler+0x166>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a37      	ldr	r2, [pc, #220]	; (80029d0 <HAL_DMA_IRQHandler+0x1f4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d022      	beq.n	800293e <HAL_DMA_IRQHandler+0x162>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a35      	ldr	r2, [pc, #212]	; (80029d4 <HAL_DMA_IRQHandler+0x1f8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d01a      	beq.n	8002938 <HAL_DMA_IRQHandler+0x15c>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a34      	ldr	r2, [pc, #208]	; (80029d8 <HAL_DMA_IRQHandler+0x1fc>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d012      	beq.n	8002932 <HAL_DMA_IRQHandler+0x156>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a32      	ldr	r2, [pc, #200]	; (80029dc <HAL_DMA_IRQHandler+0x200>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00a      	beq.n	800292c <HAL_DMA_IRQHandler+0x150>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a31      	ldr	r2, [pc, #196]	; (80029e0 <HAL_DMA_IRQHandler+0x204>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d102      	bne.n	8002926 <HAL_DMA_IRQHandler+0x14a>
 8002920:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002924:	e00e      	b.n	8002944 <HAL_DMA_IRQHandler+0x168>
 8002926:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800292a:	e00b      	b.n	8002944 <HAL_DMA_IRQHandler+0x168>
 800292c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002930:	e008      	b.n	8002944 <HAL_DMA_IRQHandler+0x168>
 8002932:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002936:	e005      	b.n	8002944 <HAL_DMA_IRQHandler+0x168>
 8002938:	f44f 7300 	mov.w	r3, #512	; 0x200
 800293c:	e002      	b.n	8002944 <HAL_DMA_IRQHandler+0x168>
 800293e:	2320      	movs	r3, #32
 8002940:	e000      	b.n	8002944 <HAL_DMA_IRQHandler+0x168>
 8002942:	2302      	movs	r3, #2
 8002944:	4a27      	ldr	r2, [pc, #156]	; (80029e4 <HAL_DMA_IRQHandler+0x208>)
 8002946:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	2b00      	cmp	r3, #0
 8002956:	d034      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002960:	e02f      	b.n	80029c2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	2208      	movs	r2, #8
 8002968:	409a      	lsls	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d028      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x1e8>
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b00      	cmp	r3, #0
 800297a:	d023      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 020e 	bic.w	r2, r2, #14
 800298a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002994:	2101      	movs	r1, #1
 8002996:	fa01 f202 	lsl.w	r2, r1, r2
 800299a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d004      	beq.n	80029c4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	4798      	blx	r3
    }
  }
  return;
 80029c2:	bf00      	nop
 80029c4:	bf00      	nop
}
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40020008 	.word	0x40020008
 80029d0:	4002001c 	.word	0x4002001c
 80029d4:	40020030 	.word	0x40020030
 80029d8:	40020044 	.word	0x40020044
 80029dc:	40020058 	.word	0x40020058
 80029e0:	4002006c 	.word	0x4002006c
 80029e4:	40020000 	.word	0x40020000

080029e8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fe:	2101      	movs	r1, #1
 8002a00:	fa01 f202 	lsl.w	r2, r1, r2
 8002a04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b10      	cmp	r3, #16
 8002a14:	d108      	bne.n	8002a28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002a26:	e007      	b.n	8002a38 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	60da      	str	r2, [r3, #12]
}
 8002a38:	bf00      	nop
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr
	...

08002a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b08b      	sub	sp, #44	; 0x2c
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a52:	2300      	movs	r3, #0
 8002a54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a56:	e127      	b.n	8002ca8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a58:	2201      	movs	r2, #1
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	69fa      	ldr	r2, [r7, #28]
 8002a68:	4013      	ands	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	f040 8116 	bne.w	8002ca2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b12      	cmp	r3, #18
 8002a7c:	d034      	beq.n	8002ae8 <HAL_GPIO_Init+0xa4>
 8002a7e:	2b12      	cmp	r3, #18
 8002a80:	d80d      	bhi.n	8002a9e <HAL_GPIO_Init+0x5a>
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d02b      	beq.n	8002ade <HAL_GPIO_Init+0x9a>
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d804      	bhi.n	8002a94 <HAL_GPIO_Init+0x50>
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d031      	beq.n	8002af2 <HAL_GPIO_Init+0xae>
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d01c      	beq.n	8002acc <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a92:	e048      	b.n	8002b26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d043      	beq.n	8002b20 <HAL_GPIO_Init+0xdc>
 8002a98:	2b11      	cmp	r3, #17
 8002a9a:	d01b      	beq.n	8002ad4 <HAL_GPIO_Init+0x90>
          break;
 8002a9c:	e043      	b.n	8002b26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002a9e:	4a89      	ldr	r2, [pc, #548]	; (8002cc4 <HAL_GPIO_Init+0x280>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d026      	beq.n	8002af2 <HAL_GPIO_Init+0xae>
 8002aa4:	4a87      	ldr	r2, [pc, #540]	; (8002cc4 <HAL_GPIO_Init+0x280>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d806      	bhi.n	8002ab8 <HAL_GPIO_Init+0x74>
 8002aaa:	4a87      	ldr	r2, [pc, #540]	; (8002cc8 <HAL_GPIO_Init+0x284>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d020      	beq.n	8002af2 <HAL_GPIO_Init+0xae>
 8002ab0:	4a86      	ldr	r2, [pc, #536]	; (8002ccc <HAL_GPIO_Init+0x288>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d01d      	beq.n	8002af2 <HAL_GPIO_Init+0xae>
          break;
 8002ab6:	e036      	b.n	8002b26 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ab8:	4a85      	ldr	r2, [pc, #532]	; (8002cd0 <HAL_GPIO_Init+0x28c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d019      	beq.n	8002af2 <HAL_GPIO_Init+0xae>
 8002abe:	4a85      	ldr	r2, [pc, #532]	; (8002cd4 <HAL_GPIO_Init+0x290>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d016      	beq.n	8002af2 <HAL_GPIO_Init+0xae>
 8002ac4:	4a84      	ldr	r2, [pc, #528]	; (8002cd8 <HAL_GPIO_Init+0x294>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d013      	beq.n	8002af2 <HAL_GPIO_Init+0xae>
          break;
 8002aca:	e02c      	b.n	8002b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	623b      	str	r3, [r7, #32]
          break;
 8002ad2:	e028      	b.n	8002b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	3304      	adds	r3, #4
 8002ada:	623b      	str	r3, [r7, #32]
          break;
 8002adc:	e023      	b.n	8002b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	3308      	adds	r3, #8
 8002ae4:	623b      	str	r3, [r7, #32]
          break;
 8002ae6:	e01e      	b.n	8002b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	330c      	adds	r3, #12
 8002aee:	623b      	str	r3, [r7, #32]
          break;
 8002af0:	e019      	b.n	8002b26 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d102      	bne.n	8002b00 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002afa:	2304      	movs	r3, #4
 8002afc:	623b      	str	r3, [r7, #32]
          break;
 8002afe:	e012      	b.n	8002b26 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d105      	bne.n	8002b14 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b08:	2308      	movs	r3, #8
 8002b0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	611a      	str	r2, [r3, #16]
          break;
 8002b12:	e008      	b.n	8002b26 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b14:	2308      	movs	r3, #8
 8002b16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	615a      	str	r2, [r3, #20]
          break;
 8002b1e:	e002      	b.n	8002b26 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b20:	2300      	movs	r3, #0
 8002b22:	623b      	str	r3, [r7, #32]
          break;
 8002b24:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	2bff      	cmp	r3, #255	; 0xff
 8002b2a:	d801      	bhi.n	8002b30 <HAL_GPIO_Init+0xec>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	e001      	b.n	8002b34 <HAL_GPIO_Init+0xf0>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3304      	adds	r3, #4
 8002b34:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2bff      	cmp	r3, #255	; 0xff
 8002b3a:	d802      	bhi.n	8002b42 <HAL_GPIO_Init+0xfe>
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	e002      	b.n	8002b48 <HAL_GPIO_Init+0x104>
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	3b08      	subs	r3, #8
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	210f      	movs	r1, #15
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	fa01 f303 	lsl.w	r3, r1, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	401a      	ands	r2, r3
 8002b5a:	6a39      	ldr	r1, [r7, #32]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b62:	431a      	orrs	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 8096 	beq.w	8002ca2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b76:	4b59      	ldr	r3, [pc, #356]	; (8002cdc <HAL_GPIO_Init+0x298>)
 8002b78:	699b      	ldr	r3, [r3, #24]
 8002b7a:	4a58      	ldr	r2, [pc, #352]	; (8002cdc <HAL_GPIO_Init+0x298>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6193      	str	r3, [r2, #24]
 8002b82:	4b56      	ldr	r3, [pc, #344]	; (8002cdc <HAL_GPIO_Init+0x298>)
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b8e:	4a54      	ldr	r2, [pc, #336]	; (8002ce0 <HAL_GPIO_Init+0x29c>)
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	089b      	lsrs	r3, r3, #2
 8002b94:	3302      	adds	r3, #2
 8002b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b9a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	220f      	movs	r2, #15
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a4b      	ldr	r2, [pc, #300]	; (8002ce4 <HAL_GPIO_Init+0x2a0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d013      	beq.n	8002be2 <HAL_GPIO_Init+0x19e>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a4a      	ldr	r2, [pc, #296]	; (8002ce8 <HAL_GPIO_Init+0x2a4>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d00d      	beq.n	8002bde <HAL_GPIO_Init+0x19a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a49      	ldr	r2, [pc, #292]	; (8002cec <HAL_GPIO_Init+0x2a8>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d007      	beq.n	8002bda <HAL_GPIO_Init+0x196>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a48      	ldr	r2, [pc, #288]	; (8002cf0 <HAL_GPIO_Init+0x2ac>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d101      	bne.n	8002bd6 <HAL_GPIO_Init+0x192>
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e006      	b.n	8002be4 <HAL_GPIO_Init+0x1a0>
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	e004      	b.n	8002be4 <HAL_GPIO_Init+0x1a0>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e002      	b.n	8002be4 <HAL_GPIO_Init+0x1a0>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <HAL_GPIO_Init+0x1a0>
 8002be2:	2300      	movs	r3, #0
 8002be4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be6:	f002 0203 	and.w	r2, r2, #3
 8002bea:	0092      	lsls	r2, r2, #2
 8002bec:	4093      	lsls	r3, r2
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bf4:	493a      	ldr	r1, [pc, #232]	; (8002ce0 <HAL_GPIO_Init+0x29c>)
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	089b      	lsrs	r3, r3, #2
 8002bfa:	3302      	adds	r3, #2
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d006      	beq.n	8002c1c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c0e:	4b39      	ldr	r3, [pc, #228]	; (8002cf4 <HAL_GPIO_Init+0x2b0>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	4938      	ldr	r1, [pc, #224]	; (8002cf4 <HAL_GPIO_Init+0x2b0>)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	600b      	str	r3, [r1, #0]
 8002c1a:	e006      	b.n	8002c2a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c1c:	4b35      	ldr	r3, [pc, #212]	; (8002cf4 <HAL_GPIO_Init+0x2b0>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	4933      	ldr	r1, [pc, #204]	; (8002cf4 <HAL_GPIO_Init+0x2b0>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d006      	beq.n	8002c44 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c36:	4b2f      	ldr	r3, [pc, #188]	; (8002cf4 <HAL_GPIO_Init+0x2b0>)
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	492e      	ldr	r1, [pc, #184]	; (8002cf4 <HAL_GPIO_Init+0x2b0>)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	604b      	str	r3, [r1, #4]
 8002c42:	e006      	b.n	8002c52 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c44:	4b2b      	ldr	r3, [pc, #172]	; (8002cf4 <HAL_GPIO_Init+0x2b0>)
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	4929      	ldr	r1, [pc, #164]	; (8002cf4 <HAL_GPIO_Init+0x2b0>)
 8002c4e:	4013      	ands	r3, r2
 8002c50:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d006      	beq.n	8002c6c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c5e:	4b25      	ldr	r3, [pc, #148]	; (8002cf4 <HAL_GPIO_Init+0x2b0>)
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	4924      	ldr	r1, [pc, #144]	; (8002cf4 <HAL_GPIO_Init+0x2b0>)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	608b      	str	r3, [r1, #8]
 8002c6a:	e006      	b.n	8002c7a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c6c:	4b21      	ldr	r3, [pc, #132]	; (8002cf4 <HAL_GPIO_Init+0x2b0>)
 8002c6e:	689a      	ldr	r2, [r3, #8]
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	43db      	mvns	r3, r3
 8002c74:	491f      	ldr	r1, [pc, #124]	; (8002cf4 <HAL_GPIO_Init+0x2b0>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d006      	beq.n	8002c94 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c86:	4b1b      	ldr	r3, [pc, #108]	; (8002cf4 <HAL_GPIO_Init+0x2b0>)
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	491a      	ldr	r1, [pc, #104]	; (8002cf4 <HAL_GPIO_Init+0x2b0>)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	60cb      	str	r3, [r1, #12]
 8002c92:	e006      	b.n	8002ca2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c94:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <HAL_GPIO_Init+0x2b0>)
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	69bb      	ldr	r3, [r7, #24]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	4915      	ldr	r1, [pc, #84]	; (8002cf4 <HAL_GPIO_Init+0x2b0>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f47f aed0 	bne.w	8002a58 <HAL_GPIO_Init+0x14>
  }
}
 8002cb8:	bf00      	nop
 8002cba:	372c      	adds	r7, #44	; 0x2c
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	10210000 	.word	0x10210000
 8002cc8:	10110000 	.word	0x10110000
 8002ccc:	10120000 	.word	0x10120000
 8002cd0:	10310000 	.word	0x10310000
 8002cd4:	10320000 	.word	0x10320000
 8002cd8:	10220000 	.word	0x10220000
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	40010800 	.word	0x40010800
 8002ce8:	40010c00 	.word	0x40010c00
 8002cec:	40011000 	.word	0x40011000
 8002cf0:	40011400 	.word	0x40011400
 8002cf4:	40010400 	.word	0x40010400

08002cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	807b      	strh	r3, [r7, #2]
 8002d04:	4613      	mov	r3, r2
 8002d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d08:	787b      	ldrb	r3, [r7, #1]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d0e:	887a      	ldrh	r2, [r7, #2]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d14:	e003      	b.n	8002d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d16:	887b      	ldrh	r3, [r7, #2]
 8002d18:	041a      	lsls	r2, r3, #16
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	611a      	str	r2, [r3, #16]
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr

08002d28 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d3a:	887a      	ldrh	r2, [r7, #2]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	041a      	lsls	r2, r3, #16
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	43d9      	mvns	r1, r3
 8002d46:	887b      	ldrh	r3, [r7, #2]
 8002d48:	400b      	ands	r3, r1
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	611a      	str	r2, [r3, #16]
}
 8002d50:	bf00      	nop
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr
	...

08002d5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e26c      	b.n	8003248 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 8087 	beq.w	8002e8a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d7c:	4b92      	ldr	r3, [pc, #584]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f003 030c 	and.w	r3, r3, #12
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d00c      	beq.n	8002da2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d88:	4b8f      	ldr	r3, [pc, #572]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d112      	bne.n	8002dba <HAL_RCC_OscConfig+0x5e>
 8002d94:	4b8c      	ldr	r3, [pc, #560]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002da0:	d10b      	bne.n	8002dba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da2:	4b89      	ldr	r3, [pc, #548]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d06c      	beq.n	8002e88 <HAL_RCC_OscConfig+0x12c>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d168      	bne.n	8002e88 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e246      	b.n	8003248 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc2:	d106      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x76>
 8002dc4:	4b80      	ldr	r3, [pc, #512]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a7f      	ldr	r2, [pc, #508]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	e02e      	b.n	8002e30 <HAL_RCC_OscConfig+0xd4>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x98>
 8002dda:	4b7b      	ldr	r3, [pc, #492]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a7a      	ldr	r2, [pc, #488]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	4b78      	ldr	r3, [pc, #480]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a77      	ldr	r2, [pc, #476]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002dec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e01d      	b.n	8002e30 <HAL_RCC_OscConfig+0xd4>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dfc:	d10c      	bne.n	8002e18 <HAL_RCC_OscConfig+0xbc>
 8002dfe:	4b72      	ldr	r3, [pc, #456]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a71      	ldr	r2, [pc, #452]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	4b6f      	ldr	r3, [pc, #444]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a6e      	ldr	r2, [pc, #440]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	e00b      	b.n	8002e30 <HAL_RCC_OscConfig+0xd4>
 8002e18:	4b6b      	ldr	r3, [pc, #428]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a6a      	ldr	r2, [pc, #424]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e22:	6013      	str	r3, [r2, #0]
 8002e24:	4b68      	ldr	r3, [pc, #416]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a67      	ldr	r2, [pc, #412]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002e2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e2e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d013      	beq.n	8002e60 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e38:	f7fe ff20 	bl	8001c7c <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e3e:	e008      	b.n	8002e52 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e40:	f7fe ff1c 	bl	8001c7c <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	2b64      	cmp	r3, #100	; 0x64
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e1fa      	b.n	8003248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e52:	4b5d      	ldr	r3, [pc, #372]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d0f0      	beq.n	8002e40 <HAL_RCC_OscConfig+0xe4>
 8002e5e:	e014      	b.n	8002e8a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e60:	f7fe ff0c 	bl	8001c7c <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e68:	f7fe ff08 	bl	8001c7c <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b64      	cmp	r3, #100	; 0x64
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e1e6      	b.n	8003248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7a:	4b53      	ldr	r3, [pc, #332]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x10c>
 8002e86:	e000      	b.n	8002e8a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d063      	beq.n	8002f5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e96:	4b4c      	ldr	r3, [pc, #304]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 030c 	and.w	r3, r3, #12
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00b      	beq.n	8002eba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ea2:	4b49      	ldr	r3, [pc, #292]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d11c      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x18c>
 8002eae:	4b46      	ldr	r3, [pc, #280]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d116      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eba:	4b43      	ldr	r3, [pc, #268]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x176>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d001      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e1ba      	b.n	8003248 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed2:	4b3d      	ldr	r3, [pc, #244]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	4939      	ldr	r1, [pc, #228]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ee6:	e03a      	b.n	8002f5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d020      	beq.n	8002f32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef0:	4b36      	ldr	r3, [pc, #216]	; (8002fcc <HAL_RCC_OscConfig+0x270>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef6:	f7fe fec1 	bl	8001c7c <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002efe:	f7fe febd 	bl	8001c7c <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e19b      	b.n	8003248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f10:	4b2d      	ldr	r3, [pc, #180]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0302 	and.w	r3, r3, #2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f1c:	4b2a      	ldr	r3, [pc, #168]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	00db      	lsls	r3, r3, #3
 8002f2a:	4927      	ldr	r1, [pc, #156]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	600b      	str	r3, [r1, #0]
 8002f30:	e015      	b.n	8002f5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f32:	4b26      	ldr	r3, [pc, #152]	; (8002fcc <HAL_RCC_OscConfig+0x270>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7fe fea0 	bl	8001c7c <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f40:	f7fe fe9c 	bl	8001c7c <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e17a      	b.n	8003248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f52:	4b1d      	ldr	r3, [pc, #116]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d03a      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d019      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f72:	4b17      	ldr	r3, [pc, #92]	; (8002fd0 <HAL_RCC_OscConfig+0x274>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f78:	f7fe fe80 	bl	8001c7c <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f80:	f7fe fe7c 	bl	8001c7c <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e15a      	b.n	8003248 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f92:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	f000 faa8 	bl	80034f4 <RCC_Delay>
 8002fa4:	e01c      	b.n	8002fe0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa6:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <HAL_RCC_OscConfig+0x274>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fac:	f7fe fe66 	bl	8001c7c <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb2:	e00f      	b.n	8002fd4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb4:	f7fe fe62 	bl	8001c7c <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d908      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e140      	b.n	8003248 <HAL_RCC_OscConfig+0x4ec>
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	42420000 	.word	0x42420000
 8002fd0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd4:	4b9e      	ldr	r3, [pc, #632]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1e9      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	f000 80a6 	beq.w	800313a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ff2:	4b97      	ldr	r3, [pc, #604]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10d      	bne.n	800301a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffe:	4b94      	ldr	r3, [pc, #592]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	4a93      	ldr	r2, [pc, #588]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 8003004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003008:	61d3      	str	r3, [r2, #28]
 800300a:	4b91      	ldr	r3, [pc, #580]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003016:	2301      	movs	r3, #1
 8003018:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301a:	4b8e      	ldr	r3, [pc, #568]	; (8003254 <HAL_RCC_OscConfig+0x4f8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d118      	bne.n	8003058 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003026:	4b8b      	ldr	r3, [pc, #556]	; (8003254 <HAL_RCC_OscConfig+0x4f8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a8a      	ldr	r2, [pc, #552]	; (8003254 <HAL_RCC_OscConfig+0x4f8>)
 800302c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003032:	f7fe fe23 	bl	8001c7c <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303a:	f7fe fe1f 	bl	8001c7c <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b64      	cmp	r3, #100	; 0x64
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e0fd      	b.n	8003248 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304c:	4b81      	ldr	r3, [pc, #516]	; (8003254 <HAL_RCC_OscConfig+0x4f8>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d106      	bne.n	800306e <HAL_RCC_OscConfig+0x312>
 8003060:	4b7b      	ldr	r3, [pc, #492]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	4a7a      	ldr	r2, [pc, #488]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	6213      	str	r3, [r2, #32]
 800306c:	e02d      	b.n	80030ca <HAL_RCC_OscConfig+0x36e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10c      	bne.n	8003090 <HAL_RCC_OscConfig+0x334>
 8003076:	4b76      	ldr	r3, [pc, #472]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	4a75      	ldr	r2, [pc, #468]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 800307c:	f023 0301 	bic.w	r3, r3, #1
 8003080:	6213      	str	r3, [r2, #32]
 8003082:	4b73      	ldr	r3, [pc, #460]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 8003084:	6a1b      	ldr	r3, [r3, #32]
 8003086:	4a72      	ldr	r2, [pc, #456]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 8003088:	f023 0304 	bic.w	r3, r3, #4
 800308c:	6213      	str	r3, [r2, #32]
 800308e:	e01c      	b.n	80030ca <HAL_RCC_OscConfig+0x36e>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	2b05      	cmp	r3, #5
 8003096:	d10c      	bne.n	80030b2 <HAL_RCC_OscConfig+0x356>
 8003098:	4b6d      	ldr	r3, [pc, #436]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	4a6c      	ldr	r2, [pc, #432]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 800309e:	f043 0304 	orr.w	r3, r3, #4
 80030a2:	6213      	str	r3, [r2, #32]
 80030a4:	4b6a      	ldr	r3, [pc, #424]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	4a69      	ldr	r2, [pc, #420]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	6213      	str	r3, [r2, #32]
 80030b0:	e00b      	b.n	80030ca <HAL_RCC_OscConfig+0x36e>
 80030b2:	4b67      	ldr	r3, [pc, #412]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	4a66      	ldr	r2, [pc, #408]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 80030b8:	f023 0301 	bic.w	r3, r3, #1
 80030bc:	6213      	str	r3, [r2, #32]
 80030be:	4b64      	ldr	r3, [pc, #400]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 80030c0:	6a1b      	ldr	r3, [r3, #32]
 80030c2:	4a63      	ldr	r2, [pc, #396]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 80030c4:	f023 0304 	bic.w	r3, r3, #4
 80030c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d015      	beq.n	80030fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030d2:	f7fe fdd3 	bl	8001c7c <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030d8:	e00a      	b.n	80030f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030da:	f7fe fdcf 	bl	8001c7c <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e0ab      	b.n	8003248 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f0:	4b57      	ldr	r3, [pc, #348]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 80030f2:	6a1b      	ldr	r3, [r3, #32]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0ee      	beq.n	80030da <HAL_RCC_OscConfig+0x37e>
 80030fc:	e014      	b.n	8003128 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fe:	f7fe fdbd 	bl	8001c7c <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003104:	e00a      	b.n	800311c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003106:	f7fe fdb9 	bl	8001c7c <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	f241 3288 	movw	r2, #5000	; 0x1388
 8003114:	4293      	cmp	r3, r2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e095      	b.n	8003248 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800311c:	4b4c      	ldr	r3, [pc, #304]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1ee      	bne.n	8003106 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003128:	7dfb      	ldrb	r3, [r7, #23]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d105      	bne.n	800313a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800312e:	4b48      	ldr	r3, [pc, #288]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	4a47      	ldr	r2, [pc, #284]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 8003134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003138:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 8081 	beq.w	8003246 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003144:	4b42      	ldr	r3, [pc, #264]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 030c 	and.w	r3, r3, #12
 800314c:	2b08      	cmp	r3, #8
 800314e:	d061      	beq.n	8003214 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d146      	bne.n	80031e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003158:	4b3f      	ldr	r3, [pc, #252]	; (8003258 <HAL_RCC_OscConfig+0x4fc>)
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315e:	f7fe fd8d 	bl	8001c7c <HAL_GetTick>
 8003162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003166:	f7fe fd89 	bl	8001c7c <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e067      	b.n	8003248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003178:	4b35      	ldr	r3, [pc, #212]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f0      	bne.n	8003166 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a1b      	ldr	r3, [r3, #32]
 8003188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800318c:	d108      	bne.n	80031a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800318e:	4b30      	ldr	r3, [pc, #192]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	492d      	ldr	r1, [pc, #180]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 800319c:	4313      	orrs	r3, r2
 800319e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031a0:	4b2b      	ldr	r3, [pc, #172]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a19      	ldr	r1, [r3, #32]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	430b      	orrs	r3, r1
 80031b2:	4927      	ldr	r1, [pc, #156]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 80031b4:	4313      	orrs	r3, r2
 80031b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031b8:	4b27      	ldr	r3, [pc, #156]	; (8003258 <HAL_RCC_OscConfig+0x4fc>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031be:	f7fe fd5d 	bl	8001c7c <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c6:	f7fe fd59 	bl	8001c7c <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e037      	b.n	8003248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031d8:	4b1d      	ldr	r3, [pc, #116]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x46a>
 80031e4:	e02f      	b.n	8003246 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e6:	4b1c      	ldr	r3, [pc, #112]	; (8003258 <HAL_RCC_OscConfig+0x4fc>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7fe fd46 	bl	8001c7c <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f4:	f7fe fd42 	bl	8001c7c <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e020      	b.n	8003248 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003206:	4b12      	ldr	r3, [pc, #72]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0x498>
 8003212:	e018      	b.n	8003246 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e013      	b.n	8003248 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <HAL_RCC_OscConfig+0x4f4>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	429a      	cmp	r2, r3
 8003232:	d106      	bne.n	8003242 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800323e:	429a      	cmp	r2, r3
 8003240:	d001      	beq.n	8003246 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40021000 	.word	0x40021000
 8003254:	40007000 	.word	0x40007000
 8003258:	42420060 	.word	0x42420060

0800325c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0d0      	b.n	8003412 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003270:	4b6a      	ldr	r3, [pc, #424]	; (800341c <HAL_RCC_ClockConfig+0x1c0>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0307 	and.w	r3, r3, #7
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	429a      	cmp	r2, r3
 800327c:	d910      	bls.n	80032a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327e:	4b67      	ldr	r3, [pc, #412]	; (800341c <HAL_RCC_ClockConfig+0x1c0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 0207 	bic.w	r2, r3, #7
 8003286:	4965      	ldr	r1, [pc, #404]	; (800341c <HAL_RCC_ClockConfig+0x1c0>)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	4313      	orrs	r3, r2
 800328c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800328e:	4b63      	ldr	r3, [pc, #396]	; (800341c <HAL_RCC_ClockConfig+0x1c0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0307 	and.w	r3, r3, #7
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	429a      	cmp	r2, r3
 800329a:	d001      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e0b8      	b.n	8003412 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d020      	beq.n	80032ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032b8:	4b59      	ldr	r3, [pc, #356]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	4a58      	ldr	r2, [pc, #352]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80032be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0308 	and.w	r3, r3, #8
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d005      	beq.n	80032dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032d0:	4b53      	ldr	r3, [pc, #332]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	4a52      	ldr	r2, [pc, #328]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80032d6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80032da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032dc:	4b50      	ldr	r3, [pc, #320]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	494d      	ldr	r1, [pc, #308]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d040      	beq.n	800337c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d107      	bne.n	8003312 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003302:	4b47      	ldr	r3, [pc, #284]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d115      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e07f      	b.n	8003412 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d107      	bne.n	800332a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800331a:	4b41      	ldr	r3, [pc, #260]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d109      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e073      	b.n	8003412 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332a:	4b3d      	ldr	r3, [pc, #244]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e06b      	b.n	8003412 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800333a:	4b39      	ldr	r3, [pc, #228]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f023 0203 	bic.w	r2, r3, #3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4936      	ldr	r1, [pc, #216]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 8003348:	4313      	orrs	r3, r2
 800334a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800334c:	f7fe fc96 	bl	8001c7c <HAL_GetTick>
 8003350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003352:	e00a      	b.n	800336a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003354:	f7fe fc92 	bl	8001c7c <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003362:	4293      	cmp	r3, r2
 8003364:	d901      	bls.n	800336a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e053      	b.n	8003412 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336a:	4b2d      	ldr	r3, [pc, #180]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 020c 	and.w	r2, r3, #12
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	429a      	cmp	r2, r3
 800337a:	d1eb      	bne.n	8003354 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800337c:	4b27      	ldr	r3, [pc, #156]	; (800341c <HAL_RCC_ClockConfig+0x1c0>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	429a      	cmp	r2, r3
 8003388:	d210      	bcs.n	80033ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338a:	4b24      	ldr	r3, [pc, #144]	; (800341c <HAL_RCC_ClockConfig+0x1c0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f023 0207 	bic.w	r2, r3, #7
 8003392:	4922      	ldr	r1, [pc, #136]	; (800341c <HAL_RCC_ClockConfig+0x1c0>)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	4313      	orrs	r3, r2
 8003398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800339a:	4b20      	ldr	r3, [pc, #128]	; (800341c <HAL_RCC_ClockConfig+0x1c0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0307 	and.w	r3, r3, #7
 80033a2:	683a      	ldr	r2, [r7, #0]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e032      	b.n	8003412 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d008      	beq.n	80033ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033b8:	4b19      	ldr	r3, [pc, #100]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	4916      	ldr	r1, [pc, #88]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0308 	and.w	r3, r3, #8
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d009      	beq.n	80033ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033d6:	4b12      	ldr	r3, [pc, #72]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	490e      	ldr	r1, [pc, #56]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80033e6:	4313      	orrs	r3, r2
 80033e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033ea:	f000 f821 	bl	8003430 <HAL_RCC_GetSysClockFreq>
 80033ee:	4601      	mov	r1, r0
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <HAL_RCC_ClockConfig+0x1c4>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	091b      	lsrs	r3, r3, #4
 80033f6:	f003 030f 	and.w	r3, r3, #15
 80033fa:	4a0a      	ldr	r2, [pc, #40]	; (8003424 <HAL_RCC_ClockConfig+0x1c8>)
 80033fc:	5cd3      	ldrb	r3, [r2, r3]
 80033fe:	fa21 f303 	lsr.w	r3, r1, r3
 8003402:	4a09      	ldr	r2, [pc, #36]	; (8003428 <HAL_RCC_ClockConfig+0x1cc>)
 8003404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003406:	4b09      	ldr	r3, [pc, #36]	; (800342c <HAL_RCC_ClockConfig+0x1d0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7fe fbf4 	bl	8001bf8 <HAL_InitTick>

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40022000 	.word	0x40022000
 8003420:	40021000 	.word	0x40021000
 8003424:	08005f20 	.word	0x08005f20
 8003428:	20000000 	.word	0x20000000
 800342c:	20000004 	.word	0x20000004

08003430 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003430:	b490      	push	{r4, r7}
 8003432:	b08a      	sub	sp, #40	; 0x28
 8003434:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003436:	4b2a      	ldr	r3, [pc, #168]	; (80034e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003438:	1d3c      	adds	r4, r7, #4
 800343a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800343c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003440:	4b28      	ldr	r3, [pc, #160]	; (80034e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	2300      	movs	r3, #0
 800344c:	61bb      	str	r3, [r7, #24]
 800344e:	2300      	movs	r3, #0
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800345a:	4b23      	ldr	r3, [pc, #140]	; (80034e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	2b04      	cmp	r3, #4
 8003468:	d002      	beq.n	8003470 <HAL_RCC_GetSysClockFreq+0x40>
 800346a:	2b08      	cmp	r3, #8
 800346c:	d003      	beq.n	8003476 <HAL_RCC_GetSysClockFreq+0x46>
 800346e:	e02d      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003470:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8003472:	623b      	str	r3, [r7, #32]
      break;
 8003474:	e02d      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	0c9b      	lsrs	r3, r3, #18
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003482:	4413      	add	r3, r2
 8003484:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003488:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003490:	2b00      	cmp	r3, #0
 8003492:	d013      	beq.n	80034bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003494:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	0c5b      	lsrs	r3, r3, #17
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80034a2:	4413      	add	r3, r2
 80034a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80034a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	4a0f      	ldr	r2, [pc, #60]	; (80034ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80034ae:	fb02 f203 	mul.w	r2, r2, r3
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ba:	e004      	b.n	80034c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	4a0c      	ldr	r2, [pc, #48]	; (80034f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80034c0:	fb02 f303 	mul.w	r3, r2, r3
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	623b      	str	r3, [r7, #32]
      break;
 80034ca:	e002      	b.n	80034d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034cc:	4b07      	ldr	r3, [pc, #28]	; (80034ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80034ce:	623b      	str	r3, [r7, #32]
      break;
 80034d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034d2:	6a3b      	ldr	r3, [r7, #32]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3728      	adds	r7, #40	; 0x28
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc90      	pop	{r4, r7}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	08005f0c 	.word	0x08005f0c
 80034e4:	08005f1c 	.word	0x08005f1c
 80034e8:	40021000 	.word	0x40021000
 80034ec:	007a1200 	.word	0x007a1200
 80034f0:	003d0900 	.word	0x003d0900

080034f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80034fc:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <RCC_Delay+0x34>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a0a      	ldr	r2, [pc, #40]	; (800352c <RCC_Delay+0x38>)
 8003502:	fba2 2303 	umull	r2, r3, r2, r3
 8003506:	0a5b      	lsrs	r3, r3, #9
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	fb02 f303 	mul.w	r3, r2, r3
 800350e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003510:	bf00      	nop
  }
  while (Delay --);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1e5a      	subs	r2, r3, #1
 8003516:	60fa      	str	r2, [r7, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1f9      	bne.n	8003510 <RCC_Delay+0x1c>
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	bc80      	pop	{r7}
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	20000000 	.word	0x20000000
 800352c:	10624dd3 	.word	0x10624dd3

08003530 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003538:	2300      	movs	r3, #0
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	2b00      	cmp	r3, #0
 800354a:	d07d      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800354c:	2300      	movs	r3, #0
 800354e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003550:	4b4f      	ldr	r3, [pc, #316]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10d      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800355c:	4b4c      	ldr	r3, [pc, #304]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	4a4b      	ldr	r2, [pc, #300]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003566:	61d3      	str	r3, [r2, #28]
 8003568:	4b49      	ldr	r3, [pc, #292]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003570:	60bb      	str	r3, [r7, #8]
 8003572:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003574:	2301      	movs	r3, #1
 8003576:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003578:	4b46      	ldr	r3, [pc, #280]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003580:	2b00      	cmp	r3, #0
 8003582:	d118      	bne.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003584:	4b43      	ldr	r3, [pc, #268]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a42      	ldr	r2, [pc, #264]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800358a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800358e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003590:	f7fe fb74 	bl	8001c7c <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003596:	e008      	b.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003598:	f7fe fb70 	bl	8001c7c <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b64      	cmp	r3, #100	; 0x64
 80035a4:	d901      	bls.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e06d      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035aa:	4b3a      	ldr	r3, [pc, #232]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035b6:	4b36      	ldr	r3, [pc, #216]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d02e      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d027      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035d4:	4b2e      	ldr	r3, [pc, #184]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035de:	4b2e      	ldr	r3, [pc, #184]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035e0:	2201      	movs	r2, #1
 80035e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035e4:	4b2c      	ldr	r3, [pc, #176]	; (8003698 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035ea:	4a29      	ldr	r2, [pc, #164]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d014      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fa:	f7fe fb3f 	bl	8001c7c <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003600:	e00a      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fe fb3b 	bl	8001c7c <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e036      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003618:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0ee      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003624:	4b1a      	ldr	r3, [pc, #104]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4917      	ldr	r1, [pc, #92]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003632:	4313      	orrs	r3, r2
 8003634:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003636:	7dfb      	ldrb	r3, [r7, #23]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d105      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800363c:	4b14      	ldr	r3, [pc, #80]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800363e:	69db      	ldr	r3, [r3, #28]
 8003640:	4a13      	ldr	r2, [pc, #76]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003646:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d008      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003654:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	490b      	ldr	r1, [pc, #44]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003662:	4313      	orrs	r3, r2
 8003664:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b00      	cmp	r3, #0
 8003670:	d008      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003672:	4b07      	ldr	r3, [pc, #28]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	4904      	ldr	r1, [pc, #16]	; (8003690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003680:	4313      	orrs	r3, r2
 8003682:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40021000 	.word	0x40021000
 8003694:	40007000 	.word	0x40007000
 8003698:	42420440 	.word	0x42420440

0800369c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e041      	b.n	8003732 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d106      	bne.n	80036c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7fe f9f0 	bl	8001aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3304      	adds	r3, #4
 80036d8:	4619      	mov	r1, r3
 80036da:	4610      	mov	r0, r2
 80036dc:	f000 fc24 	bl	8003f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d001      	beq.n	8003754 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e03a      	b.n	80037ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2202      	movs	r2, #2
 8003758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a18      	ldr	r2, [pc, #96]	; (80037d4 <HAL_TIM_Base_Start_IT+0x98>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00e      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x58>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800377e:	d009      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x58>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a14      	ldr	r2, [pc, #80]	; (80037d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d004      	beq.n	8003794 <HAL_TIM_Base_Start_IT+0x58>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a13      	ldr	r2, [pc, #76]	; (80037dc <HAL_TIM_Base_Start_IT+0xa0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d111      	bne.n	80037b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b06      	cmp	r3, #6
 80037a4:	d010      	beq.n	80037c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f042 0201 	orr.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037b6:	e007      	b.n	80037c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3714      	adds	r7, #20
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr
 80037d4:	40012c00 	.word	0x40012c00
 80037d8:	40000400 	.word	0x40000400
 80037dc:	40000800 	.word	0x40000800

080037e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e041      	b.n	8003876 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d106      	bne.n	800380c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f839 	bl	800387e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3304      	adds	r3, #4
 800381c:	4619      	mov	r1, r3
 800381e:	4610      	mov	r0, r2
 8003820:	f000 fb82 	bl	8003f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003874:	2300      	movs	r3, #0
}
 8003876:	4618      	mov	r0, r3
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800387e:	b480      	push	{r7}
 8003880:	b083      	sub	sp, #12
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	bc80      	pop	{r7}
 800388e:	4770      	bx	lr

08003890 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d109      	bne.n	80038b4 <HAL_TIM_PWM_Start+0x24>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	bf14      	ite	ne
 80038ac:	2301      	movne	r3, #1
 80038ae:	2300      	moveq	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	e022      	b.n	80038fa <HAL_TIM_PWM_Start+0x6a>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	d109      	bne.n	80038ce <HAL_TIM_PWM_Start+0x3e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	bf14      	ite	ne
 80038c6:	2301      	movne	r3, #1
 80038c8:	2300      	moveq	r3, #0
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	e015      	b.n	80038fa <HAL_TIM_PWM_Start+0x6a>
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d109      	bne.n	80038e8 <HAL_TIM_PWM_Start+0x58>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	2b01      	cmp	r3, #1
 80038de:	bf14      	ite	ne
 80038e0:	2301      	movne	r3, #1
 80038e2:	2300      	moveq	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	e008      	b.n	80038fa <HAL_TIM_PWM_Start+0x6a>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	bf14      	ite	ne
 80038f4:	2301      	movne	r3, #1
 80038f6:	2300      	moveq	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e05e      	b.n	80039c0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d104      	bne.n	8003912 <HAL_TIM_PWM_Start+0x82>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003910:	e013      	b.n	800393a <HAL_TIM_PWM_Start+0xaa>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b04      	cmp	r3, #4
 8003916:	d104      	bne.n	8003922 <HAL_TIM_PWM_Start+0x92>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2202      	movs	r2, #2
 800391c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003920:	e00b      	b.n	800393a <HAL_TIM_PWM_Start+0xaa>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b08      	cmp	r3, #8
 8003926:	d104      	bne.n	8003932 <HAL_TIM_PWM_Start+0xa2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003930:	e003      	b.n	800393a <HAL_TIM_PWM_Start+0xaa>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2202      	movs	r2, #2
 8003936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2201      	movs	r2, #1
 8003940:	6839      	ldr	r1, [r7, #0]
 8003942:	4618      	mov	r0, r3
 8003944:	f000 fd70 	bl	8004428 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a1e      	ldr	r2, [pc, #120]	; (80039c8 <HAL_TIM_PWM_Start+0x138>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d107      	bne.n	8003962 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003960:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a18      	ldr	r2, [pc, #96]	; (80039c8 <HAL_TIM_PWM_Start+0x138>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d00e      	beq.n	800398a <HAL_TIM_PWM_Start+0xfa>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003974:	d009      	beq.n	800398a <HAL_TIM_PWM_Start+0xfa>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a14      	ldr	r2, [pc, #80]	; (80039cc <HAL_TIM_PWM_Start+0x13c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d004      	beq.n	800398a <HAL_TIM_PWM_Start+0xfa>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a12      	ldr	r2, [pc, #72]	; (80039d0 <HAL_TIM_PWM_Start+0x140>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d111      	bne.n	80039ae <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b06      	cmp	r3, #6
 800399a:	d010      	beq.n	80039be <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f042 0201 	orr.w	r2, r2, #1
 80039aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ac:	e007      	b.n	80039be <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f042 0201 	orr.w	r2, r2, #1
 80039bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40012c00 	.word	0x40012c00
 80039cc:	40000400 	.word	0x40000400
 80039d0:	40000800 	.word	0x40000800

080039d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d122      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d11b      	bne.n	8003a30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0202 	mvn.w	r2, #2
 8003a00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2201      	movs	r2, #1
 8003a06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	f003 0303 	and.w	r3, r3, #3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fa6b 	bl	8003ef2 <HAL_TIM_IC_CaptureCallback>
 8003a1c:	e005      	b.n	8003a2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fa5e 	bl	8003ee0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 fa6d 	bl	8003f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d122      	bne.n	8003a84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 0304 	and.w	r3, r3, #4
 8003a48:	2b04      	cmp	r3, #4
 8003a4a:	d11b      	bne.n	8003a84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f06f 0204 	mvn.w	r2, #4
 8003a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2202      	movs	r2, #2
 8003a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fa41 	bl	8003ef2 <HAL_TIM_IC_CaptureCallback>
 8003a70:	e005      	b.n	8003a7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fa34 	bl	8003ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fa43 	bl	8003f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d122      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b08      	cmp	r3, #8
 8003a9e:	d11b      	bne.n	8003ad8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f06f 0208 	mvn.w	r2, #8
 8003aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2204      	movs	r2, #4
 8003aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fa17 	bl	8003ef2 <HAL_TIM_IC_CaptureCallback>
 8003ac4:	e005      	b.n	8003ad2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fa0a 	bl	8003ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fa19 	bl	8003f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f003 0310 	and.w	r3, r3, #16
 8003ae2:	2b10      	cmp	r3, #16
 8003ae4:	d122      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	2b10      	cmp	r3, #16
 8003af2:	d11b      	bne.n	8003b2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0210 	mvn.w	r2, #16
 8003afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2208      	movs	r2, #8
 8003b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f9ed 	bl	8003ef2 <HAL_TIM_IC_CaptureCallback>
 8003b18:	e005      	b.n	8003b26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 f9e0 	bl	8003ee0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f000 f9ef 	bl	8003f04 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d10e      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d107      	bne.n	8003b58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0201 	mvn.w	r2, #1
 8003b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f9bb 	bl	8003ece <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b62:	2b80      	cmp	r3, #128	; 0x80
 8003b64:	d10e      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b70:	2b80      	cmp	r3, #128	; 0x80
 8003b72:	d107      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 fd2e 	bl	80045e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b8e:	2b40      	cmp	r3, #64	; 0x40
 8003b90:	d10e      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9c:	2b40      	cmp	r3, #64	; 0x40
 8003b9e:	d107      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f9b3 	bl	8003f16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b20      	cmp	r3, #32
 8003bbc:	d10e      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b20      	cmp	r3, #32
 8003bca:	d107      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0220 	mvn.w	r2, #32
 8003bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 fcf9 	bl	80045ce <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003bdc:	bf00      	nop
 8003bde:	3708      	adds	r7, #8
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d101      	bne.n	8003bfe <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	e0ac      	b.n	8003d58 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b0c      	cmp	r3, #12
 8003c0a:	f200 809f 	bhi.w	8003d4c <HAL_TIM_PWM_ConfigChannel+0x168>
 8003c0e:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003c49 	.word	0x08003c49
 8003c18:	08003d4d 	.word	0x08003d4d
 8003c1c:	08003d4d 	.word	0x08003d4d
 8003c20:	08003d4d 	.word	0x08003d4d
 8003c24:	08003c89 	.word	0x08003c89
 8003c28:	08003d4d 	.word	0x08003d4d
 8003c2c:	08003d4d 	.word	0x08003d4d
 8003c30:	08003d4d 	.word	0x08003d4d
 8003c34:	08003ccb 	.word	0x08003ccb
 8003c38:	08003d4d 	.word	0x08003d4d
 8003c3c:	08003d4d 	.word	0x08003d4d
 8003c40:	08003d4d 	.word	0x08003d4d
 8003c44:	08003d0b 	.word	0x08003d0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68b9      	ldr	r1, [r7, #8]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 f9cc 	bl	8003fec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0208 	orr.w	r2, r2, #8
 8003c62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f022 0204 	bic.w	r2, r2, #4
 8003c72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6999      	ldr	r1, [r3, #24]
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	691a      	ldr	r2, [r3, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	619a      	str	r2, [r3, #24]
      break;
 8003c86:	e062      	b.n	8003d4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68b9      	ldr	r1, [r7, #8]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fa12 	bl	80040b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699a      	ldr	r2, [r3, #24]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6999      	ldr	r1, [r3, #24]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	021a      	lsls	r2, r3, #8
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	619a      	str	r2, [r3, #24]
      break;
 8003cc8:	e041      	b.n	8003d4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68b9      	ldr	r1, [r7, #8]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fa5b 	bl	800418c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69da      	ldr	r2, [r3, #28]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f042 0208 	orr.w	r2, r2, #8
 8003ce4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69da      	ldr	r2, [r3, #28]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f022 0204 	bic.w	r2, r2, #4
 8003cf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69d9      	ldr	r1, [r3, #28]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	691a      	ldr	r2, [r3, #16]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	61da      	str	r2, [r3, #28]
      break;
 8003d08:	e021      	b.n	8003d4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	68b9      	ldr	r1, [r7, #8]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 faa5 	bl	8004260 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	69da      	ldr	r2, [r3, #28]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69d9      	ldr	r1, [r3, #28]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	021a      	lsls	r2, r3, #8
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	61da      	str	r2, [r3, #28]
      break;
 8003d4a:	e000      	b.n	8003d4e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003d4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3710      	adds	r7, #16
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}

08003d60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_TIM_ConfigClockSource+0x18>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e0a6      	b.n	8003ec6 <HAL_TIM_ConfigClockSource+0x166>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d9e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b40      	cmp	r3, #64	; 0x40
 8003dae:	d067      	beq.n	8003e80 <HAL_TIM_ConfigClockSource+0x120>
 8003db0:	2b40      	cmp	r3, #64	; 0x40
 8003db2:	d80b      	bhi.n	8003dcc <HAL_TIM_ConfigClockSource+0x6c>
 8003db4:	2b10      	cmp	r3, #16
 8003db6:	d073      	beq.n	8003ea0 <HAL_TIM_ConfigClockSource+0x140>
 8003db8:	2b10      	cmp	r3, #16
 8003dba:	d802      	bhi.n	8003dc2 <HAL_TIM_ConfigClockSource+0x62>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d06f      	beq.n	8003ea0 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003dc0:	e078      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d06c      	beq.n	8003ea0 <HAL_TIM_ConfigClockSource+0x140>
 8003dc6:	2b30      	cmp	r3, #48	; 0x30
 8003dc8:	d06a      	beq.n	8003ea0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003dca:	e073      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dcc:	2b70      	cmp	r3, #112	; 0x70
 8003dce:	d00d      	beq.n	8003dec <HAL_TIM_ConfigClockSource+0x8c>
 8003dd0:	2b70      	cmp	r3, #112	; 0x70
 8003dd2:	d804      	bhi.n	8003dde <HAL_TIM_ConfigClockSource+0x7e>
 8003dd4:	2b50      	cmp	r3, #80	; 0x50
 8003dd6:	d033      	beq.n	8003e40 <HAL_TIM_ConfigClockSource+0xe0>
 8003dd8:	2b60      	cmp	r3, #96	; 0x60
 8003dda:	d041      	beq.n	8003e60 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003ddc:	e06a      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de2:	d066      	beq.n	8003eb2 <HAL_TIM_ConfigClockSource+0x152>
 8003de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003de8:	d017      	beq.n	8003e1a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003dea:	e063      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6818      	ldr	r0, [r3, #0]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	6899      	ldr	r1, [r3, #8]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	f000 faf5 	bl	80043ea <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e0e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68fa      	ldr	r2, [r7, #12]
 8003e16:	609a      	str	r2, [r3, #8]
      break;
 8003e18:	e04c      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6818      	ldr	r0, [r3, #0]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	6899      	ldr	r1, [r3, #8]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f000 fade 	bl	80043ea <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e3c:	609a      	str	r2, [r3, #8]
      break;
 8003e3e:	e039      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6818      	ldr	r0, [r3, #0]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	6859      	ldr	r1, [r3, #4]
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	f000 fa55 	bl	80042fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2150      	movs	r1, #80	; 0x50
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f000 faac 	bl	80043b6 <TIM_ITRx_SetConfig>
      break;
 8003e5e:	e029      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	6859      	ldr	r1, [r3, #4]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f000 fa73 	bl	8004358 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2160      	movs	r1, #96	; 0x60
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 fa9c 	bl	80043b6 <TIM_ITRx_SetConfig>
      break;
 8003e7e:	e019      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	6859      	ldr	r1, [r3, #4]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	f000 fa35 	bl	80042fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2140      	movs	r1, #64	; 0x40
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 fa8c 	bl	80043b6 <TIM_ITRx_SetConfig>
      break;
 8003e9e:	e009      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	f000 fa83 	bl	80043b6 <TIM_ITRx_SetConfig>
        break;
 8003eb0:	e000      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003eb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}

08003ece <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr

08003ee0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bc80      	pop	{r7}
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr

08003f04 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc80      	pop	{r7}
 8003f14:	4770      	bx	lr

08003f16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr

08003f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a29      	ldr	r2, [pc, #164]	; (8003fe0 <TIM_Base_SetConfig+0xb8>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x30>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x30>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a26      	ldr	r2, [pc, #152]	; (8003fe4 <TIM_Base_SetConfig+0xbc>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x30>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a25      	ldr	r2, [pc, #148]	; (8003fe8 <TIM_Base_SetConfig+0xc0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <TIM_Base_SetConfig+0xb8>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d00b      	beq.n	8003f8a <TIM_Base_SetConfig+0x62>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d007      	beq.n	8003f8a <TIM_Base_SetConfig+0x62>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a19      	ldr	r2, [pc, #100]	; (8003fe4 <TIM_Base_SetConfig+0xbc>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d003      	beq.n	8003f8a <TIM_Base_SetConfig+0x62>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <TIM_Base_SetConfig+0xc0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d108      	bne.n	8003f9c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a07      	ldr	r2, [pc, #28]	; (8003fe0 <TIM_Base_SetConfig+0xb8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d103      	bne.n	8003fd0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	691a      	ldr	r2, [r3, #16]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	615a      	str	r2, [r3, #20]
}
 8003fd6:	bf00      	nop
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bc80      	pop	{r7}
 8003fde:	4770      	bx	lr
 8003fe0:	40012c00 	.word	0x40012c00
 8003fe4:	40000400 	.word	0x40000400
 8003fe8:	40000800 	.word	0x40000800

08003fec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	f023 0201 	bic.w	r2, r3, #1
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f023 0303 	bic.w	r3, r3, #3
 8004022:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f023 0302 	bic.w	r3, r3, #2
 8004034:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a1c      	ldr	r2, [pc, #112]	; (80040b4 <TIM_OC1_SetConfig+0xc8>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d10c      	bne.n	8004062 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f023 0308 	bic.w	r3, r3, #8
 800404e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f023 0304 	bic.w	r3, r3, #4
 8004060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a13      	ldr	r2, [pc, #76]	; (80040b4 <TIM_OC1_SetConfig+0xc8>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d111      	bne.n	800408e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004070:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004078:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	693a      	ldr	r2, [r7, #16]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	693a      	ldr	r2, [r7, #16]
 8004092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	621a      	str	r2, [r3, #32]
}
 80040a8:	bf00      	nop
 80040aa:	371c      	adds	r7, #28
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	40012c00 	.word	0x40012c00

080040b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	f023 0210 	bic.w	r2, r3, #16
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f023 0320 	bic.w	r3, r3, #32
 8004102:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	011b      	lsls	r3, r3, #4
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a1d      	ldr	r2, [pc, #116]	; (8004188 <TIM_OC2_SetConfig+0xd0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d10d      	bne.n	8004134 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800411e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004132:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a14      	ldr	r2, [pc, #80]	; (8004188 <TIM_OC2_SetConfig+0xd0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d113      	bne.n	8004164 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004142:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800414a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	621a      	str	r2, [r3, #32]
}
 800417e:	bf00      	nop
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr
 8004188:	40012c00 	.word	0x40012c00

0800418c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800418c:	b480      	push	{r7}
 800418e:	b087      	sub	sp, #28
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f023 0303 	bic.w	r3, r3, #3
 80041c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	021b      	lsls	r3, r3, #8
 80041dc:	697a      	ldr	r2, [r7, #20]
 80041de:	4313      	orrs	r3, r2
 80041e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a1d      	ldr	r2, [pc, #116]	; (800425c <TIM_OC3_SetConfig+0xd0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d10d      	bne.n	8004206 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004204:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a14      	ldr	r2, [pc, #80]	; (800425c <TIM_OC3_SetConfig+0xd0>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d113      	bne.n	8004236 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004214:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800421c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	011b      	lsls	r3, r3, #4
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	4313      	orrs	r3, r2
 8004228:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	4313      	orrs	r3, r2
 8004234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	621a      	str	r2, [r3, #32]
}
 8004250:	bf00      	nop
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40012c00 	.word	0x40012c00

08004260 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a1b      	ldr	r3, [r3, #32]
 800426e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800428e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	021b      	lsls	r3, r3, #8
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	031b      	lsls	r3, r3, #12
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a0f      	ldr	r2, [pc, #60]	; (80042f8 <TIM_OC4_SetConfig+0x98>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d109      	bne.n	80042d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	019b      	lsls	r3, r3, #6
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	621a      	str	r2, [r3, #32]
}
 80042ee:	bf00      	nop
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bc80      	pop	{r7}
 80042f6:	4770      	bx	lr
 80042f8:	40012c00 	.word	0x40012c00

080042fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	f023 0201 	bic.w	r2, r3, #1
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	4313      	orrs	r3, r2
 8004330:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f023 030a 	bic.w	r3, r3, #10
 8004338:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4313      	orrs	r3, r2
 8004340:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	621a      	str	r2, [r3, #32]
}
 800434e:	bf00      	nop
 8004350:	371c      	adds	r7, #28
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr

08004358 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	f023 0210 	bic.w	r2, r3, #16
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004382:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	031b      	lsls	r3, r3, #12
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	4313      	orrs	r3, r2
 800438c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004394:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	011b      	lsls	r3, r3, #4
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	4313      	orrs	r3, r2
 800439e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	621a      	str	r2, [r3, #32]
}
 80043ac:	bf00      	nop
 80043ae:	371c      	adds	r7, #28
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr

080043b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b085      	sub	sp, #20
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	f043 0307 	orr.w	r3, r3, #7
 80043d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	609a      	str	r2, [r3, #8]
}
 80043e0:	bf00      	nop
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bc80      	pop	{r7}
 80043e8:	4770      	bx	lr

080043ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b087      	sub	sp, #28
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	60b9      	str	r1, [r7, #8]
 80043f4:	607a      	str	r2, [r7, #4]
 80043f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004404:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	021a      	lsls	r2, r3, #8
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	431a      	orrs	r2, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	4313      	orrs	r3, r2
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	4313      	orrs	r3, r2
 8004416:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	697a      	ldr	r2, [r7, #20]
 800441c:	609a      	str	r2, [r3, #8]
}
 800441e:	bf00      	nop
 8004420:	371c      	adds	r7, #28
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004428:	b480      	push	{r7}
 800442a:	b087      	sub	sp, #28
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f003 031f 	and.w	r3, r3, #31
 800443a:	2201      	movs	r2, #1
 800443c:	fa02 f303 	lsl.w	r3, r2, r3
 8004440:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a1a      	ldr	r2, [r3, #32]
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	43db      	mvns	r3, r3
 800444a:	401a      	ands	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a1a      	ldr	r2, [r3, #32]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f003 031f 	and.w	r3, r3, #31
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	fa01 f303 	lsl.w	r3, r1, r3
 8004460:	431a      	orrs	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	621a      	str	r2, [r3, #32]
}
 8004466:	bf00      	nop
 8004468:	371c      	adds	r7, #28
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr

08004470 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004480:	2b01      	cmp	r3, #1
 8004482:	d101      	bne.n	8004488 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004484:	2302      	movs	r3, #2
 8004486:	e046      	b.n	8004516 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2202      	movs	r2, #2
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a16      	ldr	r2, [pc, #88]	; (8004520 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d00e      	beq.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d4:	d009      	beq.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a12      	ldr	r2, [pc, #72]	; (8004524 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d004      	beq.n	80044ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a10      	ldr	r2, [pc, #64]	; (8004528 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d10c      	bne.n	8004504 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	bc80      	pop	{r7}
 800451e:	4770      	bx	lr
 8004520:	40012c00 	.word	0x40012c00
 8004524:	40000400 	.word	0x40000400
 8004528:	40000800 	.word	0x40000800

0800452c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004536:	2300      	movs	r3, #0
 8004538:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004544:	2302      	movs	r3, #2
 8004546:	e03d      	b.n	80045c4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	4313      	orrs	r3, r2
 800455c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bc80      	pop	{r7}
 80045cc:	4770      	bx	lr

080045ce <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b083      	sub	sp, #12
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	bc80      	pop	{r7}
 80045de:	4770      	bx	lr

080045e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr
	...

080045f4 <__errno>:
 80045f4:	4b01      	ldr	r3, [pc, #4]	; (80045fc <__errno+0x8>)
 80045f6:	6818      	ldr	r0, [r3, #0]
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	2000000c 	.word	0x2000000c

08004600 <__libc_init_array>:
 8004600:	b570      	push	{r4, r5, r6, lr}
 8004602:	2500      	movs	r5, #0
 8004604:	4e0c      	ldr	r6, [pc, #48]	; (8004638 <__libc_init_array+0x38>)
 8004606:	4c0d      	ldr	r4, [pc, #52]	; (800463c <__libc_init_array+0x3c>)
 8004608:	1ba4      	subs	r4, r4, r6
 800460a:	10a4      	asrs	r4, r4, #2
 800460c:	42a5      	cmp	r5, r4
 800460e:	d109      	bne.n	8004624 <__libc_init_array+0x24>
 8004610:	f001 fc5e 	bl	8005ed0 <_init>
 8004614:	2500      	movs	r5, #0
 8004616:	4e0a      	ldr	r6, [pc, #40]	; (8004640 <__libc_init_array+0x40>)
 8004618:	4c0a      	ldr	r4, [pc, #40]	; (8004644 <__libc_init_array+0x44>)
 800461a:	1ba4      	subs	r4, r4, r6
 800461c:	10a4      	asrs	r4, r4, #2
 800461e:	42a5      	cmp	r5, r4
 8004620:	d105      	bne.n	800462e <__libc_init_array+0x2e>
 8004622:	bd70      	pop	{r4, r5, r6, pc}
 8004624:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004628:	4798      	blx	r3
 800462a:	3501      	adds	r5, #1
 800462c:	e7ee      	b.n	800460c <__libc_init_array+0xc>
 800462e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004632:	4798      	blx	r3
 8004634:	3501      	adds	r5, #1
 8004636:	e7f2      	b.n	800461e <__libc_init_array+0x1e>
 8004638:	08005fa8 	.word	0x08005fa8
 800463c:	08005fa8 	.word	0x08005fa8
 8004640:	08005fa8 	.word	0x08005fa8
 8004644:	08005fac 	.word	0x08005fac

08004648 <memset>:
 8004648:	4603      	mov	r3, r0
 800464a:	4402      	add	r2, r0
 800464c:	4293      	cmp	r3, r2
 800464e:	d100      	bne.n	8004652 <memset+0xa>
 8004650:	4770      	bx	lr
 8004652:	f803 1b01 	strb.w	r1, [r3], #1
 8004656:	e7f9      	b.n	800464c <memset+0x4>

08004658 <siprintf>:
 8004658:	b40e      	push	{r1, r2, r3}
 800465a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800465e:	b500      	push	{lr}
 8004660:	b09c      	sub	sp, #112	; 0x70
 8004662:	ab1d      	add	r3, sp, #116	; 0x74
 8004664:	9002      	str	r0, [sp, #8]
 8004666:	9006      	str	r0, [sp, #24]
 8004668:	9107      	str	r1, [sp, #28]
 800466a:	9104      	str	r1, [sp, #16]
 800466c:	4808      	ldr	r0, [pc, #32]	; (8004690 <siprintf+0x38>)
 800466e:	4909      	ldr	r1, [pc, #36]	; (8004694 <siprintf+0x3c>)
 8004670:	f853 2b04 	ldr.w	r2, [r3], #4
 8004674:	9105      	str	r1, [sp, #20]
 8004676:	6800      	ldr	r0, [r0, #0]
 8004678:	a902      	add	r1, sp, #8
 800467a:	9301      	str	r3, [sp, #4]
 800467c:	f000 f866 	bl	800474c <_svfiprintf_r>
 8004680:	2200      	movs	r2, #0
 8004682:	9b02      	ldr	r3, [sp, #8]
 8004684:	701a      	strb	r2, [r3, #0]
 8004686:	b01c      	add	sp, #112	; 0x70
 8004688:	f85d eb04 	ldr.w	lr, [sp], #4
 800468c:	b003      	add	sp, #12
 800468e:	4770      	bx	lr
 8004690:	2000000c 	.word	0x2000000c
 8004694:	ffff0208 	.word	0xffff0208

08004698 <__ssputs_r>:
 8004698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800469c:	688e      	ldr	r6, [r1, #8]
 800469e:	4682      	mov	sl, r0
 80046a0:	429e      	cmp	r6, r3
 80046a2:	460c      	mov	r4, r1
 80046a4:	4690      	mov	r8, r2
 80046a6:	4699      	mov	r9, r3
 80046a8:	d837      	bhi.n	800471a <__ssputs_r+0x82>
 80046aa:	898a      	ldrh	r2, [r1, #12]
 80046ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80046b0:	d031      	beq.n	8004716 <__ssputs_r+0x7e>
 80046b2:	2302      	movs	r3, #2
 80046b4:	6825      	ldr	r5, [r4, #0]
 80046b6:	6909      	ldr	r1, [r1, #16]
 80046b8:	1a6f      	subs	r7, r5, r1
 80046ba:	6965      	ldr	r5, [r4, #20]
 80046bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80046c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80046c4:	f109 0301 	add.w	r3, r9, #1
 80046c8:	443b      	add	r3, r7
 80046ca:	429d      	cmp	r5, r3
 80046cc:	bf38      	it	cc
 80046ce:	461d      	movcc	r5, r3
 80046d0:	0553      	lsls	r3, r2, #21
 80046d2:	d530      	bpl.n	8004736 <__ssputs_r+0x9e>
 80046d4:	4629      	mov	r1, r5
 80046d6:	f000 fb37 	bl	8004d48 <_malloc_r>
 80046da:	4606      	mov	r6, r0
 80046dc:	b950      	cbnz	r0, 80046f4 <__ssputs_r+0x5c>
 80046de:	230c      	movs	r3, #12
 80046e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046e4:	f8ca 3000 	str.w	r3, [sl]
 80046e8:	89a3      	ldrh	r3, [r4, #12]
 80046ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046ee:	81a3      	strh	r3, [r4, #12]
 80046f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046f4:	463a      	mov	r2, r7
 80046f6:	6921      	ldr	r1, [r4, #16]
 80046f8:	f000 fab6 	bl	8004c68 <memcpy>
 80046fc:	89a3      	ldrh	r3, [r4, #12]
 80046fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004706:	81a3      	strh	r3, [r4, #12]
 8004708:	6126      	str	r6, [r4, #16]
 800470a:	443e      	add	r6, r7
 800470c:	6026      	str	r6, [r4, #0]
 800470e:	464e      	mov	r6, r9
 8004710:	6165      	str	r5, [r4, #20]
 8004712:	1bed      	subs	r5, r5, r7
 8004714:	60a5      	str	r5, [r4, #8]
 8004716:	454e      	cmp	r6, r9
 8004718:	d900      	bls.n	800471c <__ssputs_r+0x84>
 800471a:	464e      	mov	r6, r9
 800471c:	4632      	mov	r2, r6
 800471e:	4641      	mov	r1, r8
 8004720:	6820      	ldr	r0, [r4, #0]
 8004722:	f000 faac 	bl	8004c7e <memmove>
 8004726:	68a3      	ldr	r3, [r4, #8]
 8004728:	2000      	movs	r0, #0
 800472a:	1b9b      	subs	r3, r3, r6
 800472c:	60a3      	str	r3, [r4, #8]
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	441e      	add	r6, r3
 8004732:	6026      	str	r6, [r4, #0]
 8004734:	e7dc      	b.n	80046f0 <__ssputs_r+0x58>
 8004736:	462a      	mov	r2, r5
 8004738:	f000 fb60 	bl	8004dfc <_realloc_r>
 800473c:	4606      	mov	r6, r0
 800473e:	2800      	cmp	r0, #0
 8004740:	d1e2      	bne.n	8004708 <__ssputs_r+0x70>
 8004742:	6921      	ldr	r1, [r4, #16]
 8004744:	4650      	mov	r0, sl
 8004746:	f000 fab3 	bl	8004cb0 <_free_r>
 800474a:	e7c8      	b.n	80046de <__ssputs_r+0x46>

0800474c <_svfiprintf_r>:
 800474c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004750:	461d      	mov	r5, r3
 8004752:	898b      	ldrh	r3, [r1, #12]
 8004754:	b09d      	sub	sp, #116	; 0x74
 8004756:	061f      	lsls	r7, r3, #24
 8004758:	4680      	mov	r8, r0
 800475a:	460c      	mov	r4, r1
 800475c:	4616      	mov	r6, r2
 800475e:	d50f      	bpl.n	8004780 <_svfiprintf_r+0x34>
 8004760:	690b      	ldr	r3, [r1, #16]
 8004762:	b96b      	cbnz	r3, 8004780 <_svfiprintf_r+0x34>
 8004764:	2140      	movs	r1, #64	; 0x40
 8004766:	f000 faef 	bl	8004d48 <_malloc_r>
 800476a:	6020      	str	r0, [r4, #0]
 800476c:	6120      	str	r0, [r4, #16]
 800476e:	b928      	cbnz	r0, 800477c <_svfiprintf_r+0x30>
 8004770:	230c      	movs	r3, #12
 8004772:	f8c8 3000 	str.w	r3, [r8]
 8004776:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800477a:	e0c8      	b.n	800490e <_svfiprintf_r+0x1c2>
 800477c:	2340      	movs	r3, #64	; 0x40
 800477e:	6163      	str	r3, [r4, #20]
 8004780:	2300      	movs	r3, #0
 8004782:	9309      	str	r3, [sp, #36]	; 0x24
 8004784:	2320      	movs	r3, #32
 8004786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800478a:	2330      	movs	r3, #48	; 0x30
 800478c:	f04f 0b01 	mov.w	fp, #1
 8004790:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004794:	9503      	str	r5, [sp, #12]
 8004796:	4637      	mov	r7, r6
 8004798:	463d      	mov	r5, r7
 800479a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800479e:	b10b      	cbz	r3, 80047a4 <_svfiprintf_r+0x58>
 80047a0:	2b25      	cmp	r3, #37	; 0x25
 80047a2:	d13e      	bne.n	8004822 <_svfiprintf_r+0xd6>
 80047a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80047a8:	d00b      	beq.n	80047c2 <_svfiprintf_r+0x76>
 80047aa:	4653      	mov	r3, sl
 80047ac:	4632      	mov	r2, r6
 80047ae:	4621      	mov	r1, r4
 80047b0:	4640      	mov	r0, r8
 80047b2:	f7ff ff71 	bl	8004698 <__ssputs_r>
 80047b6:	3001      	adds	r0, #1
 80047b8:	f000 80a4 	beq.w	8004904 <_svfiprintf_r+0x1b8>
 80047bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047be:	4453      	add	r3, sl
 80047c0:	9309      	str	r3, [sp, #36]	; 0x24
 80047c2:	783b      	ldrb	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 809d 	beq.w	8004904 <_svfiprintf_r+0x1b8>
 80047ca:	2300      	movs	r3, #0
 80047cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80047d4:	9304      	str	r3, [sp, #16]
 80047d6:	9307      	str	r3, [sp, #28]
 80047d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80047dc:	931a      	str	r3, [sp, #104]	; 0x68
 80047de:	462f      	mov	r7, r5
 80047e0:	2205      	movs	r2, #5
 80047e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80047e6:	4850      	ldr	r0, [pc, #320]	; (8004928 <_svfiprintf_r+0x1dc>)
 80047e8:	f000 fa30 	bl	8004c4c <memchr>
 80047ec:	9b04      	ldr	r3, [sp, #16]
 80047ee:	b9d0      	cbnz	r0, 8004826 <_svfiprintf_r+0xda>
 80047f0:	06d9      	lsls	r1, r3, #27
 80047f2:	bf44      	itt	mi
 80047f4:	2220      	movmi	r2, #32
 80047f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80047fa:	071a      	lsls	r2, r3, #28
 80047fc:	bf44      	itt	mi
 80047fe:	222b      	movmi	r2, #43	; 0x2b
 8004800:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004804:	782a      	ldrb	r2, [r5, #0]
 8004806:	2a2a      	cmp	r2, #42	; 0x2a
 8004808:	d015      	beq.n	8004836 <_svfiprintf_r+0xea>
 800480a:	462f      	mov	r7, r5
 800480c:	2000      	movs	r0, #0
 800480e:	250a      	movs	r5, #10
 8004810:	9a07      	ldr	r2, [sp, #28]
 8004812:	4639      	mov	r1, r7
 8004814:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004818:	3b30      	subs	r3, #48	; 0x30
 800481a:	2b09      	cmp	r3, #9
 800481c:	d94d      	bls.n	80048ba <_svfiprintf_r+0x16e>
 800481e:	b1b8      	cbz	r0, 8004850 <_svfiprintf_r+0x104>
 8004820:	e00f      	b.n	8004842 <_svfiprintf_r+0xf6>
 8004822:	462f      	mov	r7, r5
 8004824:	e7b8      	b.n	8004798 <_svfiprintf_r+0x4c>
 8004826:	4a40      	ldr	r2, [pc, #256]	; (8004928 <_svfiprintf_r+0x1dc>)
 8004828:	463d      	mov	r5, r7
 800482a:	1a80      	subs	r0, r0, r2
 800482c:	fa0b f000 	lsl.w	r0, fp, r0
 8004830:	4318      	orrs	r0, r3
 8004832:	9004      	str	r0, [sp, #16]
 8004834:	e7d3      	b.n	80047de <_svfiprintf_r+0x92>
 8004836:	9a03      	ldr	r2, [sp, #12]
 8004838:	1d11      	adds	r1, r2, #4
 800483a:	6812      	ldr	r2, [r2, #0]
 800483c:	9103      	str	r1, [sp, #12]
 800483e:	2a00      	cmp	r2, #0
 8004840:	db01      	blt.n	8004846 <_svfiprintf_r+0xfa>
 8004842:	9207      	str	r2, [sp, #28]
 8004844:	e004      	b.n	8004850 <_svfiprintf_r+0x104>
 8004846:	4252      	negs	r2, r2
 8004848:	f043 0302 	orr.w	r3, r3, #2
 800484c:	9207      	str	r2, [sp, #28]
 800484e:	9304      	str	r3, [sp, #16]
 8004850:	783b      	ldrb	r3, [r7, #0]
 8004852:	2b2e      	cmp	r3, #46	; 0x2e
 8004854:	d10c      	bne.n	8004870 <_svfiprintf_r+0x124>
 8004856:	787b      	ldrb	r3, [r7, #1]
 8004858:	2b2a      	cmp	r3, #42	; 0x2a
 800485a:	d133      	bne.n	80048c4 <_svfiprintf_r+0x178>
 800485c:	9b03      	ldr	r3, [sp, #12]
 800485e:	3702      	adds	r7, #2
 8004860:	1d1a      	adds	r2, r3, #4
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	9203      	str	r2, [sp, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	bfb8      	it	lt
 800486a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800486e:	9305      	str	r3, [sp, #20]
 8004870:	4d2e      	ldr	r5, [pc, #184]	; (800492c <_svfiprintf_r+0x1e0>)
 8004872:	2203      	movs	r2, #3
 8004874:	7839      	ldrb	r1, [r7, #0]
 8004876:	4628      	mov	r0, r5
 8004878:	f000 f9e8 	bl	8004c4c <memchr>
 800487c:	b138      	cbz	r0, 800488e <_svfiprintf_r+0x142>
 800487e:	2340      	movs	r3, #64	; 0x40
 8004880:	1b40      	subs	r0, r0, r5
 8004882:	fa03 f000 	lsl.w	r0, r3, r0
 8004886:	9b04      	ldr	r3, [sp, #16]
 8004888:	3701      	adds	r7, #1
 800488a:	4303      	orrs	r3, r0
 800488c:	9304      	str	r3, [sp, #16]
 800488e:	7839      	ldrb	r1, [r7, #0]
 8004890:	2206      	movs	r2, #6
 8004892:	4827      	ldr	r0, [pc, #156]	; (8004930 <_svfiprintf_r+0x1e4>)
 8004894:	1c7e      	adds	r6, r7, #1
 8004896:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800489a:	f000 f9d7 	bl	8004c4c <memchr>
 800489e:	2800      	cmp	r0, #0
 80048a0:	d038      	beq.n	8004914 <_svfiprintf_r+0x1c8>
 80048a2:	4b24      	ldr	r3, [pc, #144]	; (8004934 <_svfiprintf_r+0x1e8>)
 80048a4:	bb13      	cbnz	r3, 80048ec <_svfiprintf_r+0x1a0>
 80048a6:	9b03      	ldr	r3, [sp, #12]
 80048a8:	3307      	adds	r3, #7
 80048aa:	f023 0307 	bic.w	r3, r3, #7
 80048ae:	3308      	adds	r3, #8
 80048b0:	9303      	str	r3, [sp, #12]
 80048b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048b4:	444b      	add	r3, r9
 80048b6:	9309      	str	r3, [sp, #36]	; 0x24
 80048b8:	e76d      	b.n	8004796 <_svfiprintf_r+0x4a>
 80048ba:	fb05 3202 	mla	r2, r5, r2, r3
 80048be:	2001      	movs	r0, #1
 80048c0:	460f      	mov	r7, r1
 80048c2:	e7a6      	b.n	8004812 <_svfiprintf_r+0xc6>
 80048c4:	2300      	movs	r3, #0
 80048c6:	250a      	movs	r5, #10
 80048c8:	4619      	mov	r1, r3
 80048ca:	3701      	adds	r7, #1
 80048cc:	9305      	str	r3, [sp, #20]
 80048ce:	4638      	mov	r0, r7
 80048d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80048d4:	3a30      	subs	r2, #48	; 0x30
 80048d6:	2a09      	cmp	r2, #9
 80048d8:	d903      	bls.n	80048e2 <_svfiprintf_r+0x196>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0c8      	beq.n	8004870 <_svfiprintf_r+0x124>
 80048de:	9105      	str	r1, [sp, #20]
 80048e0:	e7c6      	b.n	8004870 <_svfiprintf_r+0x124>
 80048e2:	fb05 2101 	mla	r1, r5, r1, r2
 80048e6:	2301      	movs	r3, #1
 80048e8:	4607      	mov	r7, r0
 80048ea:	e7f0      	b.n	80048ce <_svfiprintf_r+0x182>
 80048ec:	ab03      	add	r3, sp, #12
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	4622      	mov	r2, r4
 80048f2:	4b11      	ldr	r3, [pc, #68]	; (8004938 <_svfiprintf_r+0x1ec>)
 80048f4:	a904      	add	r1, sp, #16
 80048f6:	4640      	mov	r0, r8
 80048f8:	f3af 8000 	nop.w
 80048fc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004900:	4681      	mov	r9, r0
 8004902:	d1d6      	bne.n	80048b2 <_svfiprintf_r+0x166>
 8004904:	89a3      	ldrh	r3, [r4, #12]
 8004906:	065b      	lsls	r3, r3, #25
 8004908:	f53f af35 	bmi.w	8004776 <_svfiprintf_r+0x2a>
 800490c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800490e:	b01d      	add	sp, #116	; 0x74
 8004910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004914:	ab03      	add	r3, sp, #12
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	4622      	mov	r2, r4
 800491a:	4b07      	ldr	r3, [pc, #28]	; (8004938 <_svfiprintf_r+0x1ec>)
 800491c:	a904      	add	r1, sp, #16
 800491e:	4640      	mov	r0, r8
 8004920:	f000 f882 	bl	8004a28 <_printf_i>
 8004924:	e7ea      	b.n	80048fc <_svfiprintf_r+0x1b0>
 8004926:	bf00      	nop
 8004928:	08005f30 	.word	0x08005f30
 800492c:	08005f36 	.word	0x08005f36
 8004930:	08005f3a 	.word	0x08005f3a
 8004934:	00000000 	.word	0x00000000
 8004938:	08004699 	.word	0x08004699

0800493c <_printf_common>:
 800493c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004940:	4691      	mov	r9, r2
 8004942:	461f      	mov	r7, r3
 8004944:	688a      	ldr	r2, [r1, #8]
 8004946:	690b      	ldr	r3, [r1, #16]
 8004948:	4606      	mov	r6, r0
 800494a:	4293      	cmp	r3, r2
 800494c:	bfb8      	it	lt
 800494e:	4613      	movlt	r3, r2
 8004950:	f8c9 3000 	str.w	r3, [r9]
 8004954:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004958:	460c      	mov	r4, r1
 800495a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800495e:	b112      	cbz	r2, 8004966 <_printf_common+0x2a>
 8004960:	3301      	adds	r3, #1
 8004962:	f8c9 3000 	str.w	r3, [r9]
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	0699      	lsls	r1, r3, #26
 800496a:	bf42      	ittt	mi
 800496c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004970:	3302      	addmi	r3, #2
 8004972:	f8c9 3000 	strmi.w	r3, [r9]
 8004976:	6825      	ldr	r5, [r4, #0]
 8004978:	f015 0506 	ands.w	r5, r5, #6
 800497c:	d107      	bne.n	800498e <_printf_common+0x52>
 800497e:	f104 0a19 	add.w	sl, r4, #25
 8004982:	68e3      	ldr	r3, [r4, #12]
 8004984:	f8d9 2000 	ldr.w	r2, [r9]
 8004988:	1a9b      	subs	r3, r3, r2
 800498a:	42ab      	cmp	r3, r5
 800498c:	dc29      	bgt.n	80049e2 <_printf_common+0xa6>
 800498e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004992:	6822      	ldr	r2, [r4, #0]
 8004994:	3300      	adds	r3, #0
 8004996:	bf18      	it	ne
 8004998:	2301      	movne	r3, #1
 800499a:	0692      	lsls	r2, r2, #26
 800499c:	d42e      	bmi.n	80049fc <_printf_common+0xc0>
 800499e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80049a2:	4639      	mov	r1, r7
 80049a4:	4630      	mov	r0, r6
 80049a6:	47c0      	blx	r8
 80049a8:	3001      	adds	r0, #1
 80049aa:	d021      	beq.n	80049f0 <_printf_common+0xb4>
 80049ac:	6823      	ldr	r3, [r4, #0]
 80049ae:	68e5      	ldr	r5, [r4, #12]
 80049b0:	f003 0306 	and.w	r3, r3, #6
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	bf18      	it	ne
 80049b8:	2500      	movne	r5, #0
 80049ba:	f8d9 2000 	ldr.w	r2, [r9]
 80049be:	f04f 0900 	mov.w	r9, #0
 80049c2:	bf08      	it	eq
 80049c4:	1aad      	subeq	r5, r5, r2
 80049c6:	68a3      	ldr	r3, [r4, #8]
 80049c8:	6922      	ldr	r2, [r4, #16]
 80049ca:	bf08      	it	eq
 80049cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049d0:	4293      	cmp	r3, r2
 80049d2:	bfc4      	itt	gt
 80049d4:	1a9b      	subgt	r3, r3, r2
 80049d6:	18ed      	addgt	r5, r5, r3
 80049d8:	341a      	adds	r4, #26
 80049da:	454d      	cmp	r5, r9
 80049dc:	d11a      	bne.n	8004a14 <_printf_common+0xd8>
 80049de:	2000      	movs	r0, #0
 80049e0:	e008      	b.n	80049f4 <_printf_common+0xb8>
 80049e2:	2301      	movs	r3, #1
 80049e4:	4652      	mov	r2, sl
 80049e6:	4639      	mov	r1, r7
 80049e8:	4630      	mov	r0, r6
 80049ea:	47c0      	blx	r8
 80049ec:	3001      	adds	r0, #1
 80049ee:	d103      	bne.n	80049f8 <_printf_common+0xbc>
 80049f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f8:	3501      	adds	r5, #1
 80049fa:	e7c2      	b.n	8004982 <_printf_common+0x46>
 80049fc:	2030      	movs	r0, #48	; 0x30
 80049fe:	18e1      	adds	r1, r4, r3
 8004a00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a0a:	4422      	add	r2, r4
 8004a0c:	3302      	adds	r3, #2
 8004a0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a12:	e7c4      	b.n	800499e <_printf_common+0x62>
 8004a14:	2301      	movs	r3, #1
 8004a16:	4622      	mov	r2, r4
 8004a18:	4639      	mov	r1, r7
 8004a1a:	4630      	mov	r0, r6
 8004a1c:	47c0      	blx	r8
 8004a1e:	3001      	adds	r0, #1
 8004a20:	d0e6      	beq.n	80049f0 <_printf_common+0xb4>
 8004a22:	f109 0901 	add.w	r9, r9, #1
 8004a26:	e7d8      	b.n	80049da <_printf_common+0x9e>

08004a28 <_printf_i>:
 8004a28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004a30:	460c      	mov	r4, r1
 8004a32:	7e09      	ldrb	r1, [r1, #24]
 8004a34:	b085      	sub	sp, #20
 8004a36:	296e      	cmp	r1, #110	; 0x6e
 8004a38:	4617      	mov	r7, r2
 8004a3a:	4606      	mov	r6, r0
 8004a3c:	4698      	mov	r8, r3
 8004a3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a40:	f000 80b3 	beq.w	8004baa <_printf_i+0x182>
 8004a44:	d822      	bhi.n	8004a8c <_printf_i+0x64>
 8004a46:	2963      	cmp	r1, #99	; 0x63
 8004a48:	d036      	beq.n	8004ab8 <_printf_i+0x90>
 8004a4a:	d80a      	bhi.n	8004a62 <_printf_i+0x3a>
 8004a4c:	2900      	cmp	r1, #0
 8004a4e:	f000 80b9 	beq.w	8004bc4 <_printf_i+0x19c>
 8004a52:	2958      	cmp	r1, #88	; 0x58
 8004a54:	f000 8083 	beq.w	8004b5e <_printf_i+0x136>
 8004a58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004a60:	e032      	b.n	8004ac8 <_printf_i+0xa0>
 8004a62:	2964      	cmp	r1, #100	; 0x64
 8004a64:	d001      	beq.n	8004a6a <_printf_i+0x42>
 8004a66:	2969      	cmp	r1, #105	; 0x69
 8004a68:	d1f6      	bne.n	8004a58 <_printf_i+0x30>
 8004a6a:	6820      	ldr	r0, [r4, #0]
 8004a6c:	6813      	ldr	r3, [r2, #0]
 8004a6e:	0605      	lsls	r5, r0, #24
 8004a70:	f103 0104 	add.w	r1, r3, #4
 8004a74:	d52a      	bpl.n	8004acc <_printf_i+0xa4>
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6011      	str	r1, [r2, #0]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	da03      	bge.n	8004a86 <_printf_i+0x5e>
 8004a7e:	222d      	movs	r2, #45	; 0x2d
 8004a80:	425b      	negs	r3, r3
 8004a82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004a86:	486f      	ldr	r0, [pc, #444]	; (8004c44 <_printf_i+0x21c>)
 8004a88:	220a      	movs	r2, #10
 8004a8a:	e039      	b.n	8004b00 <_printf_i+0xd8>
 8004a8c:	2973      	cmp	r1, #115	; 0x73
 8004a8e:	f000 809d 	beq.w	8004bcc <_printf_i+0x1a4>
 8004a92:	d808      	bhi.n	8004aa6 <_printf_i+0x7e>
 8004a94:	296f      	cmp	r1, #111	; 0x6f
 8004a96:	d020      	beq.n	8004ada <_printf_i+0xb2>
 8004a98:	2970      	cmp	r1, #112	; 0x70
 8004a9a:	d1dd      	bne.n	8004a58 <_printf_i+0x30>
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	f043 0320 	orr.w	r3, r3, #32
 8004aa2:	6023      	str	r3, [r4, #0]
 8004aa4:	e003      	b.n	8004aae <_printf_i+0x86>
 8004aa6:	2975      	cmp	r1, #117	; 0x75
 8004aa8:	d017      	beq.n	8004ada <_printf_i+0xb2>
 8004aaa:	2978      	cmp	r1, #120	; 0x78
 8004aac:	d1d4      	bne.n	8004a58 <_printf_i+0x30>
 8004aae:	2378      	movs	r3, #120	; 0x78
 8004ab0:	4865      	ldr	r0, [pc, #404]	; (8004c48 <_printf_i+0x220>)
 8004ab2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ab6:	e055      	b.n	8004b64 <_printf_i+0x13c>
 8004ab8:	6813      	ldr	r3, [r2, #0]
 8004aba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004abe:	1d19      	adds	r1, r3, #4
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6011      	str	r1, [r2, #0]
 8004ac4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e08c      	b.n	8004be6 <_printf_i+0x1be>
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ad2:	6011      	str	r1, [r2, #0]
 8004ad4:	bf18      	it	ne
 8004ad6:	b21b      	sxthne	r3, r3
 8004ad8:	e7cf      	b.n	8004a7a <_printf_i+0x52>
 8004ada:	6813      	ldr	r3, [r2, #0]
 8004adc:	6825      	ldr	r5, [r4, #0]
 8004ade:	1d18      	adds	r0, r3, #4
 8004ae0:	6010      	str	r0, [r2, #0]
 8004ae2:	0628      	lsls	r0, r5, #24
 8004ae4:	d501      	bpl.n	8004aea <_printf_i+0xc2>
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	e002      	b.n	8004af0 <_printf_i+0xc8>
 8004aea:	0668      	lsls	r0, r5, #25
 8004aec:	d5fb      	bpl.n	8004ae6 <_printf_i+0xbe>
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	296f      	cmp	r1, #111	; 0x6f
 8004af2:	bf14      	ite	ne
 8004af4:	220a      	movne	r2, #10
 8004af6:	2208      	moveq	r2, #8
 8004af8:	4852      	ldr	r0, [pc, #328]	; (8004c44 <_printf_i+0x21c>)
 8004afa:	2100      	movs	r1, #0
 8004afc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b00:	6865      	ldr	r5, [r4, #4]
 8004b02:	2d00      	cmp	r5, #0
 8004b04:	60a5      	str	r5, [r4, #8]
 8004b06:	f2c0 8095 	blt.w	8004c34 <_printf_i+0x20c>
 8004b0a:	6821      	ldr	r1, [r4, #0]
 8004b0c:	f021 0104 	bic.w	r1, r1, #4
 8004b10:	6021      	str	r1, [r4, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d13d      	bne.n	8004b92 <_printf_i+0x16a>
 8004b16:	2d00      	cmp	r5, #0
 8004b18:	f040 808e 	bne.w	8004c38 <_printf_i+0x210>
 8004b1c:	4665      	mov	r5, ip
 8004b1e:	2a08      	cmp	r2, #8
 8004b20:	d10b      	bne.n	8004b3a <_printf_i+0x112>
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	07db      	lsls	r3, r3, #31
 8004b26:	d508      	bpl.n	8004b3a <_printf_i+0x112>
 8004b28:	6923      	ldr	r3, [r4, #16]
 8004b2a:	6862      	ldr	r2, [r4, #4]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	bfde      	ittt	le
 8004b30:	2330      	movle	r3, #48	; 0x30
 8004b32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b36:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004b3a:	ebac 0305 	sub.w	r3, ip, r5
 8004b3e:	6123      	str	r3, [r4, #16]
 8004b40:	f8cd 8000 	str.w	r8, [sp]
 8004b44:	463b      	mov	r3, r7
 8004b46:	aa03      	add	r2, sp, #12
 8004b48:	4621      	mov	r1, r4
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	f7ff fef6 	bl	800493c <_printf_common>
 8004b50:	3001      	adds	r0, #1
 8004b52:	d14d      	bne.n	8004bf0 <_printf_i+0x1c8>
 8004b54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b58:	b005      	add	sp, #20
 8004b5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b5e:	4839      	ldr	r0, [pc, #228]	; (8004c44 <_printf_i+0x21c>)
 8004b60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004b64:	6813      	ldr	r3, [r2, #0]
 8004b66:	6821      	ldr	r1, [r4, #0]
 8004b68:	1d1d      	adds	r5, r3, #4
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	6015      	str	r5, [r2, #0]
 8004b6e:	060a      	lsls	r2, r1, #24
 8004b70:	d50b      	bpl.n	8004b8a <_printf_i+0x162>
 8004b72:	07ca      	lsls	r2, r1, #31
 8004b74:	bf44      	itt	mi
 8004b76:	f041 0120 	orrmi.w	r1, r1, #32
 8004b7a:	6021      	strmi	r1, [r4, #0]
 8004b7c:	b91b      	cbnz	r3, 8004b86 <_printf_i+0x15e>
 8004b7e:	6822      	ldr	r2, [r4, #0]
 8004b80:	f022 0220 	bic.w	r2, r2, #32
 8004b84:	6022      	str	r2, [r4, #0]
 8004b86:	2210      	movs	r2, #16
 8004b88:	e7b7      	b.n	8004afa <_printf_i+0xd2>
 8004b8a:	064d      	lsls	r5, r1, #25
 8004b8c:	bf48      	it	mi
 8004b8e:	b29b      	uxthmi	r3, r3
 8004b90:	e7ef      	b.n	8004b72 <_printf_i+0x14a>
 8004b92:	4665      	mov	r5, ip
 8004b94:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b98:	fb02 3311 	mls	r3, r2, r1, r3
 8004b9c:	5cc3      	ldrb	r3, [r0, r3]
 8004b9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	2900      	cmp	r1, #0
 8004ba6:	d1f5      	bne.n	8004b94 <_printf_i+0x16c>
 8004ba8:	e7b9      	b.n	8004b1e <_printf_i+0xf6>
 8004baa:	6813      	ldr	r3, [r2, #0]
 8004bac:	6825      	ldr	r5, [r4, #0]
 8004bae:	1d18      	adds	r0, r3, #4
 8004bb0:	6961      	ldr	r1, [r4, #20]
 8004bb2:	6010      	str	r0, [r2, #0]
 8004bb4:	0628      	lsls	r0, r5, #24
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	d501      	bpl.n	8004bbe <_printf_i+0x196>
 8004bba:	6019      	str	r1, [r3, #0]
 8004bbc:	e002      	b.n	8004bc4 <_printf_i+0x19c>
 8004bbe:	066a      	lsls	r2, r5, #25
 8004bc0:	d5fb      	bpl.n	8004bba <_printf_i+0x192>
 8004bc2:	8019      	strh	r1, [r3, #0]
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	4665      	mov	r5, ip
 8004bc8:	6123      	str	r3, [r4, #16]
 8004bca:	e7b9      	b.n	8004b40 <_printf_i+0x118>
 8004bcc:	6813      	ldr	r3, [r2, #0]
 8004bce:	1d19      	adds	r1, r3, #4
 8004bd0:	6011      	str	r1, [r2, #0]
 8004bd2:	681d      	ldr	r5, [r3, #0]
 8004bd4:	6862      	ldr	r2, [r4, #4]
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	4628      	mov	r0, r5
 8004bda:	f000 f837 	bl	8004c4c <memchr>
 8004bde:	b108      	cbz	r0, 8004be4 <_printf_i+0x1bc>
 8004be0:	1b40      	subs	r0, r0, r5
 8004be2:	6060      	str	r0, [r4, #4]
 8004be4:	6863      	ldr	r3, [r4, #4]
 8004be6:	6123      	str	r3, [r4, #16]
 8004be8:	2300      	movs	r3, #0
 8004bea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bee:	e7a7      	b.n	8004b40 <_printf_i+0x118>
 8004bf0:	6923      	ldr	r3, [r4, #16]
 8004bf2:	462a      	mov	r2, r5
 8004bf4:	4639      	mov	r1, r7
 8004bf6:	4630      	mov	r0, r6
 8004bf8:	47c0      	blx	r8
 8004bfa:	3001      	adds	r0, #1
 8004bfc:	d0aa      	beq.n	8004b54 <_printf_i+0x12c>
 8004bfe:	6823      	ldr	r3, [r4, #0]
 8004c00:	079b      	lsls	r3, r3, #30
 8004c02:	d413      	bmi.n	8004c2c <_printf_i+0x204>
 8004c04:	68e0      	ldr	r0, [r4, #12]
 8004c06:	9b03      	ldr	r3, [sp, #12]
 8004c08:	4298      	cmp	r0, r3
 8004c0a:	bfb8      	it	lt
 8004c0c:	4618      	movlt	r0, r3
 8004c0e:	e7a3      	b.n	8004b58 <_printf_i+0x130>
 8004c10:	2301      	movs	r3, #1
 8004c12:	464a      	mov	r2, r9
 8004c14:	4639      	mov	r1, r7
 8004c16:	4630      	mov	r0, r6
 8004c18:	47c0      	blx	r8
 8004c1a:	3001      	adds	r0, #1
 8004c1c:	d09a      	beq.n	8004b54 <_printf_i+0x12c>
 8004c1e:	3501      	adds	r5, #1
 8004c20:	68e3      	ldr	r3, [r4, #12]
 8004c22:	9a03      	ldr	r2, [sp, #12]
 8004c24:	1a9b      	subs	r3, r3, r2
 8004c26:	42ab      	cmp	r3, r5
 8004c28:	dcf2      	bgt.n	8004c10 <_printf_i+0x1e8>
 8004c2a:	e7eb      	b.n	8004c04 <_printf_i+0x1dc>
 8004c2c:	2500      	movs	r5, #0
 8004c2e:	f104 0919 	add.w	r9, r4, #25
 8004c32:	e7f5      	b.n	8004c20 <_printf_i+0x1f8>
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1ac      	bne.n	8004b92 <_printf_i+0x16a>
 8004c38:	7803      	ldrb	r3, [r0, #0]
 8004c3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c42:	e76c      	b.n	8004b1e <_printf_i+0xf6>
 8004c44:	08005f41 	.word	0x08005f41
 8004c48:	08005f52 	.word	0x08005f52

08004c4c <memchr>:
 8004c4c:	b510      	push	{r4, lr}
 8004c4e:	b2c9      	uxtb	r1, r1
 8004c50:	4402      	add	r2, r0
 8004c52:	4290      	cmp	r0, r2
 8004c54:	4603      	mov	r3, r0
 8004c56:	d101      	bne.n	8004c5c <memchr+0x10>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	e003      	b.n	8004c64 <memchr+0x18>
 8004c5c:	781c      	ldrb	r4, [r3, #0]
 8004c5e:	3001      	adds	r0, #1
 8004c60:	428c      	cmp	r4, r1
 8004c62:	d1f6      	bne.n	8004c52 <memchr+0x6>
 8004c64:	4618      	mov	r0, r3
 8004c66:	bd10      	pop	{r4, pc}

08004c68 <memcpy>:
 8004c68:	b510      	push	{r4, lr}
 8004c6a:	1e43      	subs	r3, r0, #1
 8004c6c:	440a      	add	r2, r1
 8004c6e:	4291      	cmp	r1, r2
 8004c70:	d100      	bne.n	8004c74 <memcpy+0xc>
 8004c72:	bd10      	pop	{r4, pc}
 8004c74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c7c:	e7f7      	b.n	8004c6e <memcpy+0x6>

08004c7e <memmove>:
 8004c7e:	4288      	cmp	r0, r1
 8004c80:	b510      	push	{r4, lr}
 8004c82:	eb01 0302 	add.w	r3, r1, r2
 8004c86:	d807      	bhi.n	8004c98 <memmove+0x1a>
 8004c88:	1e42      	subs	r2, r0, #1
 8004c8a:	4299      	cmp	r1, r3
 8004c8c:	d00a      	beq.n	8004ca4 <memmove+0x26>
 8004c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c92:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004c96:	e7f8      	b.n	8004c8a <memmove+0xc>
 8004c98:	4283      	cmp	r3, r0
 8004c9a:	d9f5      	bls.n	8004c88 <memmove+0xa>
 8004c9c:	1881      	adds	r1, r0, r2
 8004c9e:	1ad2      	subs	r2, r2, r3
 8004ca0:	42d3      	cmn	r3, r2
 8004ca2:	d100      	bne.n	8004ca6 <memmove+0x28>
 8004ca4:	bd10      	pop	{r4, pc}
 8004ca6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004caa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004cae:	e7f7      	b.n	8004ca0 <memmove+0x22>

08004cb0 <_free_r>:
 8004cb0:	b538      	push	{r3, r4, r5, lr}
 8004cb2:	4605      	mov	r5, r0
 8004cb4:	2900      	cmp	r1, #0
 8004cb6:	d043      	beq.n	8004d40 <_free_r+0x90>
 8004cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cbc:	1f0c      	subs	r4, r1, #4
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	bfb8      	it	lt
 8004cc2:	18e4      	addlt	r4, r4, r3
 8004cc4:	f000 f8d0 	bl	8004e68 <__malloc_lock>
 8004cc8:	4a1e      	ldr	r2, [pc, #120]	; (8004d44 <_free_r+0x94>)
 8004cca:	6813      	ldr	r3, [r2, #0]
 8004ccc:	4610      	mov	r0, r2
 8004cce:	b933      	cbnz	r3, 8004cde <_free_r+0x2e>
 8004cd0:	6063      	str	r3, [r4, #4]
 8004cd2:	6014      	str	r4, [r2, #0]
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cda:	f000 b8c6 	b.w	8004e6a <__malloc_unlock>
 8004cde:	42a3      	cmp	r3, r4
 8004ce0:	d90b      	bls.n	8004cfa <_free_r+0x4a>
 8004ce2:	6821      	ldr	r1, [r4, #0]
 8004ce4:	1862      	adds	r2, r4, r1
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	bf01      	itttt	eq
 8004cea:	681a      	ldreq	r2, [r3, #0]
 8004cec:	685b      	ldreq	r3, [r3, #4]
 8004cee:	1852      	addeq	r2, r2, r1
 8004cf0:	6022      	streq	r2, [r4, #0]
 8004cf2:	6063      	str	r3, [r4, #4]
 8004cf4:	6004      	str	r4, [r0, #0]
 8004cf6:	e7ed      	b.n	8004cd4 <_free_r+0x24>
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	b10a      	cbz	r2, 8004d02 <_free_r+0x52>
 8004cfe:	42a2      	cmp	r2, r4
 8004d00:	d9fa      	bls.n	8004cf8 <_free_r+0x48>
 8004d02:	6819      	ldr	r1, [r3, #0]
 8004d04:	1858      	adds	r0, r3, r1
 8004d06:	42a0      	cmp	r0, r4
 8004d08:	d10b      	bne.n	8004d22 <_free_r+0x72>
 8004d0a:	6820      	ldr	r0, [r4, #0]
 8004d0c:	4401      	add	r1, r0
 8004d0e:	1858      	adds	r0, r3, r1
 8004d10:	4282      	cmp	r2, r0
 8004d12:	6019      	str	r1, [r3, #0]
 8004d14:	d1de      	bne.n	8004cd4 <_free_r+0x24>
 8004d16:	6810      	ldr	r0, [r2, #0]
 8004d18:	6852      	ldr	r2, [r2, #4]
 8004d1a:	4401      	add	r1, r0
 8004d1c:	6019      	str	r1, [r3, #0]
 8004d1e:	605a      	str	r2, [r3, #4]
 8004d20:	e7d8      	b.n	8004cd4 <_free_r+0x24>
 8004d22:	d902      	bls.n	8004d2a <_free_r+0x7a>
 8004d24:	230c      	movs	r3, #12
 8004d26:	602b      	str	r3, [r5, #0]
 8004d28:	e7d4      	b.n	8004cd4 <_free_r+0x24>
 8004d2a:	6820      	ldr	r0, [r4, #0]
 8004d2c:	1821      	adds	r1, r4, r0
 8004d2e:	428a      	cmp	r2, r1
 8004d30:	bf01      	itttt	eq
 8004d32:	6811      	ldreq	r1, [r2, #0]
 8004d34:	6852      	ldreq	r2, [r2, #4]
 8004d36:	1809      	addeq	r1, r1, r0
 8004d38:	6021      	streq	r1, [r4, #0]
 8004d3a:	6062      	str	r2, [r4, #4]
 8004d3c:	605c      	str	r4, [r3, #4]
 8004d3e:	e7c9      	b.n	8004cd4 <_free_r+0x24>
 8004d40:	bd38      	pop	{r3, r4, r5, pc}
 8004d42:	bf00      	nop
 8004d44:	20000094 	.word	0x20000094

08004d48 <_malloc_r>:
 8004d48:	b570      	push	{r4, r5, r6, lr}
 8004d4a:	1ccd      	adds	r5, r1, #3
 8004d4c:	f025 0503 	bic.w	r5, r5, #3
 8004d50:	3508      	adds	r5, #8
 8004d52:	2d0c      	cmp	r5, #12
 8004d54:	bf38      	it	cc
 8004d56:	250c      	movcc	r5, #12
 8004d58:	2d00      	cmp	r5, #0
 8004d5a:	4606      	mov	r6, r0
 8004d5c:	db01      	blt.n	8004d62 <_malloc_r+0x1a>
 8004d5e:	42a9      	cmp	r1, r5
 8004d60:	d903      	bls.n	8004d6a <_malloc_r+0x22>
 8004d62:	230c      	movs	r3, #12
 8004d64:	6033      	str	r3, [r6, #0]
 8004d66:	2000      	movs	r0, #0
 8004d68:	bd70      	pop	{r4, r5, r6, pc}
 8004d6a:	f000 f87d 	bl	8004e68 <__malloc_lock>
 8004d6e:	4a21      	ldr	r2, [pc, #132]	; (8004df4 <_malloc_r+0xac>)
 8004d70:	6814      	ldr	r4, [r2, #0]
 8004d72:	4621      	mov	r1, r4
 8004d74:	b991      	cbnz	r1, 8004d9c <_malloc_r+0x54>
 8004d76:	4c20      	ldr	r4, [pc, #128]	; (8004df8 <_malloc_r+0xb0>)
 8004d78:	6823      	ldr	r3, [r4, #0]
 8004d7a:	b91b      	cbnz	r3, 8004d84 <_malloc_r+0x3c>
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	f000 f863 	bl	8004e48 <_sbrk_r>
 8004d82:	6020      	str	r0, [r4, #0]
 8004d84:	4629      	mov	r1, r5
 8004d86:	4630      	mov	r0, r6
 8004d88:	f000 f85e 	bl	8004e48 <_sbrk_r>
 8004d8c:	1c43      	adds	r3, r0, #1
 8004d8e:	d124      	bne.n	8004dda <_malloc_r+0x92>
 8004d90:	230c      	movs	r3, #12
 8004d92:	4630      	mov	r0, r6
 8004d94:	6033      	str	r3, [r6, #0]
 8004d96:	f000 f868 	bl	8004e6a <__malloc_unlock>
 8004d9a:	e7e4      	b.n	8004d66 <_malloc_r+0x1e>
 8004d9c:	680b      	ldr	r3, [r1, #0]
 8004d9e:	1b5b      	subs	r3, r3, r5
 8004da0:	d418      	bmi.n	8004dd4 <_malloc_r+0x8c>
 8004da2:	2b0b      	cmp	r3, #11
 8004da4:	d90f      	bls.n	8004dc6 <_malloc_r+0x7e>
 8004da6:	600b      	str	r3, [r1, #0]
 8004da8:	18cc      	adds	r4, r1, r3
 8004daa:	50cd      	str	r5, [r1, r3]
 8004dac:	4630      	mov	r0, r6
 8004dae:	f000 f85c 	bl	8004e6a <__malloc_unlock>
 8004db2:	f104 000b 	add.w	r0, r4, #11
 8004db6:	1d23      	adds	r3, r4, #4
 8004db8:	f020 0007 	bic.w	r0, r0, #7
 8004dbc:	1ac3      	subs	r3, r0, r3
 8004dbe:	d0d3      	beq.n	8004d68 <_malloc_r+0x20>
 8004dc0:	425a      	negs	r2, r3
 8004dc2:	50e2      	str	r2, [r4, r3]
 8004dc4:	e7d0      	b.n	8004d68 <_malloc_r+0x20>
 8004dc6:	684b      	ldr	r3, [r1, #4]
 8004dc8:	428c      	cmp	r4, r1
 8004dca:	bf16      	itet	ne
 8004dcc:	6063      	strne	r3, [r4, #4]
 8004dce:	6013      	streq	r3, [r2, #0]
 8004dd0:	460c      	movne	r4, r1
 8004dd2:	e7eb      	b.n	8004dac <_malloc_r+0x64>
 8004dd4:	460c      	mov	r4, r1
 8004dd6:	6849      	ldr	r1, [r1, #4]
 8004dd8:	e7cc      	b.n	8004d74 <_malloc_r+0x2c>
 8004dda:	1cc4      	adds	r4, r0, #3
 8004ddc:	f024 0403 	bic.w	r4, r4, #3
 8004de0:	42a0      	cmp	r0, r4
 8004de2:	d005      	beq.n	8004df0 <_malloc_r+0xa8>
 8004de4:	1a21      	subs	r1, r4, r0
 8004de6:	4630      	mov	r0, r6
 8004de8:	f000 f82e 	bl	8004e48 <_sbrk_r>
 8004dec:	3001      	adds	r0, #1
 8004dee:	d0cf      	beq.n	8004d90 <_malloc_r+0x48>
 8004df0:	6025      	str	r5, [r4, #0]
 8004df2:	e7db      	b.n	8004dac <_malloc_r+0x64>
 8004df4:	20000094 	.word	0x20000094
 8004df8:	20000098 	.word	0x20000098

08004dfc <_realloc_r>:
 8004dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfe:	4607      	mov	r7, r0
 8004e00:	4614      	mov	r4, r2
 8004e02:	460e      	mov	r6, r1
 8004e04:	b921      	cbnz	r1, 8004e10 <_realloc_r+0x14>
 8004e06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	f7ff bf9c 	b.w	8004d48 <_malloc_r>
 8004e10:	b922      	cbnz	r2, 8004e1c <_realloc_r+0x20>
 8004e12:	f7ff ff4d 	bl	8004cb0 <_free_r>
 8004e16:	4625      	mov	r5, r4
 8004e18:	4628      	mov	r0, r5
 8004e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e1c:	f000 f826 	bl	8004e6c <_malloc_usable_size_r>
 8004e20:	42a0      	cmp	r0, r4
 8004e22:	d20f      	bcs.n	8004e44 <_realloc_r+0x48>
 8004e24:	4621      	mov	r1, r4
 8004e26:	4638      	mov	r0, r7
 8004e28:	f7ff ff8e 	bl	8004d48 <_malloc_r>
 8004e2c:	4605      	mov	r5, r0
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	d0f2      	beq.n	8004e18 <_realloc_r+0x1c>
 8004e32:	4631      	mov	r1, r6
 8004e34:	4622      	mov	r2, r4
 8004e36:	f7ff ff17 	bl	8004c68 <memcpy>
 8004e3a:	4631      	mov	r1, r6
 8004e3c:	4638      	mov	r0, r7
 8004e3e:	f7ff ff37 	bl	8004cb0 <_free_r>
 8004e42:	e7e9      	b.n	8004e18 <_realloc_r+0x1c>
 8004e44:	4635      	mov	r5, r6
 8004e46:	e7e7      	b.n	8004e18 <_realloc_r+0x1c>

08004e48 <_sbrk_r>:
 8004e48:	b538      	push	{r3, r4, r5, lr}
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	4c05      	ldr	r4, [pc, #20]	; (8004e64 <_sbrk_r+0x1c>)
 8004e4e:	4605      	mov	r5, r0
 8004e50:	4608      	mov	r0, r1
 8004e52:	6023      	str	r3, [r4, #0]
 8004e54:	f7fc fce4 	bl	8001820 <_sbrk>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	d102      	bne.n	8004e62 <_sbrk_r+0x1a>
 8004e5c:	6823      	ldr	r3, [r4, #0]
 8004e5e:	b103      	cbz	r3, 8004e62 <_sbrk_r+0x1a>
 8004e60:	602b      	str	r3, [r5, #0]
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	200001a4 	.word	0x200001a4

08004e68 <__malloc_lock>:
 8004e68:	4770      	bx	lr

08004e6a <__malloc_unlock>:
 8004e6a:	4770      	bx	lr

08004e6c <_malloc_usable_size_r>:
 8004e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e70:	1f18      	subs	r0, r3, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	bfbc      	itt	lt
 8004e76:	580b      	ldrlt	r3, [r1, r0]
 8004e78:	18c0      	addlt	r0, r0, r3
 8004e7a:	4770      	bx	lr

08004e7c <pow>:
 8004e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e80:	b08f      	sub	sp, #60	; 0x3c
 8004e82:	461d      	mov	r5, r3
 8004e84:	4680      	mov	r8, r0
 8004e86:	4689      	mov	r9, r1
 8004e88:	4614      	mov	r4, r2
 8004e8a:	f000 f955 	bl	8005138 <__ieee754_pow>
 8004e8e:	4fa1      	ldr	r7, [pc, #644]	; (8005114 <pow+0x298>)
 8004e90:	e9cd 0100 	strd	r0, r1, [sp]
 8004e94:	f997 3000 	ldrsb.w	r3, [r7]
 8004e98:	463e      	mov	r6, r7
 8004e9a:	9302      	str	r3, [sp, #8]
 8004e9c:	3301      	adds	r3, #1
 8004e9e:	d05f      	beq.n	8004f60 <pow+0xe4>
 8004ea0:	4622      	mov	r2, r4
 8004ea2:	462b      	mov	r3, r5
 8004ea4:	4620      	mov	r0, r4
 8004ea6:	4629      	mov	r1, r5
 8004ea8:	f7fb fda8 	bl	80009fc <__aeabi_dcmpun>
 8004eac:	4682      	mov	sl, r0
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	d156      	bne.n	8004f60 <pow+0xe4>
 8004eb2:	4642      	mov	r2, r8
 8004eb4:	464b      	mov	r3, r9
 8004eb6:	4640      	mov	r0, r8
 8004eb8:	4649      	mov	r1, r9
 8004eba:	f7fb fd9f 	bl	80009fc <__aeabi_dcmpun>
 8004ebe:	9003      	str	r0, [sp, #12]
 8004ec0:	b1e8      	cbz	r0, 8004efe <pow+0x82>
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	4620      	mov	r0, r4
 8004ec8:	4629      	mov	r1, r5
 8004eca:	f7fb fd65 	bl	8000998 <__aeabi_dcmpeq>
 8004ece:	2800      	cmp	r0, #0
 8004ed0:	d046      	beq.n	8004f60 <pow+0xe4>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	9304      	str	r3, [sp, #16]
 8004ed8:	4b8f      	ldr	r3, [pc, #572]	; (8005118 <pow+0x29c>)
 8004eda:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8004ede:	9305      	str	r3, [sp, #20]
 8004ee0:	4b8e      	ldr	r3, [pc, #568]	; (800511c <pow+0x2a0>)
 8004ee2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004ee6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004eea:	9b02      	ldr	r3, [sp, #8]
 8004eec:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d031      	beq.n	8004f58 <pow+0xdc>
 8004ef4:	a804      	add	r0, sp, #16
 8004ef6:	f000 fedf 	bl	8005cb8 <matherr>
 8004efa:	bb38      	cbnz	r0, 8004f4c <pow+0xd0>
 8004efc:	e058      	b.n	8004fb0 <pow+0x134>
 8004efe:	f04f 0a00 	mov.w	sl, #0
 8004f02:	f04f 0b00 	mov.w	fp, #0
 8004f06:	4652      	mov	r2, sl
 8004f08:	465b      	mov	r3, fp
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	f7fb fd43 	bl	8000998 <__aeabi_dcmpeq>
 8004f12:	2800      	cmp	r0, #0
 8004f14:	d051      	beq.n	8004fba <pow+0x13e>
 8004f16:	4652      	mov	r2, sl
 8004f18:	465b      	mov	r3, fp
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	4629      	mov	r1, r5
 8004f1e:	f7fb fd3b 	bl	8000998 <__aeabi_dcmpeq>
 8004f22:	4606      	mov	r6, r0
 8004f24:	b308      	cbz	r0, 8004f6a <pow+0xee>
 8004f26:	2301      	movs	r3, #1
 8004f28:	9304      	str	r3, [sp, #16]
 8004f2a:	4b7b      	ldr	r3, [pc, #492]	; (8005118 <pow+0x29c>)
 8004f2c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004f30:	9305      	str	r3, [sp, #20]
 8004f32:	9b03      	ldr	r3, [sp, #12]
 8004f34:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004f38:	930c      	str	r3, [sp, #48]	; 0x30
 8004f3a:	9b02      	ldr	r3, [sp, #8]
 8004f3c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0d7      	beq.n	8004ef4 <pow+0x78>
 8004f44:	2200      	movs	r2, #0
 8004f46:	4b75      	ldr	r3, [pc, #468]	; (800511c <pow+0x2a0>)
 8004f48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f4e:	b11b      	cbz	r3, 8004f58 <pow+0xdc>
 8004f50:	f7ff fb50 	bl	80045f4 <__errno>
 8004f54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f56:	6003      	str	r3, [r0, #0]
 8004f58:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 8004f5c:	e9cd 3400 	strd	r3, r4, [sp]
 8004f60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f64:	b00f      	add	sp, #60	; 0x3c
 8004f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	f000 fe9d 	bl	8005cac <finite>
 8004f72:	2800      	cmp	r0, #0
 8004f74:	d0f4      	beq.n	8004f60 <pow+0xe4>
 8004f76:	4652      	mov	r2, sl
 8004f78:	465b      	mov	r3, fp
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	4629      	mov	r1, r5
 8004f7e:	f7fb fd15 	bl	80009ac <__aeabi_dcmplt>
 8004f82:	2800      	cmp	r0, #0
 8004f84:	d0ec      	beq.n	8004f60 <pow+0xe4>
 8004f86:	2301      	movs	r3, #1
 8004f88:	9304      	str	r3, [sp, #16]
 8004f8a:	4b63      	ldr	r3, [pc, #396]	; (8005118 <pow+0x29c>)
 8004f8c:	960c      	str	r6, [sp, #48]	; 0x30
 8004f8e:	9305      	str	r3, [sp, #20]
 8004f90:	f997 3000 	ldrsb.w	r3, [r7]
 8004f94:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8004f98:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8004f9c:	b913      	cbnz	r3, 8004fa4 <pow+0x128>
 8004f9e:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8004fa2:	e7a7      	b.n	8004ef4 <pow+0x78>
 8004fa4:	2000      	movs	r0, #0
 8004fa6:	495e      	ldr	r1, [pc, #376]	; (8005120 <pow+0x2a4>)
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004fae:	d1a1      	bne.n	8004ef4 <pow+0x78>
 8004fb0:	f7ff fb20 	bl	80045f4 <__errno>
 8004fb4:	2321      	movs	r3, #33	; 0x21
 8004fb6:	6003      	str	r3, [r0, #0]
 8004fb8:	e7c8      	b.n	8004f4c <pow+0xd0>
 8004fba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fbe:	f000 fe75 	bl	8005cac <finite>
 8004fc2:	9002      	str	r0, [sp, #8]
 8004fc4:	2800      	cmp	r0, #0
 8004fc6:	d177      	bne.n	80050b8 <pow+0x23c>
 8004fc8:	4640      	mov	r0, r8
 8004fca:	4649      	mov	r1, r9
 8004fcc:	f000 fe6e 	bl	8005cac <finite>
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	d071      	beq.n	80050b8 <pow+0x23c>
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	4629      	mov	r1, r5
 8004fd8:	f000 fe68 	bl	8005cac <finite>
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	d06b      	beq.n	80050b8 <pow+0x23c>
 8004fe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	f7fb fd08 	bl	80009fc <__aeabi_dcmpun>
 8004fec:	f997 7000 	ldrsb.w	r7, [r7]
 8004ff0:	4b49      	ldr	r3, [pc, #292]	; (8005118 <pow+0x29c>)
 8004ff2:	b1a0      	cbz	r0, 800501e <pow+0x1a2>
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ffa:	9b02      	ldr	r3, [sp, #8]
 8004ffc:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005000:	930c      	str	r3, [sp, #48]	; 0x30
 8005002:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005006:	2f00      	cmp	r7, #0
 8005008:	d0c9      	beq.n	8004f9e <pow+0x122>
 800500a:	4652      	mov	r2, sl
 800500c:	465b      	mov	r3, fp
 800500e:	4650      	mov	r0, sl
 8005010:	4659      	mov	r1, fp
 8005012:	f7fb fb83 	bl	800071c <__aeabi_ddiv>
 8005016:	2f02      	cmp	r7, #2
 8005018:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800501c:	e7c7      	b.n	8004fae <pow+0x132>
 800501e:	2203      	movs	r2, #3
 8005020:	900c      	str	r0, [sp, #48]	; 0x30
 8005022:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005026:	4620      	mov	r0, r4
 8005028:	4629      	mov	r1, r5
 800502a:	2200      	movs	r2, #0
 800502c:	4b3d      	ldr	r3, [pc, #244]	; (8005124 <pow+0x2a8>)
 800502e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8005032:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8005036:	f7fb fa47 	bl	80004c8 <__aeabi_dmul>
 800503a:	4604      	mov	r4, r0
 800503c:	460d      	mov	r5, r1
 800503e:	bb17      	cbnz	r7, 8005086 <pow+0x20a>
 8005040:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005044:	4b38      	ldr	r3, [pc, #224]	; (8005128 <pow+0x2ac>)
 8005046:	4640      	mov	r0, r8
 8005048:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800504c:	4649      	mov	r1, r9
 800504e:	4652      	mov	r2, sl
 8005050:	465b      	mov	r3, fp
 8005052:	f7fb fcab 	bl	80009ac <__aeabi_dcmplt>
 8005056:	2800      	cmp	r0, #0
 8005058:	d054      	beq.n	8005104 <pow+0x288>
 800505a:	4620      	mov	r0, r4
 800505c:	4629      	mov	r1, r5
 800505e:	f000 fe33 	bl	8005cc8 <rint>
 8005062:	4622      	mov	r2, r4
 8005064:	462b      	mov	r3, r5
 8005066:	f7fb fc97 	bl	8000998 <__aeabi_dcmpeq>
 800506a:	b920      	cbnz	r0, 8005076 <pow+0x1fa>
 800506c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005070:	4b2e      	ldr	r3, [pc, #184]	; (800512c <pow+0x2b0>)
 8005072:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005076:	f996 3000 	ldrsb.w	r3, [r6]
 800507a:	2b02      	cmp	r3, #2
 800507c:	d142      	bne.n	8005104 <pow+0x288>
 800507e:	f7ff fab9 	bl	80045f4 <__errno>
 8005082:	2322      	movs	r3, #34	; 0x22
 8005084:	e797      	b.n	8004fb6 <pow+0x13a>
 8005086:	2200      	movs	r2, #0
 8005088:	4b29      	ldr	r3, [pc, #164]	; (8005130 <pow+0x2b4>)
 800508a:	4640      	mov	r0, r8
 800508c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005090:	4649      	mov	r1, r9
 8005092:	4652      	mov	r2, sl
 8005094:	465b      	mov	r3, fp
 8005096:	f7fb fc89 	bl	80009ac <__aeabi_dcmplt>
 800509a:	2800      	cmp	r0, #0
 800509c:	d0eb      	beq.n	8005076 <pow+0x1fa>
 800509e:	4620      	mov	r0, r4
 80050a0:	4629      	mov	r1, r5
 80050a2:	f000 fe11 	bl	8005cc8 <rint>
 80050a6:	4622      	mov	r2, r4
 80050a8:	462b      	mov	r3, r5
 80050aa:	f7fb fc75 	bl	8000998 <__aeabi_dcmpeq>
 80050ae:	2800      	cmp	r0, #0
 80050b0:	d1e1      	bne.n	8005076 <pow+0x1fa>
 80050b2:	2200      	movs	r2, #0
 80050b4:	4b1a      	ldr	r3, [pc, #104]	; (8005120 <pow+0x2a4>)
 80050b6:	e7dc      	b.n	8005072 <pow+0x1f6>
 80050b8:	2200      	movs	r2, #0
 80050ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050be:	2300      	movs	r3, #0
 80050c0:	f7fb fc6a 	bl	8000998 <__aeabi_dcmpeq>
 80050c4:	2800      	cmp	r0, #0
 80050c6:	f43f af4b 	beq.w	8004f60 <pow+0xe4>
 80050ca:	4640      	mov	r0, r8
 80050cc:	4649      	mov	r1, r9
 80050ce:	f000 fded 	bl	8005cac <finite>
 80050d2:	2800      	cmp	r0, #0
 80050d4:	f43f af44 	beq.w	8004f60 <pow+0xe4>
 80050d8:	4620      	mov	r0, r4
 80050da:	4629      	mov	r1, r5
 80050dc:	f000 fde6 	bl	8005cac <finite>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	f43f af3d 	beq.w	8004f60 <pow+0xe4>
 80050e6:	2304      	movs	r3, #4
 80050e8:	9304      	str	r3, [sp, #16]
 80050ea:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <pow+0x29c>)
 80050ec:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80050f0:	9305      	str	r3, [sp, #20]
 80050f2:	2300      	movs	r3, #0
 80050f4:	2400      	movs	r4, #0
 80050f6:	930c      	str	r3, [sp, #48]	; 0x30
 80050f8:	2300      	movs	r3, #0
 80050fa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80050fe:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 8005102:	e7b8      	b.n	8005076 <pow+0x1fa>
 8005104:	a804      	add	r0, sp, #16
 8005106:	f000 fdd7 	bl	8005cb8 <matherr>
 800510a:	2800      	cmp	r0, #0
 800510c:	f47f af1e 	bne.w	8004f4c <pow+0xd0>
 8005110:	e7b5      	b.n	800507e <pow+0x202>
 8005112:	bf00      	nop
 8005114:	20000070 	.word	0x20000070
 8005118:	08005f63 	.word	0x08005f63
 800511c:	3ff00000 	.word	0x3ff00000
 8005120:	fff00000 	.word	0xfff00000
 8005124:	3fe00000 	.word	0x3fe00000
 8005128:	47efffff 	.word	0x47efffff
 800512c:	c7efffff 	.word	0xc7efffff
 8005130:	7ff00000 	.word	0x7ff00000
 8005134:	00000000 	.word	0x00000000

08005138 <__ieee754_pow>:
 8005138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513c:	b091      	sub	sp, #68	; 0x44
 800513e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005142:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 8005146:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800514a:	ea55 0302 	orrs.w	r3, r5, r2
 800514e:	4607      	mov	r7, r0
 8005150:	4688      	mov	r8, r1
 8005152:	f000 84b7 	beq.w	8005ac4 <__ieee754_pow+0x98c>
 8005156:	4b80      	ldr	r3, [pc, #512]	; (8005358 <__ieee754_pow+0x220>)
 8005158:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800515c:	429c      	cmp	r4, r3
 800515e:	4689      	mov	r9, r1
 8005160:	4682      	mov	sl, r0
 8005162:	dc09      	bgt.n	8005178 <__ieee754_pow+0x40>
 8005164:	d103      	bne.n	800516e <__ieee754_pow+0x36>
 8005166:	b938      	cbnz	r0, 8005178 <__ieee754_pow+0x40>
 8005168:	42a5      	cmp	r5, r4
 800516a:	dc0d      	bgt.n	8005188 <__ieee754_pow+0x50>
 800516c:	e001      	b.n	8005172 <__ieee754_pow+0x3a>
 800516e:	429d      	cmp	r5, r3
 8005170:	dc02      	bgt.n	8005178 <__ieee754_pow+0x40>
 8005172:	429d      	cmp	r5, r3
 8005174:	d10e      	bne.n	8005194 <__ieee754_pow+0x5c>
 8005176:	b16a      	cbz	r2, 8005194 <__ieee754_pow+0x5c>
 8005178:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800517c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005180:	ea54 030a 	orrs.w	r3, r4, sl
 8005184:	f000 849e 	beq.w	8005ac4 <__ieee754_pow+0x98c>
 8005188:	4874      	ldr	r0, [pc, #464]	; (800535c <__ieee754_pow+0x224>)
 800518a:	b011      	add	sp, #68	; 0x44
 800518c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005190:	f000 bd94 	b.w	8005cbc <nan>
 8005194:	f1b9 0f00 	cmp.w	r9, #0
 8005198:	da53      	bge.n	8005242 <__ieee754_pow+0x10a>
 800519a:	4b71      	ldr	r3, [pc, #452]	; (8005360 <__ieee754_pow+0x228>)
 800519c:	429d      	cmp	r5, r3
 800519e:	dc4e      	bgt.n	800523e <__ieee754_pow+0x106>
 80051a0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80051a4:	429d      	cmp	r5, r3
 80051a6:	dd4c      	ble.n	8005242 <__ieee754_pow+0x10a>
 80051a8:	152b      	asrs	r3, r5, #20
 80051aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80051ae:	2b14      	cmp	r3, #20
 80051b0:	dd28      	ble.n	8005204 <__ieee754_pow+0xcc>
 80051b2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80051b6:	fa22 f103 	lsr.w	r1, r2, r3
 80051ba:	fa01 f303 	lsl.w	r3, r1, r3
 80051be:	4293      	cmp	r3, r2
 80051c0:	d13f      	bne.n	8005242 <__ieee754_pow+0x10a>
 80051c2:	f001 0101 	and.w	r1, r1, #1
 80051c6:	f1c1 0302 	rsb	r3, r1, #2
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	2a00      	cmp	r2, #0
 80051ce:	d15c      	bne.n	800528a <__ieee754_pow+0x152>
 80051d0:	4b61      	ldr	r3, [pc, #388]	; (8005358 <__ieee754_pow+0x220>)
 80051d2:	429d      	cmp	r5, r3
 80051d4:	d126      	bne.n	8005224 <__ieee754_pow+0xec>
 80051d6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80051da:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80051de:	ea53 030a 	orrs.w	r3, r3, sl
 80051e2:	f000 846f 	beq.w	8005ac4 <__ieee754_pow+0x98c>
 80051e6:	4b5f      	ldr	r3, [pc, #380]	; (8005364 <__ieee754_pow+0x22c>)
 80051e8:	429c      	cmp	r4, r3
 80051ea:	dd2c      	ble.n	8005246 <__ieee754_pow+0x10e>
 80051ec:	2e00      	cmp	r6, #0
 80051ee:	f280 846f 	bge.w	8005ad0 <__ieee754_pow+0x998>
 80051f2:	f04f 0b00 	mov.w	fp, #0
 80051f6:	f04f 0c00 	mov.w	ip, #0
 80051fa:	4658      	mov	r0, fp
 80051fc:	4661      	mov	r1, ip
 80051fe:	b011      	add	sp, #68	; 0x44
 8005200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005204:	2a00      	cmp	r2, #0
 8005206:	d13e      	bne.n	8005286 <__ieee754_pow+0x14e>
 8005208:	f1c3 0314 	rsb	r3, r3, #20
 800520c:	fa45 f103 	asr.w	r1, r5, r3
 8005210:	fa01 f303 	lsl.w	r3, r1, r3
 8005214:	42ab      	cmp	r3, r5
 8005216:	f040 8463 	bne.w	8005ae0 <__ieee754_pow+0x9a8>
 800521a:	f001 0101 	and.w	r1, r1, #1
 800521e:	f1c1 0302 	rsb	r3, r1, #2
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	4b50      	ldr	r3, [pc, #320]	; (8005368 <__ieee754_pow+0x230>)
 8005226:	429d      	cmp	r5, r3
 8005228:	d114      	bne.n	8005254 <__ieee754_pow+0x11c>
 800522a:	2e00      	cmp	r6, #0
 800522c:	f280 8454 	bge.w	8005ad8 <__ieee754_pow+0x9a0>
 8005230:	463a      	mov	r2, r7
 8005232:	4643      	mov	r3, r8
 8005234:	2000      	movs	r0, #0
 8005236:	494c      	ldr	r1, [pc, #304]	; (8005368 <__ieee754_pow+0x230>)
 8005238:	f7fb fa70 	bl	800071c <__aeabi_ddiv>
 800523c:	e013      	b.n	8005266 <__ieee754_pow+0x12e>
 800523e:	2302      	movs	r3, #2
 8005240:	e7c3      	b.n	80051ca <__ieee754_pow+0x92>
 8005242:	2300      	movs	r3, #0
 8005244:	e7c1      	b.n	80051ca <__ieee754_pow+0x92>
 8005246:	2e00      	cmp	r6, #0
 8005248:	dad3      	bge.n	80051f2 <__ieee754_pow+0xba>
 800524a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800524e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8005252:	e7d2      	b.n	80051fa <__ieee754_pow+0xc2>
 8005254:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 8005258:	d108      	bne.n	800526c <__ieee754_pow+0x134>
 800525a:	463a      	mov	r2, r7
 800525c:	4643      	mov	r3, r8
 800525e:	4638      	mov	r0, r7
 8005260:	4641      	mov	r1, r8
 8005262:	f7fb f931 	bl	80004c8 <__aeabi_dmul>
 8005266:	4683      	mov	fp, r0
 8005268:	468c      	mov	ip, r1
 800526a:	e7c6      	b.n	80051fa <__ieee754_pow+0xc2>
 800526c:	4b3f      	ldr	r3, [pc, #252]	; (800536c <__ieee754_pow+0x234>)
 800526e:	429e      	cmp	r6, r3
 8005270:	d10b      	bne.n	800528a <__ieee754_pow+0x152>
 8005272:	f1b9 0f00 	cmp.w	r9, #0
 8005276:	db08      	blt.n	800528a <__ieee754_pow+0x152>
 8005278:	4638      	mov	r0, r7
 800527a:	4641      	mov	r1, r8
 800527c:	b011      	add	sp, #68	; 0x44
 800527e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005282:	f000 bc63 	b.w	8005b4c <__ieee754_sqrt>
 8005286:	2300      	movs	r3, #0
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	4638      	mov	r0, r7
 800528c:	4641      	mov	r1, r8
 800528e:	f000 fd09 	bl	8005ca4 <fabs>
 8005292:	4683      	mov	fp, r0
 8005294:	468c      	mov	ip, r1
 8005296:	f1ba 0f00 	cmp.w	sl, #0
 800529a:	d12b      	bne.n	80052f4 <__ieee754_pow+0x1bc>
 800529c:	b124      	cbz	r4, 80052a8 <__ieee754_pow+0x170>
 800529e:	4b32      	ldr	r3, [pc, #200]	; (8005368 <__ieee754_pow+0x230>)
 80052a0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d125      	bne.n	80052f4 <__ieee754_pow+0x1bc>
 80052a8:	2e00      	cmp	r6, #0
 80052aa:	da07      	bge.n	80052bc <__ieee754_pow+0x184>
 80052ac:	465a      	mov	r2, fp
 80052ae:	4663      	mov	r3, ip
 80052b0:	2000      	movs	r0, #0
 80052b2:	492d      	ldr	r1, [pc, #180]	; (8005368 <__ieee754_pow+0x230>)
 80052b4:	f7fb fa32 	bl	800071c <__aeabi_ddiv>
 80052b8:	4683      	mov	fp, r0
 80052ba:	468c      	mov	ip, r1
 80052bc:	f1b9 0f00 	cmp.w	r9, #0
 80052c0:	da9b      	bge.n	80051fa <__ieee754_pow+0xc2>
 80052c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80052c6:	9b00      	ldr	r3, [sp, #0]
 80052c8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80052cc:	4323      	orrs	r3, r4
 80052ce:	d108      	bne.n	80052e2 <__ieee754_pow+0x1aa>
 80052d0:	465a      	mov	r2, fp
 80052d2:	4663      	mov	r3, ip
 80052d4:	4658      	mov	r0, fp
 80052d6:	4661      	mov	r1, ip
 80052d8:	f7fa ff3e 	bl	8000158 <__aeabi_dsub>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	e7aa      	b.n	8005238 <__ieee754_pow+0x100>
 80052e2:	9b00      	ldr	r3, [sp, #0]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d188      	bne.n	80051fa <__ieee754_pow+0xc2>
 80052e8:	4658      	mov	r0, fp
 80052ea:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 80052ee:	4683      	mov	fp, r0
 80052f0:	469c      	mov	ip, r3
 80052f2:	e782      	b.n	80051fa <__ieee754_pow+0xc2>
 80052f4:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 80052f8:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 80052fc:	930d      	str	r3, [sp, #52]	; 0x34
 80052fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005300:	9b00      	ldr	r3, [sp, #0]
 8005302:	4313      	orrs	r3, r2
 8005304:	d104      	bne.n	8005310 <__ieee754_pow+0x1d8>
 8005306:	463a      	mov	r2, r7
 8005308:	4643      	mov	r3, r8
 800530a:	4638      	mov	r0, r7
 800530c:	4641      	mov	r1, r8
 800530e:	e7e3      	b.n	80052d8 <__ieee754_pow+0x1a0>
 8005310:	4b17      	ldr	r3, [pc, #92]	; (8005370 <__ieee754_pow+0x238>)
 8005312:	429d      	cmp	r5, r3
 8005314:	f340 80fe 	ble.w	8005514 <__ieee754_pow+0x3dc>
 8005318:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800531c:	429d      	cmp	r5, r3
 800531e:	dd0b      	ble.n	8005338 <__ieee754_pow+0x200>
 8005320:	4b10      	ldr	r3, [pc, #64]	; (8005364 <__ieee754_pow+0x22c>)
 8005322:	429c      	cmp	r4, r3
 8005324:	dc0e      	bgt.n	8005344 <__ieee754_pow+0x20c>
 8005326:	2e00      	cmp	r6, #0
 8005328:	f6bf af63 	bge.w	80051f2 <__ieee754_pow+0xba>
 800532c:	a308      	add	r3, pc, #32	; (adr r3, 8005350 <__ieee754_pow+0x218>)
 800532e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005332:	4610      	mov	r0, r2
 8005334:	4619      	mov	r1, r3
 8005336:	e794      	b.n	8005262 <__ieee754_pow+0x12a>
 8005338:	4b0e      	ldr	r3, [pc, #56]	; (8005374 <__ieee754_pow+0x23c>)
 800533a:	429c      	cmp	r4, r3
 800533c:	ddf3      	ble.n	8005326 <__ieee754_pow+0x1ee>
 800533e:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <__ieee754_pow+0x230>)
 8005340:	429c      	cmp	r4, r3
 8005342:	dd19      	ble.n	8005378 <__ieee754_pow+0x240>
 8005344:	2e00      	cmp	r6, #0
 8005346:	dcf1      	bgt.n	800532c <__ieee754_pow+0x1f4>
 8005348:	e753      	b.n	80051f2 <__ieee754_pow+0xba>
 800534a:	bf00      	nop
 800534c:	f3af 8000 	nop.w
 8005350:	8800759c 	.word	0x8800759c
 8005354:	7e37e43c 	.word	0x7e37e43c
 8005358:	7ff00000 	.word	0x7ff00000
 800535c:	08005f35 	.word	0x08005f35
 8005360:	433fffff 	.word	0x433fffff
 8005364:	3fefffff 	.word	0x3fefffff
 8005368:	3ff00000 	.word	0x3ff00000
 800536c:	3fe00000 	.word	0x3fe00000
 8005370:	41e00000 	.word	0x41e00000
 8005374:	3feffffe 	.word	0x3feffffe
 8005378:	4661      	mov	r1, ip
 800537a:	2200      	movs	r2, #0
 800537c:	4b60      	ldr	r3, [pc, #384]	; (8005500 <__ieee754_pow+0x3c8>)
 800537e:	4658      	mov	r0, fp
 8005380:	f7fa feea 	bl	8000158 <__aeabi_dsub>
 8005384:	a354      	add	r3, pc, #336	; (adr r3, 80054d8 <__ieee754_pow+0x3a0>)
 8005386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538a:	4604      	mov	r4, r0
 800538c:	460d      	mov	r5, r1
 800538e:	f7fb f89b 	bl	80004c8 <__aeabi_dmul>
 8005392:	a353      	add	r3, pc, #332	; (adr r3, 80054e0 <__ieee754_pow+0x3a8>)
 8005394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005398:	4606      	mov	r6, r0
 800539a:	460f      	mov	r7, r1
 800539c:	4620      	mov	r0, r4
 800539e:	4629      	mov	r1, r5
 80053a0:	f7fb f892 	bl	80004c8 <__aeabi_dmul>
 80053a4:	2200      	movs	r2, #0
 80053a6:	4682      	mov	sl, r0
 80053a8:	468b      	mov	fp, r1
 80053aa:	4b56      	ldr	r3, [pc, #344]	; (8005504 <__ieee754_pow+0x3cc>)
 80053ac:	4620      	mov	r0, r4
 80053ae:	4629      	mov	r1, r5
 80053b0:	f7fb f88a 	bl	80004c8 <__aeabi_dmul>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	a14b      	add	r1, pc, #300	; (adr r1, 80054e8 <__ieee754_pow+0x3b0>)
 80053ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80053be:	f7fa fecb 	bl	8000158 <__aeabi_dsub>
 80053c2:	4622      	mov	r2, r4
 80053c4:	462b      	mov	r3, r5
 80053c6:	f7fb f87f 	bl	80004c8 <__aeabi_dmul>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	2000      	movs	r0, #0
 80053d0:	494d      	ldr	r1, [pc, #308]	; (8005508 <__ieee754_pow+0x3d0>)
 80053d2:	f7fa fec1 	bl	8000158 <__aeabi_dsub>
 80053d6:	4622      	mov	r2, r4
 80053d8:	462b      	mov	r3, r5
 80053da:	4680      	mov	r8, r0
 80053dc:	4689      	mov	r9, r1
 80053de:	4620      	mov	r0, r4
 80053e0:	4629      	mov	r1, r5
 80053e2:	f7fb f871 	bl	80004c8 <__aeabi_dmul>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4640      	mov	r0, r8
 80053ec:	4649      	mov	r1, r9
 80053ee:	f7fb f86b 	bl	80004c8 <__aeabi_dmul>
 80053f2:	a33f      	add	r3, pc, #252	; (adr r3, 80054f0 <__ieee754_pow+0x3b8>)
 80053f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f8:	f7fb f866 	bl	80004c8 <__aeabi_dmul>
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	4650      	mov	r0, sl
 8005402:	4659      	mov	r1, fp
 8005404:	f7fa fea8 	bl	8000158 <__aeabi_dsub>
 8005408:	4602      	mov	r2, r0
 800540a:	460b      	mov	r3, r1
 800540c:	4604      	mov	r4, r0
 800540e:	460d      	mov	r5, r1
 8005410:	4630      	mov	r0, r6
 8005412:	4639      	mov	r1, r7
 8005414:	f7fa fea2 	bl	800015c <__adddf3>
 8005418:	2000      	movs	r0, #0
 800541a:	468b      	mov	fp, r1
 800541c:	4682      	mov	sl, r0
 800541e:	4632      	mov	r2, r6
 8005420:	463b      	mov	r3, r7
 8005422:	f7fa fe99 	bl	8000158 <__aeabi_dsub>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	4620      	mov	r0, r4
 800542c:	4629      	mov	r1, r5
 800542e:	f7fa fe93 	bl	8000158 <__aeabi_dsub>
 8005432:	9b00      	ldr	r3, [sp, #0]
 8005434:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005436:	3b01      	subs	r3, #1
 8005438:	4313      	orrs	r3, r2
 800543a:	f04f 0300 	mov.w	r3, #0
 800543e:	bf0c      	ite	eq
 8005440:	4c32      	ldreq	r4, [pc, #200]	; (800550c <__ieee754_pow+0x3d4>)
 8005442:	4c2f      	ldrne	r4, [pc, #188]	; (8005500 <__ieee754_pow+0x3c8>)
 8005444:	4606      	mov	r6, r0
 8005446:	e9cd 3400 	strd	r3, r4, [sp]
 800544a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800544e:	2400      	movs	r4, #0
 8005450:	460f      	mov	r7, r1
 8005452:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005456:	4622      	mov	r2, r4
 8005458:	462b      	mov	r3, r5
 800545a:	f7fa fe7d 	bl	8000158 <__aeabi_dsub>
 800545e:	4652      	mov	r2, sl
 8005460:	465b      	mov	r3, fp
 8005462:	f7fb f831 	bl	80004c8 <__aeabi_dmul>
 8005466:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800546a:	4680      	mov	r8, r0
 800546c:	4689      	mov	r9, r1
 800546e:	4630      	mov	r0, r6
 8005470:	4639      	mov	r1, r7
 8005472:	f7fb f829 	bl	80004c8 <__aeabi_dmul>
 8005476:	4602      	mov	r2, r0
 8005478:	460b      	mov	r3, r1
 800547a:	4640      	mov	r0, r8
 800547c:	4649      	mov	r1, r9
 800547e:	f7fa fe6d 	bl	800015c <__adddf3>
 8005482:	4622      	mov	r2, r4
 8005484:	462b      	mov	r3, r5
 8005486:	4680      	mov	r8, r0
 8005488:	4689      	mov	r9, r1
 800548a:	4650      	mov	r0, sl
 800548c:	4659      	mov	r1, fp
 800548e:	f7fb f81b 	bl	80004c8 <__aeabi_dmul>
 8005492:	4604      	mov	r4, r0
 8005494:	460d      	mov	r5, r1
 8005496:	460b      	mov	r3, r1
 8005498:	4602      	mov	r2, r0
 800549a:	4649      	mov	r1, r9
 800549c:	4640      	mov	r0, r8
 800549e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80054a2:	f7fa fe5b 	bl	800015c <__adddf3>
 80054a6:	4b1a      	ldr	r3, [pc, #104]	; (8005510 <__ieee754_pow+0x3d8>)
 80054a8:	4682      	mov	sl, r0
 80054aa:	4299      	cmp	r1, r3
 80054ac:	460f      	mov	r7, r1
 80054ae:	460e      	mov	r6, r1
 80054b0:	f340 82e1 	ble.w	8005a76 <__ieee754_pow+0x93e>
 80054b4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80054b8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80054bc:	4303      	orrs	r3, r0
 80054be:	f000 81db 	beq.w	8005878 <__ieee754_pow+0x740>
 80054c2:	a30d      	add	r3, pc, #52	; (adr r3, 80054f8 <__ieee754_pow+0x3c0>)
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054cc:	f7fa fffc 	bl	80004c8 <__aeabi_dmul>
 80054d0:	a309      	add	r3, pc, #36	; (adr r3, 80054f8 <__ieee754_pow+0x3c0>)
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	e6c4      	b.n	8005262 <__ieee754_pow+0x12a>
 80054d8:	60000000 	.word	0x60000000
 80054dc:	3ff71547 	.word	0x3ff71547
 80054e0:	f85ddf44 	.word	0xf85ddf44
 80054e4:	3e54ae0b 	.word	0x3e54ae0b
 80054e8:	55555555 	.word	0x55555555
 80054ec:	3fd55555 	.word	0x3fd55555
 80054f0:	652b82fe 	.word	0x652b82fe
 80054f4:	3ff71547 	.word	0x3ff71547
 80054f8:	8800759c 	.word	0x8800759c
 80054fc:	7e37e43c 	.word	0x7e37e43c
 8005500:	3ff00000 	.word	0x3ff00000
 8005504:	3fd00000 	.word	0x3fd00000
 8005508:	3fe00000 	.word	0x3fe00000
 800550c:	bff00000 	.word	0xbff00000
 8005510:	408fffff 	.word	0x408fffff
 8005514:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005518:	f04f 0200 	mov.w	r2, #0
 800551c:	da08      	bge.n	8005530 <__ieee754_pow+0x3f8>
 800551e:	4658      	mov	r0, fp
 8005520:	4bcd      	ldr	r3, [pc, #820]	; (8005858 <__ieee754_pow+0x720>)
 8005522:	4661      	mov	r1, ip
 8005524:	f7fa ffd0 	bl	80004c8 <__aeabi_dmul>
 8005528:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800552c:	4683      	mov	fp, r0
 800552e:	460c      	mov	r4, r1
 8005530:	1523      	asrs	r3, r4, #20
 8005532:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005536:	4413      	add	r3, r2
 8005538:	930c      	str	r3, [sp, #48]	; 0x30
 800553a:	4bc8      	ldr	r3, [pc, #800]	; (800585c <__ieee754_pow+0x724>)
 800553c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005540:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005544:	429c      	cmp	r4, r3
 8005546:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800554a:	dd08      	ble.n	800555e <__ieee754_pow+0x426>
 800554c:	4bc4      	ldr	r3, [pc, #784]	; (8005860 <__ieee754_pow+0x728>)
 800554e:	429c      	cmp	r4, r3
 8005550:	f340 815b 	ble.w	800580a <__ieee754_pow+0x6d2>
 8005554:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005556:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800555a:	3301      	adds	r3, #1
 800555c:	930c      	str	r3, [sp, #48]	; 0x30
 800555e:	f04f 0800 	mov.w	r8, #0
 8005562:	4658      	mov	r0, fp
 8005564:	4629      	mov	r1, r5
 8005566:	4bbf      	ldr	r3, [pc, #764]	; (8005864 <__ieee754_pow+0x72c>)
 8005568:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800556c:	444b      	add	r3, r9
 800556e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005572:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8005576:	461a      	mov	r2, r3
 8005578:	4623      	mov	r3, r4
 800557a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800557e:	f7fa fdeb 	bl	8000158 <__aeabi_dsub>
 8005582:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005586:	4606      	mov	r6, r0
 8005588:	460f      	mov	r7, r1
 800558a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800558e:	f7fa fde5 	bl	800015c <__adddf3>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	2000      	movs	r0, #0
 8005598:	49b3      	ldr	r1, [pc, #716]	; (8005868 <__ieee754_pow+0x730>)
 800559a:	f7fb f8bf 	bl	800071c <__aeabi_ddiv>
 800559e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4630      	mov	r0, r6
 80055a8:	4639      	mov	r1, r7
 80055aa:	f7fa ff8d 	bl	80004c8 <__aeabi_dmul>
 80055ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80055b2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80055b6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80055ba:	2300      	movs	r3, #0
 80055bc:	2200      	movs	r2, #0
 80055be:	106d      	asrs	r5, r5, #1
 80055c0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80055c4:	9304      	str	r3, [sp, #16]
 80055c6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80055ca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80055ce:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 80055d2:	4650      	mov	r0, sl
 80055d4:	4659      	mov	r1, fp
 80055d6:	4614      	mov	r4, r2
 80055d8:	461d      	mov	r5, r3
 80055da:	f7fa ff75 	bl	80004c8 <__aeabi_dmul>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4630      	mov	r0, r6
 80055e4:	4639      	mov	r1, r7
 80055e6:	f7fa fdb7 	bl	8000158 <__aeabi_dsub>
 80055ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80055ee:	4606      	mov	r6, r0
 80055f0:	460f      	mov	r7, r1
 80055f2:	4620      	mov	r0, r4
 80055f4:	4629      	mov	r1, r5
 80055f6:	f7fa fdaf 	bl	8000158 <__aeabi_dsub>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005602:	f7fa fda9 	bl	8000158 <__aeabi_dsub>
 8005606:	4652      	mov	r2, sl
 8005608:	465b      	mov	r3, fp
 800560a:	f7fa ff5d 	bl	80004c8 <__aeabi_dmul>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	4630      	mov	r0, r6
 8005614:	4639      	mov	r1, r7
 8005616:	f7fa fd9f 	bl	8000158 <__aeabi_dsub>
 800561a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800561e:	f7fa ff53 	bl	80004c8 <__aeabi_dmul>
 8005622:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005626:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800562a:	4610      	mov	r0, r2
 800562c:	4619      	mov	r1, r3
 800562e:	f7fa ff4b 	bl	80004c8 <__aeabi_dmul>
 8005632:	a377      	add	r3, pc, #476	; (adr r3, 8005810 <__ieee754_pow+0x6d8>)
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	4604      	mov	r4, r0
 800563a:	460d      	mov	r5, r1
 800563c:	f7fa ff44 	bl	80004c8 <__aeabi_dmul>
 8005640:	a375      	add	r3, pc, #468	; (adr r3, 8005818 <__ieee754_pow+0x6e0>)
 8005642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005646:	f7fa fd89 	bl	800015c <__adddf3>
 800564a:	4622      	mov	r2, r4
 800564c:	462b      	mov	r3, r5
 800564e:	f7fa ff3b 	bl	80004c8 <__aeabi_dmul>
 8005652:	a373      	add	r3, pc, #460	; (adr r3, 8005820 <__ieee754_pow+0x6e8>)
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	f7fa fd80 	bl	800015c <__adddf3>
 800565c:	4622      	mov	r2, r4
 800565e:	462b      	mov	r3, r5
 8005660:	f7fa ff32 	bl	80004c8 <__aeabi_dmul>
 8005664:	a370      	add	r3, pc, #448	; (adr r3, 8005828 <__ieee754_pow+0x6f0>)
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	f7fa fd77 	bl	800015c <__adddf3>
 800566e:	4622      	mov	r2, r4
 8005670:	462b      	mov	r3, r5
 8005672:	f7fa ff29 	bl	80004c8 <__aeabi_dmul>
 8005676:	a36e      	add	r3, pc, #440	; (adr r3, 8005830 <__ieee754_pow+0x6f8>)
 8005678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567c:	f7fa fd6e 	bl	800015c <__adddf3>
 8005680:	4622      	mov	r2, r4
 8005682:	462b      	mov	r3, r5
 8005684:	f7fa ff20 	bl	80004c8 <__aeabi_dmul>
 8005688:	a36b      	add	r3, pc, #428	; (adr r3, 8005838 <__ieee754_pow+0x700>)
 800568a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568e:	f7fa fd65 	bl	800015c <__adddf3>
 8005692:	4622      	mov	r2, r4
 8005694:	4606      	mov	r6, r0
 8005696:	460f      	mov	r7, r1
 8005698:	462b      	mov	r3, r5
 800569a:	4620      	mov	r0, r4
 800569c:	4629      	mov	r1, r5
 800569e:	f7fa ff13 	bl	80004c8 <__aeabi_dmul>
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	4630      	mov	r0, r6
 80056a8:	4639      	mov	r1, r7
 80056aa:	f7fa ff0d 	bl	80004c8 <__aeabi_dmul>
 80056ae:	4604      	mov	r4, r0
 80056b0:	460d      	mov	r5, r1
 80056b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056b6:	4652      	mov	r2, sl
 80056b8:	465b      	mov	r3, fp
 80056ba:	f7fa fd4f 	bl	800015c <__adddf3>
 80056be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80056c2:	f7fa ff01 	bl	80004c8 <__aeabi_dmul>
 80056c6:	4622      	mov	r2, r4
 80056c8:	462b      	mov	r3, r5
 80056ca:	f7fa fd47 	bl	800015c <__adddf3>
 80056ce:	4652      	mov	r2, sl
 80056d0:	4606      	mov	r6, r0
 80056d2:	460f      	mov	r7, r1
 80056d4:	465b      	mov	r3, fp
 80056d6:	4650      	mov	r0, sl
 80056d8:	4659      	mov	r1, fp
 80056da:	f7fa fef5 	bl	80004c8 <__aeabi_dmul>
 80056de:	2200      	movs	r2, #0
 80056e0:	4b62      	ldr	r3, [pc, #392]	; (800586c <__ieee754_pow+0x734>)
 80056e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80056e6:	f7fa fd39 	bl	800015c <__adddf3>
 80056ea:	4632      	mov	r2, r6
 80056ec:	463b      	mov	r3, r7
 80056ee:	f7fa fd35 	bl	800015c <__adddf3>
 80056f2:	9804      	ldr	r0, [sp, #16]
 80056f4:	460d      	mov	r5, r1
 80056f6:	4604      	mov	r4, r0
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	4650      	mov	r0, sl
 80056fe:	4659      	mov	r1, fp
 8005700:	f7fa fee2 	bl	80004c8 <__aeabi_dmul>
 8005704:	2200      	movs	r2, #0
 8005706:	4682      	mov	sl, r0
 8005708:	468b      	mov	fp, r1
 800570a:	4b58      	ldr	r3, [pc, #352]	; (800586c <__ieee754_pow+0x734>)
 800570c:	4620      	mov	r0, r4
 800570e:	4629      	mov	r1, r5
 8005710:	f7fa fd22 	bl	8000158 <__aeabi_dsub>
 8005714:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005718:	f7fa fd1e 	bl	8000158 <__aeabi_dsub>
 800571c:	4602      	mov	r2, r0
 800571e:	460b      	mov	r3, r1
 8005720:	4630      	mov	r0, r6
 8005722:	4639      	mov	r1, r7
 8005724:	f7fa fd18 	bl	8000158 <__aeabi_dsub>
 8005728:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800572c:	f7fa fecc 	bl	80004c8 <__aeabi_dmul>
 8005730:	4622      	mov	r2, r4
 8005732:	4606      	mov	r6, r0
 8005734:	460f      	mov	r7, r1
 8005736:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800573a:	462b      	mov	r3, r5
 800573c:	f7fa fec4 	bl	80004c8 <__aeabi_dmul>
 8005740:	4602      	mov	r2, r0
 8005742:	460b      	mov	r3, r1
 8005744:	4630      	mov	r0, r6
 8005746:	4639      	mov	r1, r7
 8005748:	f7fa fd08 	bl	800015c <__adddf3>
 800574c:	4606      	mov	r6, r0
 800574e:	460f      	mov	r7, r1
 8005750:	4602      	mov	r2, r0
 8005752:	460b      	mov	r3, r1
 8005754:	4650      	mov	r0, sl
 8005756:	4659      	mov	r1, fp
 8005758:	f7fa fd00 	bl	800015c <__adddf3>
 800575c:	a338      	add	r3, pc, #224	; (adr r3, 8005840 <__ieee754_pow+0x708>)
 800575e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005762:	9804      	ldr	r0, [sp, #16]
 8005764:	460d      	mov	r5, r1
 8005766:	4604      	mov	r4, r0
 8005768:	f7fa feae 	bl	80004c8 <__aeabi_dmul>
 800576c:	4652      	mov	r2, sl
 800576e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005772:	465b      	mov	r3, fp
 8005774:	4620      	mov	r0, r4
 8005776:	4629      	mov	r1, r5
 8005778:	f7fa fcee 	bl	8000158 <__aeabi_dsub>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	4630      	mov	r0, r6
 8005782:	4639      	mov	r1, r7
 8005784:	f7fa fce8 	bl	8000158 <__aeabi_dsub>
 8005788:	a32f      	add	r3, pc, #188	; (adr r3, 8005848 <__ieee754_pow+0x710>)
 800578a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578e:	f7fa fe9b 	bl	80004c8 <__aeabi_dmul>
 8005792:	a32f      	add	r3, pc, #188	; (adr r3, 8005850 <__ieee754_pow+0x718>)
 8005794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005798:	4606      	mov	r6, r0
 800579a:	460f      	mov	r7, r1
 800579c:	4620      	mov	r0, r4
 800579e:	4629      	mov	r1, r5
 80057a0:	f7fa fe92 	bl	80004c8 <__aeabi_dmul>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4630      	mov	r0, r6
 80057aa:	4639      	mov	r1, r7
 80057ac:	f7fa fcd6 	bl	800015c <__adddf3>
 80057b0:	4b2f      	ldr	r3, [pc, #188]	; (8005870 <__ieee754_pow+0x738>)
 80057b2:	444b      	add	r3, r9
 80057b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b8:	f7fa fcd0 	bl	800015c <__adddf3>
 80057bc:	4604      	mov	r4, r0
 80057be:	980c      	ldr	r0, [sp, #48]	; 0x30
 80057c0:	460d      	mov	r5, r1
 80057c2:	f7fa fe17 	bl	80003f4 <__aeabi_i2d>
 80057c6:	4606      	mov	r6, r0
 80057c8:	460f      	mov	r7, r1
 80057ca:	4b2a      	ldr	r3, [pc, #168]	; (8005874 <__ieee754_pow+0x73c>)
 80057cc:	4622      	mov	r2, r4
 80057ce:	444b      	add	r3, r9
 80057d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80057d4:	462b      	mov	r3, r5
 80057d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057da:	f7fa fcbf 	bl	800015c <__adddf3>
 80057de:	4642      	mov	r2, r8
 80057e0:	464b      	mov	r3, r9
 80057e2:	f7fa fcbb 	bl	800015c <__adddf3>
 80057e6:	4632      	mov	r2, r6
 80057e8:	463b      	mov	r3, r7
 80057ea:	f7fa fcb7 	bl	800015c <__adddf3>
 80057ee:	9804      	ldr	r0, [sp, #16]
 80057f0:	4632      	mov	r2, r6
 80057f2:	463b      	mov	r3, r7
 80057f4:	4682      	mov	sl, r0
 80057f6:	468b      	mov	fp, r1
 80057f8:	f7fa fcae 	bl	8000158 <__aeabi_dsub>
 80057fc:	4642      	mov	r2, r8
 80057fe:	464b      	mov	r3, r9
 8005800:	f7fa fcaa 	bl	8000158 <__aeabi_dsub>
 8005804:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005808:	e60b      	b.n	8005422 <__ieee754_pow+0x2ea>
 800580a:	f04f 0801 	mov.w	r8, #1
 800580e:	e6a8      	b.n	8005562 <__ieee754_pow+0x42a>
 8005810:	4a454eef 	.word	0x4a454eef
 8005814:	3fca7e28 	.word	0x3fca7e28
 8005818:	93c9db65 	.word	0x93c9db65
 800581c:	3fcd864a 	.word	0x3fcd864a
 8005820:	a91d4101 	.word	0xa91d4101
 8005824:	3fd17460 	.word	0x3fd17460
 8005828:	518f264d 	.word	0x518f264d
 800582c:	3fd55555 	.word	0x3fd55555
 8005830:	db6fabff 	.word	0xdb6fabff
 8005834:	3fdb6db6 	.word	0x3fdb6db6
 8005838:	33333303 	.word	0x33333303
 800583c:	3fe33333 	.word	0x3fe33333
 8005840:	e0000000 	.word	0xe0000000
 8005844:	3feec709 	.word	0x3feec709
 8005848:	dc3a03fd 	.word	0xdc3a03fd
 800584c:	3feec709 	.word	0x3feec709
 8005850:	145b01f5 	.word	0x145b01f5
 8005854:	be3e2fe0 	.word	0xbe3e2fe0
 8005858:	43400000 	.word	0x43400000
 800585c:	0003988e 	.word	0x0003988e
 8005860:	000bb679 	.word	0x000bb679
 8005864:	08005f68 	.word	0x08005f68
 8005868:	3ff00000 	.word	0x3ff00000
 800586c:	40080000 	.word	0x40080000
 8005870:	08005f88 	.word	0x08005f88
 8005874:	08005f78 	.word	0x08005f78
 8005878:	a39b      	add	r3, pc, #620	; (adr r3, 8005ae8 <__ieee754_pow+0x9b0>)
 800587a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587e:	4640      	mov	r0, r8
 8005880:	4649      	mov	r1, r9
 8005882:	f7fa fc6b 	bl	800015c <__adddf3>
 8005886:	4622      	mov	r2, r4
 8005888:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800588c:	462b      	mov	r3, r5
 800588e:	4650      	mov	r0, sl
 8005890:	4639      	mov	r1, r7
 8005892:	f7fa fc61 	bl	8000158 <__aeabi_dsub>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800589e:	f7fb f8a3 	bl	80009e8 <__aeabi_dcmpgt>
 80058a2:	2800      	cmp	r0, #0
 80058a4:	f47f ae0d 	bne.w	80054c2 <__ieee754_pow+0x38a>
 80058a8:	4aa3      	ldr	r2, [pc, #652]	; (8005b38 <__ieee754_pow+0xa00>)
 80058aa:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 80058ae:	4293      	cmp	r3, r2
 80058b0:	f340 8103 	ble.w	8005aba <__ieee754_pow+0x982>
 80058b4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80058b8:	2000      	movs	r0, #0
 80058ba:	151b      	asrs	r3, r3, #20
 80058bc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80058c0:	fa4a f303 	asr.w	r3, sl, r3
 80058c4:	4433      	add	r3, r6
 80058c6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80058ca:	4f9c      	ldr	r7, [pc, #624]	; (8005b3c <__ieee754_pow+0xa04>)
 80058cc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80058d0:	4117      	asrs	r7, r2
 80058d2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80058d6:	ea23 0107 	bic.w	r1, r3, r7
 80058da:	f1c2 0214 	rsb	r2, r2, #20
 80058de:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80058e2:	fa4a fa02 	asr.w	sl, sl, r2
 80058e6:	2e00      	cmp	r6, #0
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4620      	mov	r0, r4
 80058ee:	4629      	mov	r1, r5
 80058f0:	bfb8      	it	lt
 80058f2:	f1ca 0a00 	rsblt	sl, sl, #0
 80058f6:	f7fa fc2f 	bl	8000158 <__aeabi_dsub>
 80058fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005902:	4642      	mov	r2, r8
 8005904:	464b      	mov	r3, r9
 8005906:	f7fa fc29 	bl	800015c <__adddf3>
 800590a:	a379      	add	r3, pc, #484	; (adr r3, 8005af0 <__ieee754_pow+0x9b8>)
 800590c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005910:	2000      	movs	r0, #0
 8005912:	460d      	mov	r5, r1
 8005914:	4604      	mov	r4, r0
 8005916:	f7fa fdd7 	bl	80004c8 <__aeabi_dmul>
 800591a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800591e:	4606      	mov	r6, r0
 8005920:	460f      	mov	r7, r1
 8005922:	4620      	mov	r0, r4
 8005924:	4629      	mov	r1, r5
 8005926:	f7fa fc17 	bl	8000158 <__aeabi_dsub>
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	4640      	mov	r0, r8
 8005930:	4649      	mov	r1, r9
 8005932:	f7fa fc11 	bl	8000158 <__aeabi_dsub>
 8005936:	a370      	add	r3, pc, #448	; (adr r3, 8005af8 <__ieee754_pow+0x9c0>)
 8005938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593c:	f7fa fdc4 	bl	80004c8 <__aeabi_dmul>
 8005940:	a36f      	add	r3, pc, #444	; (adr r3, 8005b00 <__ieee754_pow+0x9c8>)
 8005942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005946:	4680      	mov	r8, r0
 8005948:	4689      	mov	r9, r1
 800594a:	4620      	mov	r0, r4
 800594c:	4629      	mov	r1, r5
 800594e:	f7fa fdbb 	bl	80004c8 <__aeabi_dmul>
 8005952:	4602      	mov	r2, r0
 8005954:	460b      	mov	r3, r1
 8005956:	4640      	mov	r0, r8
 8005958:	4649      	mov	r1, r9
 800595a:	f7fa fbff 	bl	800015c <__adddf3>
 800595e:	4604      	mov	r4, r0
 8005960:	460d      	mov	r5, r1
 8005962:	4602      	mov	r2, r0
 8005964:	460b      	mov	r3, r1
 8005966:	4630      	mov	r0, r6
 8005968:	4639      	mov	r1, r7
 800596a:	f7fa fbf7 	bl	800015c <__adddf3>
 800596e:	4632      	mov	r2, r6
 8005970:	463b      	mov	r3, r7
 8005972:	4680      	mov	r8, r0
 8005974:	4689      	mov	r9, r1
 8005976:	f7fa fbef 	bl	8000158 <__aeabi_dsub>
 800597a:	4602      	mov	r2, r0
 800597c:	460b      	mov	r3, r1
 800597e:	4620      	mov	r0, r4
 8005980:	4629      	mov	r1, r5
 8005982:	f7fa fbe9 	bl	8000158 <__aeabi_dsub>
 8005986:	4642      	mov	r2, r8
 8005988:	4606      	mov	r6, r0
 800598a:	460f      	mov	r7, r1
 800598c:	464b      	mov	r3, r9
 800598e:	4640      	mov	r0, r8
 8005990:	4649      	mov	r1, r9
 8005992:	f7fa fd99 	bl	80004c8 <__aeabi_dmul>
 8005996:	a35c      	add	r3, pc, #368	; (adr r3, 8005b08 <__ieee754_pow+0x9d0>)
 8005998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800599c:	4604      	mov	r4, r0
 800599e:	460d      	mov	r5, r1
 80059a0:	f7fa fd92 	bl	80004c8 <__aeabi_dmul>
 80059a4:	a35a      	add	r3, pc, #360	; (adr r3, 8005b10 <__ieee754_pow+0x9d8>)
 80059a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059aa:	f7fa fbd5 	bl	8000158 <__aeabi_dsub>
 80059ae:	4622      	mov	r2, r4
 80059b0:	462b      	mov	r3, r5
 80059b2:	f7fa fd89 	bl	80004c8 <__aeabi_dmul>
 80059b6:	a358      	add	r3, pc, #352	; (adr r3, 8005b18 <__ieee754_pow+0x9e0>)
 80059b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059bc:	f7fa fbce 	bl	800015c <__adddf3>
 80059c0:	4622      	mov	r2, r4
 80059c2:	462b      	mov	r3, r5
 80059c4:	f7fa fd80 	bl	80004c8 <__aeabi_dmul>
 80059c8:	a355      	add	r3, pc, #340	; (adr r3, 8005b20 <__ieee754_pow+0x9e8>)
 80059ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ce:	f7fa fbc3 	bl	8000158 <__aeabi_dsub>
 80059d2:	4622      	mov	r2, r4
 80059d4:	462b      	mov	r3, r5
 80059d6:	f7fa fd77 	bl	80004c8 <__aeabi_dmul>
 80059da:	a353      	add	r3, pc, #332	; (adr r3, 8005b28 <__ieee754_pow+0x9f0>)
 80059dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e0:	f7fa fbbc 	bl	800015c <__adddf3>
 80059e4:	4622      	mov	r2, r4
 80059e6:	462b      	mov	r3, r5
 80059e8:	f7fa fd6e 	bl	80004c8 <__aeabi_dmul>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	4640      	mov	r0, r8
 80059f2:	4649      	mov	r1, r9
 80059f4:	f7fa fbb0 	bl	8000158 <__aeabi_dsub>
 80059f8:	4604      	mov	r4, r0
 80059fa:	460d      	mov	r5, r1
 80059fc:	4602      	mov	r2, r0
 80059fe:	460b      	mov	r3, r1
 8005a00:	4640      	mov	r0, r8
 8005a02:	4649      	mov	r1, r9
 8005a04:	f7fa fd60 	bl	80004c8 <__aeabi_dmul>
 8005a08:	2200      	movs	r2, #0
 8005a0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005a12:	4620      	mov	r0, r4
 8005a14:	4629      	mov	r1, r5
 8005a16:	f7fa fb9f 	bl	8000158 <__aeabi_dsub>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a22:	f7fa fe7b 	bl	800071c <__aeabi_ddiv>
 8005a26:	4632      	mov	r2, r6
 8005a28:	4604      	mov	r4, r0
 8005a2a:	460d      	mov	r5, r1
 8005a2c:	463b      	mov	r3, r7
 8005a2e:	4640      	mov	r0, r8
 8005a30:	4649      	mov	r1, r9
 8005a32:	f7fa fd49 	bl	80004c8 <__aeabi_dmul>
 8005a36:	4632      	mov	r2, r6
 8005a38:	463b      	mov	r3, r7
 8005a3a:	f7fa fb8f 	bl	800015c <__adddf3>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	4620      	mov	r0, r4
 8005a44:	4629      	mov	r1, r5
 8005a46:	f7fa fb87 	bl	8000158 <__aeabi_dsub>
 8005a4a:	4642      	mov	r2, r8
 8005a4c:	464b      	mov	r3, r9
 8005a4e:	f7fa fb83 	bl	8000158 <__aeabi_dsub>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	2000      	movs	r0, #0
 8005a58:	4939      	ldr	r1, [pc, #228]	; (8005b40 <__ieee754_pow+0xa08>)
 8005a5a:	f7fa fb7d 	bl	8000158 <__aeabi_dsub>
 8005a5e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005a62:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005a66:	da2b      	bge.n	8005ac0 <__ieee754_pow+0x988>
 8005a68:	4652      	mov	r2, sl
 8005a6a:	f000 f9b9 	bl	8005de0 <scalbn>
 8005a6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a72:	f7ff bbf6 	b.w	8005262 <__ieee754_pow+0x12a>
 8005a76:	4b33      	ldr	r3, [pc, #204]	; (8005b44 <__ieee754_pow+0xa0c>)
 8005a78:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005a7c:	429f      	cmp	r7, r3
 8005a7e:	f77f af13 	ble.w	80058a8 <__ieee754_pow+0x770>
 8005a82:	4b31      	ldr	r3, [pc, #196]	; (8005b48 <__ieee754_pow+0xa10>)
 8005a84:	440b      	add	r3, r1
 8005a86:	4303      	orrs	r3, r0
 8005a88:	d00b      	beq.n	8005aa2 <__ieee754_pow+0x96a>
 8005a8a:	a329      	add	r3, pc, #164	; (adr r3, 8005b30 <__ieee754_pow+0x9f8>)
 8005a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a94:	f7fa fd18 	bl	80004c8 <__aeabi_dmul>
 8005a98:	a325      	add	r3, pc, #148	; (adr r3, 8005b30 <__ieee754_pow+0x9f8>)
 8005a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a9e:	f7ff bbe0 	b.w	8005262 <__ieee754_pow+0x12a>
 8005aa2:	4622      	mov	r2, r4
 8005aa4:	462b      	mov	r3, r5
 8005aa6:	f7fa fb57 	bl	8000158 <__aeabi_dsub>
 8005aaa:	4642      	mov	r2, r8
 8005aac:	464b      	mov	r3, r9
 8005aae:	f7fa ff91 	bl	80009d4 <__aeabi_dcmpge>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	f43f aef8 	beq.w	80058a8 <__ieee754_pow+0x770>
 8005ab8:	e7e7      	b.n	8005a8a <__ieee754_pow+0x952>
 8005aba:	f04f 0a00 	mov.w	sl, #0
 8005abe:	e71e      	b.n	80058fe <__ieee754_pow+0x7c6>
 8005ac0:	4621      	mov	r1, r4
 8005ac2:	e7d4      	b.n	8005a6e <__ieee754_pow+0x936>
 8005ac4:	f04f 0b00 	mov.w	fp, #0
 8005ac8:	f8df c074 	ldr.w	ip, [pc, #116]	; 8005b40 <__ieee754_pow+0xa08>
 8005acc:	f7ff bb95 	b.w	80051fa <__ieee754_pow+0xc2>
 8005ad0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8005ad4:	f7ff bb91 	b.w	80051fa <__ieee754_pow+0xc2>
 8005ad8:	4638      	mov	r0, r7
 8005ada:	4641      	mov	r1, r8
 8005adc:	f7ff bbc3 	b.w	8005266 <__ieee754_pow+0x12e>
 8005ae0:	9200      	str	r2, [sp, #0]
 8005ae2:	f7ff bb9f 	b.w	8005224 <__ieee754_pow+0xec>
 8005ae6:	bf00      	nop
 8005ae8:	652b82fe 	.word	0x652b82fe
 8005aec:	3c971547 	.word	0x3c971547
 8005af0:	00000000 	.word	0x00000000
 8005af4:	3fe62e43 	.word	0x3fe62e43
 8005af8:	fefa39ef 	.word	0xfefa39ef
 8005afc:	3fe62e42 	.word	0x3fe62e42
 8005b00:	0ca86c39 	.word	0x0ca86c39
 8005b04:	be205c61 	.word	0xbe205c61
 8005b08:	72bea4d0 	.word	0x72bea4d0
 8005b0c:	3e663769 	.word	0x3e663769
 8005b10:	c5d26bf1 	.word	0xc5d26bf1
 8005b14:	3ebbbd41 	.word	0x3ebbbd41
 8005b18:	af25de2c 	.word	0xaf25de2c
 8005b1c:	3f11566a 	.word	0x3f11566a
 8005b20:	16bebd93 	.word	0x16bebd93
 8005b24:	3f66c16c 	.word	0x3f66c16c
 8005b28:	5555553e 	.word	0x5555553e
 8005b2c:	3fc55555 	.word	0x3fc55555
 8005b30:	c2f8f359 	.word	0xc2f8f359
 8005b34:	01a56e1f 	.word	0x01a56e1f
 8005b38:	3fe00000 	.word	0x3fe00000
 8005b3c:	000fffff 	.word	0x000fffff
 8005b40:	3ff00000 	.word	0x3ff00000
 8005b44:	4090cbff 	.word	0x4090cbff
 8005b48:	3f6f3400 	.word	0x3f6f3400

08005b4c <__ieee754_sqrt>:
 8005b4c:	4b54      	ldr	r3, [pc, #336]	; (8005ca0 <__ieee754_sqrt+0x154>)
 8005b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b52:	438b      	bics	r3, r1
 8005b54:	4606      	mov	r6, r0
 8005b56:	460d      	mov	r5, r1
 8005b58:	460a      	mov	r2, r1
 8005b5a:	460c      	mov	r4, r1
 8005b5c:	d10f      	bne.n	8005b7e <__ieee754_sqrt+0x32>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	f7fa fcb1 	bl	80004c8 <__aeabi_dmul>
 8005b66:	4602      	mov	r2, r0
 8005b68:	460b      	mov	r3, r1
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	4629      	mov	r1, r5
 8005b6e:	f7fa faf5 	bl	800015c <__adddf3>
 8005b72:	4606      	mov	r6, r0
 8005b74:	460d      	mov	r5, r1
 8005b76:	4630      	mov	r0, r6
 8005b78:	4629      	mov	r1, r5
 8005b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b7e:	2900      	cmp	r1, #0
 8005b80:	4607      	mov	r7, r0
 8005b82:	4603      	mov	r3, r0
 8005b84:	dc0e      	bgt.n	8005ba4 <__ieee754_sqrt+0x58>
 8005b86:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005b8a:	ea5c 0707 	orrs.w	r7, ip, r7
 8005b8e:	d0f2      	beq.n	8005b76 <__ieee754_sqrt+0x2a>
 8005b90:	b141      	cbz	r1, 8005ba4 <__ieee754_sqrt+0x58>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	f7fa fadf 	bl	8000158 <__aeabi_dsub>
 8005b9a:	4602      	mov	r2, r0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	f7fa fdbd 	bl	800071c <__aeabi_ddiv>
 8005ba2:	e7e6      	b.n	8005b72 <__ieee754_sqrt+0x26>
 8005ba4:	1512      	asrs	r2, r2, #20
 8005ba6:	d074      	beq.n	8005c92 <__ieee754_sqrt+0x146>
 8005ba8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005bac:	07d5      	lsls	r5, r2, #31
 8005bae:	f04f 0500 	mov.w	r5, #0
 8005bb2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005bb6:	bf48      	it	mi
 8005bb8:	0fd9      	lsrmi	r1, r3, #31
 8005bba:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8005bbe:	bf44      	itt	mi
 8005bc0:	005b      	lslmi	r3, r3, #1
 8005bc2:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8005bc6:	1051      	asrs	r1, r2, #1
 8005bc8:	0fda      	lsrs	r2, r3, #31
 8005bca:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8005bce:	4628      	mov	r0, r5
 8005bd0:	2216      	movs	r2, #22
 8005bd2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	1987      	adds	r7, r0, r6
 8005bda:	42a7      	cmp	r7, r4
 8005bdc:	bfde      	ittt	le
 8005bde:	19b8      	addle	r0, r7, r6
 8005be0:	1be4      	suble	r4, r4, r7
 8005be2:	19ad      	addle	r5, r5, r6
 8005be4:	0fdf      	lsrs	r7, r3, #31
 8005be6:	3a01      	subs	r2, #1
 8005be8:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8005bec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005bf0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005bf4:	d1f0      	bne.n	8005bd8 <__ieee754_sqrt+0x8c>
 8005bf6:	f04f 0c20 	mov.w	ip, #32
 8005bfa:	4696      	mov	lr, r2
 8005bfc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005c00:	4284      	cmp	r4, r0
 8005c02:	eb06 070e 	add.w	r7, r6, lr
 8005c06:	dc02      	bgt.n	8005c0e <__ieee754_sqrt+0xc2>
 8005c08:	d112      	bne.n	8005c30 <__ieee754_sqrt+0xe4>
 8005c0a:	429f      	cmp	r7, r3
 8005c0c:	d810      	bhi.n	8005c30 <__ieee754_sqrt+0xe4>
 8005c0e:	2f00      	cmp	r7, #0
 8005c10:	eb07 0e06 	add.w	lr, r7, r6
 8005c14:	da42      	bge.n	8005c9c <__ieee754_sqrt+0x150>
 8005c16:	f1be 0f00 	cmp.w	lr, #0
 8005c1a:	db3f      	blt.n	8005c9c <__ieee754_sqrt+0x150>
 8005c1c:	f100 0801 	add.w	r8, r0, #1
 8005c20:	1a24      	subs	r4, r4, r0
 8005c22:	4640      	mov	r0, r8
 8005c24:	429f      	cmp	r7, r3
 8005c26:	bf88      	it	hi
 8005c28:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 8005c2c:	1bdb      	subs	r3, r3, r7
 8005c2e:	4432      	add	r2, r6
 8005c30:	0064      	lsls	r4, r4, #1
 8005c32:	f1bc 0c01 	subs.w	ip, ip, #1
 8005c36:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8005c3a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005c3e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005c42:	d1dd      	bne.n	8005c00 <__ieee754_sqrt+0xb4>
 8005c44:	4323      	orrs	r3, r4
 8005c46:	d006      	beq.n	8005c56 <__ieee754_sqrt+0x10a>
 8005c48:	1c54      	adds	r4, r2, #1
 8005c4a:	bf0b      	itete	eq
 8005c4c:	4662      	moveq	r2, ip
 8005c4e:	3201      	addne	r2, #1
 8005c50:	3501      	addeq	r5, #1
 8005c52:	f022 0201 	bicne.w	r2, r2, #1
 8005c56:	106b      	asrs	r3, r5, #1
 8005c58:	0852      	lsrs	r2, r2, #1
 8005c5a:	07e8      	lsls	r0, r5, #31
 8005c5c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005c60:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005c64:	bf48      	it	mi
 8005c66:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8005c6a:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8005c6e:	4616      	mov	r6, r2
 8005c70:	e781      	b.n	8005b76 <__ieee754_sqrt+0x2a>
 8005c72:	0adc      	lsrs	r4, r3, #11
 8005c74:	3915      	subs	r1, #21
 8005c76:	055b      	lsls	r3, r3, #21
 8005c78:	2c00      	cmp	r4, #0
 8005c7a:	d0fa      	beq.n	8005c72 <__ieee754_sqrt+0x126>
 8005c7c:	02e6      	lsls	r6, r4, #11
 8005c7e:	d50a      	bpl.n	8005c96 <__ieee754_sqrt+0x14a>
 8005c80:	f1c2 0020 	rsb	r0, r2, #32
 8005c84:	fa23 f000 	lsr.w	r0, r3, r0
 8005c88:	1e55      	subs	r5, r2, #1
 8005c8a:	4093      	lsls	r3, r2
 8005c8c:	4304      	orrs	r4, r0
 8005c8e:	1b4a      	subs	r2, r1, r5
 8005c90:	e78a      	b.n	8005ba8 <__ieee754_sqrt+0x5c>
 8005c92:	4611      	mov	r1, r2
 8005c94:	e7f0      	b.n	8005c78 <__ieee754_sqrt+0x12c>
 8005c96:	0064      	lsls	r4, r4, #1
 8005c98:	3201      	adds	r2, #1
 8005c9a:	e7ef      	b.n	8005c7c <__ieee754_sqrt+0x130>
 8005c9c:	4680      	mov	r8, r0
 8005c9e:	e7bf      	b.n	8005c20 <__ieee754_sqrt+0xd4>
 8005ca0:	7ff00000 	.word	0x7ff00000

08005ca4 <fabs>:
 8005ca4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4770      	bx	lr

08005cac <finite>:
 8005cac:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8005cb0:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 8005cb4:	0fc0      	lsrs	r0, r0, #31
 8005cb6:	4770      	bx	lr

08005cb8 <matherr>:
 8005cb8:	2000      	movs	r0, #0
 8005cba:	4770      	bx	lr

08005cbc <nan>:
 8005cbc:	2000      	movs	r0, #0
 8005cbe:	4901      	ldr	r1, [pc, #4]	; (8005cc4 <nan+0x8>)
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	7ff80000 	.word	0x7ff80000

08005cc8 <rint>:
 8005cc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005cce:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 8005cd2:	f1bc 0f13 	cmp.w	ip, #19
 8005cd6:	4604      	mov	r4, r0
 8005cd8:	460d      	mov	r5, r1
 8005cda:	460b      	mov	r3, r1
 8005cdc:	4606      	mov	r6, r0
 8005cde:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 8005ce2:	dc5a      	bgt.n	8005d9a <rint+0xd2>
 8005ce4:	f1bc 0f00 	cmp.w	ip, #0
 8005ce8:	da2b      	bge.n	8005d42 <rint+0x7a>
 8005cea:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005cee:	4302      	orrs	r2, r0
 8005cf0:	d023      	beq.n	8005d3a <rint+0x72>
 8005cf2:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005cf6:	4302      	orrs	r2, r0
 8005cf8:	4256      	negs	r6, r2
 8005cfa:	4316      	orrs	r6, r2
 8005cfc:	0c4b      	lsrs	r3, r1, #17
 8005cfe:	0b36      	lsrs	r6, r6, #12
 8005d00:	4934      	ldr	r1, [pc, #208]	; (8005dd4 <rint+0x10c>)
 8005d02:	045b      	lsls	r3, r3, #17
 8005d04:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 8005d08:	ea46 0503 	orr.w	r5, r6, r3
 8005d0c:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 8005d10:	4602      	mov	r2, r0
 8005d12:	462b      	mov	r3, r5
 8005d14:	e9d1 4500 	ldrd	r4, r5, [r1]
 8005d18:	4620      	mov	r0, r4
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	f7fa fa1e 	bl	800015c <__adddf3>
 8005d20:	e9cd 0100 	strd	r0, r1, [sp]
 8005d24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d28:	462b      	mov	r3, r5
 8005d2a:	4622      	mov	r2, r4
 8005d2c:	f7fa fa14 	bl	8000158 <__aeabi_dsub>
 8005d30:	4604      	mov	r4, r0
 8005d32:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005d36:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	b003      	add	sp, #12
 8005d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d42:	4a25      	ldr	r2, [pc, #148]	; (8005dd8 <rint+0x110>)
 8005d44:	fa42 f20c 	asr.w	r2, r2, ip
 8005d48:	4011      	ands	r1, r2
 8005d4a:	4301      	orrs	r1, r0
 8005d4c:	d0f5      	beq.n	8005d3a <rint+0x72>
 8005d4e:	0852      	lsrs	r2, r2, #1
 8005d50:	ea05 0102 	and.w	r1, r5, r2
 8005d54:	ea50 0601 	orrs.w	r6, r0, r1
 8005d58:	d00c      	beq.n	8005d74 <rint+0xac>
 8005d5a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005d5e:	f1bc 0f13 	cmp.w	ip, #19
 8005d62:	bf0c      	ite	eq
 8005d64:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 8005d68:	2600      	movne	r6, #0
 8005d6a:	ea25 0202 	bic.w	r2, r5, r2
 8005d6e:	fa43 f30c 	asr.w	r3, r3, ip
 8005d72:	4313      	orrs	r3, r2
 8005d74:	4917      	ldr	r1, [pc, #92]	; (8005dd4 <rint+0x10c>)
 8005d76:	4632      	mov	r2, r6
 8005d78:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 8005d7c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d80:	4620      	mov	r0, r4
 8005d82:	4629      	mov	r1, r5
 8005d84:	f7fa f9ea 	bl	800015c <__adddf3>
 8005d88:	e9cd 0100 	strd	r0, r1, [sp]
 8005d8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d90:	4622      	mov	r2, r4
 8005d92:	462b      	mov	r3, r5
 8005d94:	f7fa f9e0 	bl	8000158 <__aeabi_dsub>
 8005d98:	e008      	b.n	8005dac <rint+0xe4>
 8005d9a:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 8005d9e:	dd08      	ble.n	8005db2 <rint+0xea>
 8005da0:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 8005da4:	d1c9      	bne.n	8005d3a <rint+0x72>
 8005da6:	4602      	mov	r2, r0
 8005da8:	f7fa f9d8 	bl	800015c <__adddf3>
 8005dac:	4604      	mov	r4, r0
 8005dae:	460d      	mov	r5, r1
 8005db0:	e7c3      	b.n	8005d3a <rint+0x72>
 8005db2:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 8005db6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005dba:	40ca      	lsrs	r2, r1
 8005dbc:	4210      	tst	r0, r2
 8005dbe:	d0bc      	beq.n	8005d3a <rint+0x72>
 8005dc0:	0852      	lsrs	r2, r2, #1
 8005dc2:	4210      	tst	r0, r2
 8005dc4:	bf1f      	itttt	ne
 8005dc6:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 8005dca:	ea20 0202 	bicne.w	r2, r0, r2
 8005dce:	410e      	asrne	r6, r1
 8005dd0:	4316      	orrne	r6, r2
 8005dd2:	e7cf      	b.n	8005d74 <rint+0xac>
 8005dd4:	08005f98 	.word	0x08005f98
 8005dd8:	000fffff 	.word	0x000fffff
 8005ddc:	00000000 	.word	0x00000000

08005de0 <scalbn>:
 8005de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de2:	4616      	mov	r6, r2
 8005de4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005de8:	4604      	mov	r4, r0
 8005dea:	460d      	mov	r5, r1
 8005dec:	460b      	mov	r3, r1
 8005dee:	b982      	cbnz	r2, 8005e12 <scalbn+0x32>
 8005df0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005df4:	4303      	orrs	r3, r0
 8005df6:	d034      	beq.n	8005e62 <scalbn+0x82>
 8005df8:	4b2d      	ldr	r3, [pc, #180]	; (8005eb0 <scalbn+0xd0>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f7fa fb64 	bl	80004c8 <__aeabi_dmul>
 8005e00:	4b2c      	ldr	r3, [pc, #176]	; (8005eb4 <scalbn+0xd4>)
 8005e02:	4604      	mov	r4, r0
 8005e04:	429e      	cmp	r6, r3
 8005e06:	460d      	mov	r5, r1
 8005e08:	da0d      	bge.n	8005e26 <scalbn+0x46>
 8005e0a:	a325      	add	r3, pc, #148	; (adr r3, 8005ea0 <scalbn+0xc0>)
 8005e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e10:	e01c      	b.n	8005e4c <scalbn+0x6c>
 8005e12:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8005e16:	42ba      	cmp	r2, r7
 8005e18:	d109      	bne.n	8005e2e <scalbn+0x4e>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	f7fa f99e 	bl	800015c <__adddf3>
 8005e20:	4604      	mov	r4, r0
 8005e22:	460d      	mov	r5, r1
 8005e24:	e01d      	b.n	8005e62 <scalbn+0x82>
 8005e26:	460b      	mov	r3, r1
 8005e28:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005e2c:	3a36      	subs	r2, #54	; 0x36
 8005e2e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005e32:	4432      	add	r2, r6
 8005e34:	428a      	cmp	r2, r1
 8005e36:	dd0c      	ble.n	8005e52 <scalbn+0x72>
 8005e38:	4622      	mov	r2, r4
 8005e3a:	462b      	mov	r3, r5
 8005e3c:	a11a      	add	r1, pc, #104	; (adr r1, 8005ea8 <scalbn+0xc8>)
 8005e3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e42:	f000 f83b 	bl	8005ebc <copysign>
 8005e46:	a318      	add	r3, pc, #96	; (adr r3, 8005ea8 <scalbn+0xc8>)
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	f7fa fb3c 	bl	80004c8 <__aeabi_dmul>
 8005e50:	e7e6      	b.n	8005e20 <scalbn+0x40>
 8005e52:	2a00      	cmp	r2, #0
 8005e54:	dd08      	ble.n	8005e68 <scalbn+0x88>
 8005e56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005e5a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e5e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005e62:	4620      	mov	r0, r4
 8005e64:	4629      	mov	r1, r5
 8005e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e68:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005e6c:	da0b      	bge.n	8005e86 <scalbn+0xa6>
 8005e6e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005e72:	429e      	cmp	r6, r3
 8005e74:	4622      	mov	r2, r4
 8005e76:	462b      	mov	r3, r5
 8005e78:	dce0      	bgt.n	8005e3c <scalbn+0x5c>
 8005e7a:	a109      	add	r1, pc, #36	; (adr r1, 8005ea0 <scalbn+0xc0>)
 8005e7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e80:	f000 f81c 	bl	8005ebc <copysign>
 8005e84:	e7c1      	b.n	8005e0a <scalbn+0x2a>
 8005e86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005e8a:	3236      	adds	r2, #54	; 0x36
 8005e8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e90:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005e94:	4620      	mov	r0, r4
 8005e96:	4629      	mov	r1, r5
 8005e98:	2200      	movs	r2, #0
 8005e9a:	4b07      	ldr	r3, [pc, #28]	; (8005eb8 <scalbn+0xd8>)
 8005e9c:	e7d6      	b.n	8005e4c <scalbn+0x6c>
 8005e9e:	bf00      	nop
 8005ea0:	c2f8f359 	.word	0xc2f8f359
 8005ea4:	01a56e1f 	.word	0x01a56e1f
 8005ea8:	8800759c 	.word	0x8800759c
 8005eac:	7e37e43c 	.word	0x7e37e43c
 8005eb0:	43500000 	.word	0x43500000
 8005eb4:	ffff3cb0 	.word	0xffff3cb0
 8005eb8:	3c900000 	.word	0x3c900000

08005ebc <copysign>:
 8005ebc:	b530      	push	{r4, r5, lr}
 8005ebe:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005ec2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ec6:	ea42 0503 	orr.w	r5, r2, r3
 8005eca:	4629      	mov	r1, r5
 8005ecc:	bd30      	pop	{r4, r5, pc}
	...

08005ed0 <_init>:
 8005ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ed2:	bf00      	nop
 8005ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ed6:	bc08      	pop	{r3}
 8005ed8:	469e      	mov	lr, r3
 8005eda:	4770      	bx	lr

08005edc <_fini>:
 8005edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ede:	bf00      	nop
 8005ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ee2:	bc08      	pop	{r3}
 8005ee4:	469e      	mov	lr, r3
 8005ee6:	4770      	bx	lr
