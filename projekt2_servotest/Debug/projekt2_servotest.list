
projekt2_servotest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003024  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08003130  08003130  00013130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031a0  080031a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080031a0  080031a0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031a0  080031a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031a0  080031a0  000131a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031a4  080031a4  000131a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080031a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08003218  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003218  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cc22  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001eaa  00000000  00000000  0002ccbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a10  00000000  00000000  0002eb68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000918  00000000  00000000  0002f578  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018267  00000000  00000000  0002fe90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009712  00000000  00000000  000480f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000888ac  00000000  00000000  00051809  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da0b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b5c  00000000  00000000  000da130  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003118 	.word	0x08003118

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003118 	.word	0x08003118

0800014c <strtoINT>:
 *  Created on: Dec 12, 2020
 *      Author: root
 */
#include "functions.h"

void strtoINT(uint32_t number, int lenght){
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
 8000156:	466b      	mov	r3, sp
 8000158:	461d      	mov	r5, r3
	uch string[lenght];
 800015a:	6838      	ldr	r0, [r7, #0]
 800015c:	1e43      	subs	r3, r0, #1
 800015e:	60fb      	str	r3, [r7, #12]
 8000160:	4603      	mov	r3, r0
 8000162:	4619      	mov	r1, r3
 8000164:	f04f 0200 	mov.w	r2, #0
 8000168:	f04f 0300 	mov.w	r3, #0
 800016c:	f04f 0400 	mov.w	r4, #0
 8000170:	00d4      	lsls	r4, r2, #3
 8000172:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8000176:	00cb      	lsls	r3, r1, #3
 8000178:	4603      	mov	r3, r0
 800017a:	4619      	mov	r1, r3
 800017c:	f04f 0200 	mov.w	r2, #0
 8000180:	f04f 0300 	mov.w	r3, #0
 8000184:	f04f 0400 	mov.w	r4, #0
 8000188:	00d4      	lsls	r4, r2, #3
 800018a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800018e:	00cb      	lsls	r3, r1, #3
 8000190:	4603      	mov	r3, r0
 8000192:	3307      	adds	r3, #7
 8000194:	08db      	lsrs	r3, r3, #3
 8000196:	00db      	lsls	r3, r3, #3
 8000198:	ebad 0d03 	sub.w	sp, sp, r3
 800019c:	466b      	mov	r3, sp
 800019e:	3300      	adds	r3, #0
 80001a0:	60bb      	str	r3, [r7, #8]
	sprintf(string,"%d",number);
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	687a      	ldr	r2, [r7, #4]
 80001a6:	4906      	ldr	r1, [pc, #24]	; (80001c0 <strtoINT+0x74>)
 80001a8:	4618      	mov	r0, r3
 80001aa:	f002 fba3 	bl	80028f4 <siprintf>

	LCD_string(string);
 80001ae:	68bb      	ldr	r3, [r7, #8]
 80001b0:	4618      	mov	r0, r3
 80001b2:	f000 f883 	bl	80002bc <LCD_string>
 80001b6:	46ad      	mov	sp, r5
}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bdb0      	pop	{r4, r5, r7, pc}
 80001c0:	08003130 	.word	0x08003130

080001c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b088      	sub	sp, #32
 80001c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001ca:	f107 0310 	add.w	r3, r7, #16
 80001ce:	2200      	movs	r2, #0
 80001d0:	601a      	str	r2, [r3, #0]
 80001d2:	605a      	str	r2, [r3, #4]
 80001d4:	609a      	str	r2, [r3, #8]
 80001d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001d8:	4b27      	ldr	r3, [pc, #156]	; (8000278 <MX_GPIO_Init+0xb4>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	4a26      	ldr	r2, [pc, #152]	; (8000278 <MX_GPIO_Init+0xb4>)
 80001de:	f043 0310 	orr.w	r3, r3, #16
 80001e2:	6193      	str	r3, [r2, #24]
 80001e4:	4b24      	ldr	r3, [pc, #144]	; (8000278 <MX_GPIO_Init+0xb4>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	f003 0310 	and.w	r3, r3, #16
 80001ec:	60fb      	str	r3, [r7, #12]
 80001ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001f0:	4b21      	ldr	r3, [pc, #132]	; (8000278 <MX_GPIO_Init+0xb4>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	4a20      	ldr	r2, [pc, #128]	; (8000278 <MX_GPIO_Init+0xb4>)
 80001f6:	f043 0320 	orr.w	r3, r3, #32
 80001fa:	6193      	str	r3, [r2, #24]
 80001fc:	4b1e      	ldr	r3, [pc, #120]	; (8000278 <MX_GPIO_Init+0xb4>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	f003 0320 	and.w	r3, r3, #32
 8000204:	60bb      	str	r3, [r7, #8]
 8000206:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000208:	4b1b      	ldr	r3, [pc, #108]	; (8000278 <MX_GPIO_Init+0xb4>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	4a1a      	ldr	r2, [pc, #104]	; (8000278 <MX_GPIO_Init+0xb4>)
 800020e:	f043 0304 	orr.w	r3, r3, #4
 8000212:	6193      	str	r3, [r2, #24]
 8000214:	4b18      	ldr	r3, [pc, #96]	; (8000278 <MX_GPIO_Init+0xb4>)
 8000216:	699b      	ldr	r3, [r3, #24]
 8000218:	f003 0304 	and.w	r3, r3, #4
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_panel_GPIO_Port, led_panel_Pin, GPIO_PIN_RESET);
 8000220:	2200      	movs	r2, #0
 8000222:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000226:	4815      	ldr	r0, [pc, #84]	; (800027c <MX_GPIO_Init+0xb8>)
 8000228:	f000 ff6a 	bl	8001100 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DATA_7_Pin|LCD_DATA_6_Pin|LCD_DATA_5_Pin|LCD_DATA_4_Pin
 800022c:	2200      	movs	r2, #0
 800022e:	21fc      	movs	r1, #252	; 0xfc
 8000230:	4813      	ldr	r0, [pc, #76]	; (8000280 <MX_GPIO_Init+0xbc>)
 8000232:	f000 ff65 	bl	8001100 <HAL_GPIO_WritePin>
                          |LCD_E_Pin|LCD_RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = led_panel_Pin;
 8000236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800023a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800023c:	2301      	movs	r3, #1
 800023e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000240:	2300      	movs	r3, #0
 8000242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000244:	2302      	movs	r3, #2
 8000246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_panel_GPIO_Port, &GPIO_InitStruct);
 8000248:	f107 0310 	add.w	r3, r7, #16
 800024c:	4619      	mov	r1, r3
 800024e:	480b      	ldr	r0, [pc, #44]	; (800027c <MX_GPIO_Init+0xb8>)
 8000250:	f000 fdfc 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = LCD_DATA_7_Pin|LCD_DATA_6_Pin|LCD_DATA_5_Pin|LCD_DATA_4_Pin
 8000254:	23fc      	movs	r3, #252	; 0xfc
 8000256:	613b      	str	r3, [r7, #16]
                          |LCD_E_Pin|LCD_RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000258:	2301      	movs	r3, #1
 800025a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800025c:	2300      	movs	r3, #0
 800025e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000260:	2302      	movs	r3, #2
 8000262:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000264:	f107 0310 	add.w	r3, r7, #16
 8000268:	4619      	mov	r1, r3
 800026a:	4805      	ldr	r0, [pc, #20]	; (8000280 <MX_GPIO_Init+0xbc>)
 800026c:	f000 fdee 	bl	8000e4c <HAL_GPIO_Init>

}
 8000270:	bf00      	nop
 8000272:	3720      	adds	r7, #32
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40021000 	.word	0x40021000
 800027c:	40011000 	.word	0x40011000
 8000280:	40010800 	.word	0x40010800

08000284 <LCD_test>:
 */
//I use a LCD display with 2 row and 16 cool, with Hitachi basic
//i use it in 4 data_bit mode
#include "lcd.h"

void LCD_test(){
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
	LCD_goto(0,0);
 8000288:	2100      	movs	r1, #0
 800028a:	2000      	movs	r0, #0
 800028c:	f000 f82b 	bl	80002e6 <LCD_goto>
	LCD_string("+++TEST--test+++");
 8000290:	4809      	ldr	r0, [pc, #36]	; (80002b8 <LCD_test+0x34>)
 8000292:	f000 f813 	bl	80002bc <LCD_string>
	LCD_goto(1,0);
 8000296:	2100      	movs	r1, #0
 8000298:	2001      	movs	r0, #1
 800029a:	f000 f824 	bl	80002e6 <LCD_goto>
	LCD_string("+++TEST--test+++");
 800029e:	4806      	ldr	r0, [pc, #24]	; (80002b8 <LCD_test+0x34>)
 80002a0:	f000 f80c 	bl	80002bc <LCD_string>
	HAL_Delay(1000);
 80002a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002a8:	f000 fca0 	bl	8000bec <HAL_Delay>
	LCD_cmd(CLEAR);
 80002ac:	2001      	movs	r0, #1
 80002ae:	f000 f86b 	bl	8000388 <LCD_cmd>
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	08003134 	.word	0x08003134

080002bc <LCD_string>:

void LCD_string(char *str){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
	while(*str){
 80002c4:	e007      	b.n	80002d6 <LCD_string+0x1a>
		LCD_data(*str);
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f8c4 	bl	8000458 <LCD_data>
		str++;
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	3301      	adds	r3, #1
 80002d4:	607b      	str	r3, [r7, #4]
	while(*str){
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d1f3      	bne.n	80002c6 <LCD_string+0xa>
	}
}
 80002de:	bf00      	nop
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}

080002e6 <LCD_goto>:

void LCD_goto(u8 row, u8 col){
 80002e6:	b580      	push	{r7, lr}
 80002e8:	b084      	sub	sp, #16
 80002ea:	af00      	add	r7, sp, #0
 80002ec:	4603      	mov	r3, r0
 80002ee:	460a      	mov	r2, r1
 80002f0:	71fb      	strb	r3, [r7, #7]
 80002f2:	4613      	mov	r3, r2
 80002f4:	71bb      	strb	r3, [r7, #6]
	switch(row){
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d002      	beq.n	8000302 <LCD_goto+0x1c>
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d010      	beq.n	8000322 <LCD_goto+0x3c>
			for(u8 i = col; i>0; i--){
				LCD_cmd(0x14);
			}
		 break;
	}
}
 8000300:	e01f      	b.n	8000342 <LCD_goto+0x5c>
			LCD_cmd(0x80);
 8000302:	2080      	movs	r0, #128	; 0x80
 8000304:	f000 f840 	bl	8000388 <LCD_cmd>
			for(u8 i = col; i>0; i--){
 8000308:	79bb      	ldrb	r3, [r7, #6]
 800030a:	73fb      	strb	r3, [r7, #15]
 800030c:	e005      	b.n	800031a <LCD_goto+0x34>
				LCD_cmd(0x14);
 800030e:	2014      	movs	r0, #20
 8000310:	f000 f83a 	bl	8000388 <LCD_cmd>
			for(u8 i = col; i>0; i--){
 8000314:	7bfb      	ldrb	r3, [r7, #15]
 8000316:	3b01      	subs	r3, #1
 8000318:	73fb      	strb	r3, [r7, #15]
 800031a:	7bfb      	ldrb	r3, [r7, #15]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d1f6      	bne.n	800030e <LCD_goto+0x28>
		 break;
 8000320:	e00f      	b.n	8000342 <LCD_goto+0x5c>
			LCD_cmd(0xC0);
 8000322:	20c0      	movs	r0, #192	; 0xc0
 8000324:	f000 f830 	bl	8000388 <LCD_cmd>
			for(u8 i = col; i>0; i--){
 8000328:	79bb      	ldrb	r3, [r7, #6]
 800032a:	73bb      	strb	r3, [r7, #14]
 800032c:	e005      	b.n	800033a <LCD_goto+0x54>
				LCD_cmd(0x14);
 800032e:	2014      	movs	r0, #20
 8000330:	f000 f82a 	bl	8000388 <LCD_cmd>
			for(u8 i = col; i>0; i--){
 8000334:	7bbb      	ldrb	r3, [r7, #14]
 8000336:	3b01      	subs	r3, #1
 8000338:	73bb      	strb	r3, [r7, #14]
 800033a:	7bbb      	ldrb	r3, [r7, #14]
 800033c:	2b00      	cmp	r3, #0
 800033e:	d1f6      	bne.n	800032e <LCD_goto+0x48>
		 break;
 8000340:	bf00      	nop
}
 8000342:	bf00      	nop
 8000344:	3710      	adds	r7, #16
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <LCD_enable>:

void LCD_enable(){
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	//need a square  signal _| |_ for LCD enable Port
	//we need a 0-1-0 signalflow, transition
	HAL_GPIO_WritePin(LCD_E_GPIO_Port, LCD_E_Pin, RESET);	//make _
 8000350:	2200      	movs	r2, #0
 8000352:	2140      	movs	r1, #64	; 0x40
 8000354:	480b      	ldr	r0, [pc, #44]	; (8000384 <LCD_enable+0x38>)
 8000356:	f000 fed3 	bl	8001100 <HAL_GPIO_WritePin>
	HAL_Delay(5);		//wait
 800035a:	2005      	movs	r0, #5
 800035c:	f000 fc46 	bl	8000bec <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port,LCD_E_Pin, SET);	//_|
 8000360:	2201      	movs	r2, #1
 8000362:	2140      	movs	r1, #64	; 0x40
 8000364:	4807      	ldr	r0, [pc, #28]	; (8000384 <LCD_enable+0x38>)
 8000366:	f000 fecb 	bl	8001100 <HAL_GPIO_WritePin>
	HAL_Delay(5);		//wait
 800036a:	2005      	movs	r0, #5
 800036c:	f000 fc3e 	bl	8000bec <HAL_Delay>
	HAL_GPIO_WritePin(LCD_E_GPIO_Port,LCD_E_Pin, RESET);	//	|_
 8000370:	2200      	movs	r2, #0
 8000372:	2140      	movs	r1, #64	; 0x40
 8000374:	4803      	ldr	r0, [pc, #12]	; (8000384 <LCD_enable+0x38>)
 8000376:	f000 fec3 	bl	8001100 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800037a:	2005      	movs	r0, #5
 800037c:	f000 fc36 	bl	8000bec <HAL_Delay>
}
 8000380:	bf00      	nop
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40010800 	.word	0x40010800

08000388 <LCD_cmd>:

void LCD_cmd(u8 cmd){
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
	//we need reset RS port, why we send commands for the LCD display
		//the R/W pin is already on GNDm because we only write the display
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin, RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	2180      	movs	r1, #128	; 0x80
 8000396:	482f      	ldr	r0, [pc, #188]	; (8000454 <LCD_cmd+0xcc>)
 8000398:	f000 feb2 	bl	8001100 <HAL_GPIO_WritePin>
	//we write the data with 2 cycle, first the upper Bits
		//we use PORT MASK just in case
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin,(cmd>>7) & 0x01);
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	09db      	lsrs	r3, r3, #7
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	461a      	mov	r2, r3
 80003a4:	2104      	movs	r1, #4
 80003a6:	482b      	ldr	r0, [pc, #172]	; (8000454 <LCD_cmd+0xcc>)
 80003a8:	f000 feaa 	bl	8001100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin,(cmd>>6) & 0x01);
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	099b      	lsrs	r3, r3, #6
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	461a      	mov	r2, r3
 80003ba:	2108      	movs	r1, #8
 80003bc:	4825      	ldr	r0, [pc, #148]	; (8000454 <LCD_cmd+0xcc>)
 80003be:	f000 fe9f 	bl	8001100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin,(cmd>>5) & 0x01);
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	095b      	lsrs	r3, r3, #5
 80003c6:	b2db      	uxtb	r3, r3
 80003c8:	f003 0301 	and.w	r3, r3, #1
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	461a      	mov	r2, r3
 80003d0:	2110      	movs	r1, #16
 80003d2:	4820      	ldr	r0, [pc, #128]	; (8000454 <LCD_cmd+0xcc>)
 80003d4:	f000 fe94 	bl	8001100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin,(cmd>>4) & 0x01);
 80003d8:	79fb      	ldrb	r3, [r7, #7]
 80003da:	091b      	lsrs	r3, r3, #4
 80003dc:	b2db      	uxtb	r3, r3
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	461a      	mov	r2, r3
 80003e6:	2120      	movs	r1, #32
 80003e8:	481a      	ldr	r0, [pc, #104]	; (8000454 <LCD_cmd+0xcc>)
 80003ea:	f000 fe89 	bl	8001100 <HAL_GPIO_WritePin>

	//we write this for LCD with LCD_enable, we send the datas
	LCD_enable();
 80003ee:	f7ff ffad 	bl	800034c <LCD_enable>

	//now we write the four lower Bit
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin,(cmd>>3) & 0x01);
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	08db      	lsrs	r3, r3, #3
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	f003 0301 	and.w	r3, r3, #1
 80003fc:	b2db      	uxtb	r3, r3
 80003fe:	461a      	mov	r2, r3
 8000400:	2104      	movs	r1, #4
 8000402:	4814      	ldr	r0, [pc, #80]	; (8000454 <LCD_cmd+0xcc>)
 8000404:	f000 fe7c 	bl	8001100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin,(cmd>>2) & 0x01);
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	089b      	lsrs	r3, r3, #2
 800040c:	b2db      	uxtb	r3, r3
 800040e:	f003 0301 	and.w	r3, r3, #1
 8000412:	b2db      	uxtb	r3, r3
 8000414:	461a      	mov	r2, r3
 8000416:	2108      	movs	r1, #8
 8000418:	480e      	ldr	r0, [pc, #56]	; (8000454 <LCD_cmd+0xcc>)
 800041a:	f000 fe71 	bl	8001100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin,(cmd>>1) & 0x01);
 800041e:	79fb      	ldrb	r3, [r7, #7]
 8000420:	085b      	lsrs	r3, r3, #1
 8000422:	b2db      	uxtb	r3, r3
 8000424:	f003 0301 	and.w	r3, r3, #1
 8000428:	b2db      	uxtb	r3, r3
 800042a:	461a      	mov	r2, r3
 800042c:	2110      	movs	r1, #16
 800042e:	4809      	ldr	r0, [pc, #36]	; (8000454 <LCD_cmd+0xcc>)
 8000430:	f000 fe66 	bl	8001100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin,(cmd>>0) & 0x01);		//here truly we don`t need the MASK,just in case
 8000434:	79fb      	ldrb	r3, [r7, #7]
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	b2db      	uxtb	r3, r3
 800043c:	461a      	mov	r2, r3
 800043e:	2120      	movs	r1, #32
 8000440:	4804      	ldr	r0, [pc, #16]	; (8000454 <LCD_cmd+0xcc>)
 8000442:	f000 fe5d 	bl	8001100 <HAL_GPIO_WritePin>

	//again write for LCD
	LCD_enable();
 8000446:	f7ff ff81 	bl	800034c <LCD_enable>
}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	40010800 	.word	0x40010800

08000458 <LCD_data>:

void LCD_data(u8 data){
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
	//we set the RS Pin, because we send now data
	HAL_GPIO_WritePin(LCD_RS_GPIO_Port,LCD_RS_Pin,SET);
 8000462:	2201      	movs	r2, #1
 8000464:	2180      	movs	r1, #128	; 0x80
 8000466:	482f      	ldr	r0, [pc, #188]	; (8000524 <LCD_data+0xcc>)
 8000468:	f000 fe4a 	bl	8001100 <HAL_GPIO_WritePin>
	//send data again with 2 cycles
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin, (data>>7) & 0x01);
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	09db      	lsrs	r3, r3, #7
 8000470:	b2db      	uxtb	r3, r3
 8000472:	461a      	mov	r2, r3
 8000474:	2104      	movs	r1, #4
 8000476:	482b      	ldr	r0, [pc, #172]	; (8000524 <LCD_data+0xcc>)
 8000478:	f000 fe42 	bl	8001100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin, (data>>6) & 0x01);
 800047c:	79fb      	ldrb	r3, [r7, #7]
 800047e:	099b      	lsrs	r3, r3, #6
 8000480:	b2db      	uxtb	r3, r3
 8000482:	f003 0301 	and.w	r3, r3, #1
 8000486:	b2db      	uxtb	r3, r3
 8000488:	461a      	mov	r2, r3
 800048a:	2108      	movs	r1, #8
 800048c:	4825      	ldr	r0, [pc, #148]	; (8000524 <LCD_data+0xcc>)
 800048e:	f000 fe37 	bl	8001100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin, (data>>5) & 0x01);
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	095b      	lsrs	r3, r3, #5
 8000496:	b2db      	uxtb	r3, r3
 8000498:	f003 0301 	and.w	r3, r3, #1
 800049c:	b2db      	uxtb	r3, r3
 800049e:	461a      	mov	r2, r3
 80004a0:	2110      	movs	r1, #16
 80004a2:	4820      	ldr	r0, [pc, #128]	; (8000524 <LCD_data+0xcc>)
 80004a4:	f000 fe2c 	bl	8001100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin, (data>>4) & 0x01);
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	091b      	lsrs	r3, r3, #4
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	461a      	mov	r2, r3
 80004b6:	2120      	movs	r1, #32
 80004b8:	481a      	ldr	r0, [pc, #104]	; (8000524 <LCD_data+0xcc>)
 80004ba:	f000 fe21 	bl	8001100 <HAL_GPIO_WritePin>
	//we send the data for display
	LCD_enable();
 80004be:	f7ff ff45 	bl	800034c <LCD_enable>

	//now we send the low 4 bits
	HAL_GPIO_WritePin(LCD_DATA_7_GPIO_Port,LCD_DATA_7_Pin, (data>>3) & 0x01);
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	08db      	lsrs	r3, r3, #3
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	f003 0301 	and.w	r3, r3, #1
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	461a      	mov	r2, r3
 80004d0:	2104      	movs	r1, #4
 80004d2:	4814      	ldr	r0, [pc, #80]	; (8000524 <LCD_data+0xcc>)
 80004d4:	f000 fe14 	bl	8001100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_6_GPIO_Port,LCD_DATA_6_Pin, (data>>2) & 0x01);
 80004d8:	79fb      	ldrb	r3, [r7, #7]
 80004da:	089b      	lsrs	r3, r3, #2
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	461a      	mov	r2, r3
 80004e6:	2108      	movs	r1, #8
 80004e8:	480e      	ldr	r0, [pc, #56]	; (8000524 <LCD_data+0xcc>)
 80004ea:	f000 fe09 	bl	8001100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_5_GPIO_Port,LCD_DATA_5_Pin, (data>>1) & 0x01);
 80004ee:	79fb      	ldrb	r3, [r7, #7]
 80004f0:	085b      	lsrs	r3, r3, #1
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	f003 0301 	and.w	r3, r3, #1
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	461a      	mov	r2, r3
 80004fc:	2110      	movs	r1, #16
 80004fe:	4809      	ldr	r0, [pc, #36]	; (8000524 <LCD_data+0xcc>)
 8000500:	f000 fdfe 	bl	8001100 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DATA_4_GPIO_Port,LCD_DATA_4_Pin, (data>>0) & 0x01);
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	b2db      	uxtb	r3, r3
 800050c:	461a      	mov	r2, r3
 800050e:	2120      	movs	r1, #32
 8000510:	4804      	ldr	r0, [pc, #16]	; (8000524 <LCD_data+0xcc>)
 8000512:	f000 fdf5 	bl	8001100 <HAL_GPIO_WritePin>

	LCD_enable();
 8000516:	f7ff ff19 	bl	800034c <LCD_enable>
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40010800 	.word	0x40010800

08000528 <LCD_init>:

void LCD_init(bool curzor, bool blink){
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	460a      	mov	r2, r1
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	4613      	mov	r3, r2
 8000536:	71bb      	strb	r3, [r7, #6]
	//we before init
	HAL_Delay(15);
 8000538:	200f      	movs	r0, #15
 800053a:	f000 fb57 	bl	8000bec <HAL_Delay>
	//we use it in 4bit mode with 2 row - 5*8 pixel
	LCD_cmd(0x20);
 800053e:	2020      	movs	r0, #32
 8000540:	f7ff ff22 	bl	8000388 <LCD_cmd>

	//just in case we send for Enable PORT 3 cycle
	LCD_enable();
 8000544:	f7ff ff02 	bl	800034c <LCD_enable>
	LCD_enable();
 8000548:	f7ff ff00 	bl	800034c <LCD_enable>
	LCD_enable();
 800054c:	f7ff fefe 	bl	800034c <LCD_enable>

	//this hexacodes is from datasheet (LCD 1602, with hitachi base)
	LCD_cmd(0x28);		//set the mode 3 time
 8000550:	2028      	movs	r0, #40	; 0x28
 8000552:	f7ff ff19 	bl	8000388 <LCD_cmd>
	LCD_cmd(0x28);		//we don`t know before the init function wich one mode is the display
 8000556:	2028      	movs	r0, #40	; 0x28
 8000558:	f7ff ff16 	bl	8000388 <LCD_cmd>
	LCD_cmd(0x28);		//when we set the mode only 2 times, the display cant work well
 800055c:	2028      	movs	r0, #40	; 0x28
 800055e:	f7ff ff13 	bl	8000388 <LCD_cmd>

	LCD_cmd(0x01);			//lcd clear
 8000562:	2001      	movs	r0, #1
 8000564:	f7ff ff10 	bl	8000388 <LCD_cmd>
	LCD_cmd(0x02);			//send the curzor to 0.row 0.cool
 8000568:	2002      	movs	r0, #2
 800056a:	f7ff ff0d 	bl	8000388 <LCD_cmd>
	//set the curzor blink and the curzor visibility
	LCD_cmd(0x08 | (1<<LCD_E) | (curzor<<LCD_curzor) | (blink<<LCD_blink));
 800056e:	79fb      	ldrb	r3, [r7, #7]
 8000570:	005b      	lsls	r3, r3, #1
 8000572:	b25b      	sxtb	r3, r3
 8000574:	f043 030c 	orr.w	r3, r3, #12
 8000578:	b25a      	sxtb	r2, r3
 800057a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800057e:	4313      	orrs	r3, r2
 8000580:	b25b      	sxtb	r3, r3
 8000582:	b2db      	uxtb	r3, r3
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff feff 	bl	8000388 <LCD_cmd>
}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fac5 	bl	8000b28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f851 	bl	8000644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f7ff fe0f 	bl	80001c4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005a6:	f000 f931 	bl	800080c <MX_TIM1_Init>
  MX_TIM2_Init();
 80005aa:	f000 f9dd 	bl	8000968 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80005ae:	2100      	movs	r1, #0
 80005b0:	4821      	ldr	r0, [pc, #132]	; (8000638 <main+0xa4>)
 80005b2:	f001 fabb 	bl	8001b2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 80005b6:	2104      	movs	r1, #4
 80005b8:	481f      	ldr	r0, [pc, #124]	; (8000638 <main+0xa4>)
 80005ba:	f001 fab7 	bl	8001b2c <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80005be:	481f      	ldr	r0, [pc, #124]	; (800063c <main+0xa8>)
 80005c0:	f001 fa0a 	bl	80019d8 <HAL_TIM_Base_Start_IT>
  LCD_init(1, 1);
 80005c4:	2101      	movs	r1, #1
 80005c6:	2001      	movs	r0, #1
 80005c8:	f7ff ffae 	bl	8000528 <LCD_init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_test();
 80005cc:	f7ff fe5a 	bl	8000284 <LCD_test>
  while (1)
  {
	  HAL_GPIO_TogglePin(led_panel_GPIO_Port, led_panel_Pin);
 80005d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d4:	481a      	ldr	r0, [pc, #104]	; (8000640 <main+0xac>)
 80005d6:	f000 fdab 	bl	8001130 <HAL_GPIO_TogglePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  for(uint16_t j = 25; j<= 125; j += 5){
 80005da:	2319      	movs	r3, #25
 80005dc:	82fb      	strh	r3, [r7, #22]
 80005de:	e017      	b.n	8000610 <main+0x7c>
		  htim1.Instance -> CCR1 = j;
 80005e0:	4b15      	ldr	r3, [pc, #84]	; (8000638 <main+0xa4>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	8afa      	ldrh	r2, [r7, #22]
 80005e6:	635a      	str	r2, [r3, #52]	; 0x34
		  htim1.Instance -> CCR2 = j;
 80005e8:	4b13      	ldr	r3, [pc, #76]	; (8000638 <main+0xa4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	8afa      	ldrh	r2, [r7, #22]
 80005ee:	639a      	str	r2, [r3, #56]	; 0x38
		  LCD_goto(0,0);
 80005f0:	2100      	movs	r1, #0
 80005f2:	2000      	movs	r0, #0
 80005f4:	f7ff fe77 	bl	80002e6 <LCD_goto>
		  strtoINT(j,sizeof(j));
 80005f8:	8afb      	ldrh	r3, [r7, #22]
 80005fa:	2102      	movs	r1, #2
 80005fc:	4618      	mov	r0, r3
 80005fe:	f7ff fda5 	bl	800014c <strtoINT>
		  HAL_Delay(2000);
 8000602:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000606:	f000 faf1 	bl	8000bec <HAL_Delay>
	  for(uint16_t j = 25; j<= 125; j += 5){
 800060a:	8afb      	ldrh	r3, [r7, #22]
 800060c:	3305      	adds	r3, #5
 800060e:	82fb      	strh	r3, [r7, #22]
 8000610:	8afb      	ldrh	r3, [r7, #22]
 8000612:	2b7d      	cmp	r3, #125	; 0x7d
 8000614:	d9e4      	bls.n	80005e0 <main+0x4c>
	  }
	  htim1.Instance -> CCR1 = 75;
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <main+0xa4>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	224b      	movs	r2, #75	; 0x4b
 800061c:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 800061e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000622:	f000 fae3 	bl	8000bec <HAL_Delay>
	  htim1.Instance -> CCR1 = 125;
 8000626:	4b04      	ldr	r3, [pc, #16]	; (8000638 <main+0xa4>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	227d      	movs	r2, #125	; 0x7d
 800062c:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(2000);
 800062e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000632:	f000 fadb 	bl	8000bec <HAL_Delay>
	  HAL_GPIO_TogglePin(led_panel_GPIO_Port, led_panel_Pin);
 8000636:	e7cb      	b.n	80005d0 <main+0x3c>
 8000638:	20000098 	.word	0x20000098
 800063c:	200000e0 	.word	0x200000e0
 8000640:	40011000 	.word	0x40011000

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b090      	sub	sp, #64	; 0x40
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 0318 	add.w	r3, r7, #24
 800064e:	2228      	movs	r2, #40	; 0x28
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f002 f946 	bl	80028e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]
 8000664:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000666:	2302      	movs	r3, #2
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066a:	2301      	movs	r3, #1
 800066c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066e:	2310      	movs	r3, #16
 8000670:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000672:	2302      	movs	r3, #2
 8000674:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000676:	2300      	movs	r3, #0
 8000678:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800067a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0318 	add.w	r3, r7, #24
 8000684:	4618      	mov	r0, r3
 8000686:	f000 fd6d 	bl	8001164 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000690:	f000 f818 	bl	80006c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 ffd9 	bl	8001664 <HAL_RCC_ClockConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006b8:	f000 f804 	bl	80006c4 <Error_Handler>
  }
}
 80006bc:	bf00      	nop
 80006be:	3740      	adds	r7, #64	; 0x40
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ca:	e7fe      	b.n	80006ca <Error_Handler+0x6>

080006cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_MspInit+0x5c>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	4a14      	ldr	r2, [pc, #80]	; (8000728 <HAL_MspInit+0x5c>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6193      	str	r3, [r2, #24]
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <HAL_MspInit+0x5c>)
 80006e0:	699b      	ldr	r3, [r3, #24]
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <HAL_MspInit+0x5c>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <HAL_MspInit+0x5c>)
 80006f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f4:	61d3      	str	r3, [r2, #28]
 80006f6:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <HAL_MspInit+0x5c>)
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000702:	4b0a      	ldr	r3, [pc, #40]	; (800072c <HAL_MspInit+0x60>)
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	4a04      	ldr	r2, [pc, #16]	; (800072c <HAL_MspInit+0x60>)
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071e:	bf00      	nop
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	40021000 	.word	0x40021000
 800072c:	40010000 	.word	0x40010000

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <NMI_Handler+0x4>

08000736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073a:	e7fe      	b.n	800073a <HardFault_Handler+0x4>

0800073c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000740:	e7fe      	b.n	8000740 <MemManage_Handler+0x4>

08000742 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <BusFault_Handler+0x4>

08000748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <UsageFault_Handler+0x4>

0800074e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr

0800075a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075e:	bf00      	nop
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	46bd      	mov	sp, r7
 800076e:	bc80      	pop	{r7}
 8000770:	4770      	bx	lr

08000772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000772:	b580      	push	{r7, lr}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000776:	f000 fa1d 	bl	8000bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <TIM2_IRQHandler+0x10>)
 8000786:	f001 fa73 	bl	8001c70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000e0 	.word	0x200000e0

08000794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800079c:	4a14      	ldr	r2, [pc, #80]	; (80007f0 <_sbrk+0x5c>)
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <_sbrk+0x60>)
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <_sbrk+0x64>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d102      	bne.n	80007b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007b0:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <_sbrk+0x64>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	; (80007fc <_sbrk+0x68>)
 80007b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007b6:	4b10      	ldr	r3, [pc, #64]	; (80007f8 <_sbrk+0x64>)
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4413      	add	r3, r2
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d207      	bcs.n	80007d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007c4:	f002 f864 	bl	8002890 <__errno>
 80007c8:	4602      	mov	r2, r0
 80007ca:	230c      	movs	r3, #12
 80007cc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007d2:	e009      	b.n	80007e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <_sbrk+0x64>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007da:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <_sbrk+0x64>)
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4413      	add	r3, r2
 80007e2:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <_sbrk+0x64>)
 80007e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007e6:	68fb      	ldr	r3, [r7, #12]
}
 80007e8:	4618      	mov	r0, r3
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20005000 	.word	0x20005000
 80007f4:	00000400 	.word	0x00000400
 80007f8:	2000008c 	.word	0x2000008c
 80007fc:	20000130 	.word	0x20000130

08000800 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000804:	bf00      	nop
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr

0800080c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b096      	sub	sp, #88	; 0x58
 8000810:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000812:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000820:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800082a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
 800083a:	615a      	str	r2, [r3, #20]
 800083c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2220      	movs	r2, #32
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f002 f84d 	bl	80028e4 <memset>

  htim1.Instance = TIM1;
 800084a:	4b45      	ldr	r3, [pc, #276]	; (8000960 <MX_TIM1_Init+0x154>)
 800084c:	4a45      	ldr	r2, [pc, #276]	; (8000964 <MX_TIM1_Init+0x158>)
 800084e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 319;
 8000850:	4b43      	ldr	r3, [pc, #268]	; (8000960 <MX_TIM1_Init+0x154>)
 8000852:	f240 123f 	movw	r2, #319	; 0x13f
 8000856:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000858:	4b41      	ldr	r3, [pc, #260]	; (8000960 <MX_TIM1_Init+0x154>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800085e:	4b40      	ldr	r3, [pc, #256]	; (8000960 <MX_TIM1_Init+0x154>)
 8000860:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000864:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000866:	4b3e      	ldr	r3, [pc, #248]	; (8000960 <MX_TIM1_Init+0x154>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800086c:	4b3c      	ldr	r3, [pc, #240]	; (8000960 <MX_TIM1_Init+0x154>)
 800086e:	2200      	movs	r2, #0
 8000870:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000872:	4b3b      	ldr	r3, [pc, #236]	; (8000960 <MX_TIM1_Init+0x154>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000878:	4839      	ldr	r0, [pc, #228]	; (8000960 <MX_TIM1_Init+0x154>)
 800087a:	f001 f85d 	bl	8001938 <HAL_TIM_Base_Init>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000884:	f7ff ff1e 	bl	80006c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000888:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800088e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000892:	4619      	mov	r1, r3
 8000894:	4832      	ldr	r0, [pc, #200]	; (8000960 <MX_TIM1_Init+0x154>)
 8000896:	f001 fbb1 	bl	8001ffc <HAL_TIM_ConfigClockSource>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80008a0:	f7ff ff10 	bl	80006c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80008a4:	482e      	ldr	r0, [pc, #184]	; (8000960 <MX_TIM1_Init+0x154>)
 80008a6:	f001 f8e9 	bl	8001a7c <HAL_TIM_PWM_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80008b0:	f7ff ff08 	bl	80006c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b4:	2300      	movs	r3, #0
 80008b6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008c0:	4619      	mov	r1, r3
 80008c2:	4827      	ldr	r0, [pc, #156]	; (8000960 <MX_TIM1_Init+0x154>)
 80008c4:	f001 ff22 	bl	800270c <HAL_TIMEx_MasterConfigSynchronization>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80008ce:	f7ff fef9 	bl	80006c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d2:	2360      	movs	r3, #96	; 0x60
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008da:	2300      	movs	r3, #0
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008de:	2300      	movs	r3, #0
 80008e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008e6:	2300      	movs	r3, #0
 80008e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008ea:	2300      	movs	r3, #0
 80008ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	2200      	movs	r2, #0
 80008f4:	4619      	mov	r1, r3
 80008f6:	481a      	ldr	r0, [pc, #104]	; (8000960 <MX_TIM1_Init+0x154>)
 80008f8:	f001 fac2 	bl	8001e80 <HAL_TIM_PWM_ConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000902:	f7ff fedf 	bl	80006c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090a:	2204      	movs	r2, #4
 800090c:	4619      	mov	r1, r3
 800090e:	4814      	ldr	r0, [pc, #80]	; (8000960 <MX_TIM1_Init+0x154>)
 8000910:	f001 fab6 	bl	8001e80 <HAL_TIM_PWM_ConfigChannel>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 800091a:	f7ff fed3 	bl	80006c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000932:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000936:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4619      	mov	r1, r3
 8000940:	4807      	ldr	r0, [pc, #28]	; (8000960 <MX_TIM1_Init+0x154>)
 8000942:	f001 ff41 	bl	80027c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800094c:	f7ff feba 	bl	80006c4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000950:	4803      	ldr	r0, [pc, #12]	; (8000960 <MX_TIM1_Init+0x154>)
 8000952:	f000 f88f 	bl	8000a74 <HAL_TIM_MspPostInit>

}
 8000956:	bf00      	nop
 8000958:	3758      	adds	r7, #88	; 0x58
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000098 	.word	0x20000098
 8000964:	40012c00 	.word	0x40012c00

08000968 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096e:	f107 0308 	add.w	r3, r7, #8
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097c:	463b      	mov	r3, r7
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8000984:	4b1e      	ldr	r3, [pc, #120]	; (8000a00 <MX_TIM2_Init+0x98>)
 8000986:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800098a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800098c:	4b1c      	ldr	r3, [pc, #112]	; (8000a00 <MX_TIM2_Init+0x98>)
 800098e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000992:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000994:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <MX_TIM2_Init+0x98>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800099a:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <MX_TIM2_Init+0x98>)
 800099c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <MX_TIM2_Init+0x98>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <MX_TIM2_Init+0x98>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ae:	4814      	ldr	r0, [pc, #80]	; (8000a00 <MX_TIM2_Init+0x98>)
 80009b0:	f000 ffc2 	bl	8001938 <HAL_TIM_Base_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80009ba:	f7ff fe83 	bl	80006c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009c4:	f107 0308 	add.w	r3, r7, #8
 80009c8:	4619      	mov	r1, r3
 80009ca:	480d      	ldr	r0, [pc, #52]	; (8000a00 <MX_TIM2_Init+0x98>)
 80009cc:	f001 fb16 	bl	8001ffc <HAL_TIM_ConfigClockSource>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80009d6:	f7ff fe75 	bl	80006c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009da:	2300      	movs	r3, #0
 80009dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009e2:	463b      	mov	r3, r7
 80009e4:	4619      	mov	r1, r3
 80009e6:	4806      	ldr	r0, [pc, #24]	; (8000a00 <MX_TIM2_Init+0x98>)
 80009e8:	f001 fe90 	bl	800270c <HAL_TIMEx_MasterConfigSynchronization>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80009f2:	f7ff fe67 	bl	80006c4 <Error_Handler>
  }

}
 80009f6:	bf00      	nop
 80009f8:	3718      	adds	r7, #24
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000e0 	.word	0x200000e0

08000a04 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a16      	ldr	r2, [pc, #88]	; (8000a6c <HAL_TIM_Base_MspInit+0x68>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d10c      	bne.n	8000a30 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <HAL_TIM_Base_MspInit+0x6c>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	4a15      	ldr	r2, [pc, #84]	; (8000a70 <HAL_TIM_Base_MspInit+0x6c>)
 8000a1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a20:	6193      	str	r3, [r2, #24]
 8000a22:	4b13      	ldr	r3, [pc, #76]	; (8000a70 <HAL_TIM_Base_MspInit+0x6c>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000a2e:	e018      	b.n	8000a62 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a38:	d113      	bne.n	8000a62 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <HAL_TIM_Base_MspInit+0x6c>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	4a0c      	ldr	r2, [pc, #48]	; (8000a70 <HAL_TIM_Base_MspInit+0x6c>)
 8000a40:	f043 0301 	orr.w	r3, r3, #1
 8000a44:	61d3      	str	r3, [r2, #28]
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <HAL_TIM_Base_MspInit+0x6c>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2100      	movs	r1, #0
 8000a56:	201c      	movs	r0, #28
 8000a58:	f000 f9c1 	bl	8000dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a5c:	201c      	movs	r0, #28
 8000a5e:	f000 f9da 	bl	8000e16 <HAL_NVIC_EnableIRQ>
}
 8000a62:	bf00      	nop
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40012c00 	.word	0x40012c00
 8000a70:	40021000 	.word	0x40021000

08000a74 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a10      	ldr	r2, [pc, #64]	; (8000ad0 <HAL_TIM_MspPostInit+0x5c>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d118      	bne.n	8000ac6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <HAL_TIM_MspPostInit+0x60>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <HAL_TIM_MspPostInit+0x60>)
 8000a9a:	f043 0304 	orr.w	r3, r3, #4
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <HAL_TIM_MspPostInit+0x60>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0304 	and.w	r3, r3, #4
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000aac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ab0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aba:	f107 0310 	add.w	r3, r7, #16
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <HAL_TIM_MspPostInit+0x64>)
 8000ac2:	f000 f9c3 	bl	8000e4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000ac6:	bf00      	nop
 8000ac8:	3720      	adds	r7, #32
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40012c00 	.word	0x40012c00
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40010800 	.word	0x40010800

08000adc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000adc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ade:	e003      	b.n	8000ae8 <LoopCopyDataInit>

08000ae0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ae2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ae4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ae6:	3104      	adds	r1, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ae8:	480a      	ldr	r0, [pc, #40]	; (8000b14 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000aec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000aee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000af0:	d3f6      	bcc.n	8000ae0 <CopyDataInit>
  ldr r2, =_sbss
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000af4:	e002      	b.n	8000afc <LoopFillZerobss>

08000af6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000af8:	f842 3b04 	str.w	r3, [r2], #4

08000afc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000afe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b00:	d3f9      	bcc.n	8000af6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b02:	f7ff fe7d 	bl	8000800 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b06:	f001 fec9 	bl	800289c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b0a:	f7ff fd43 	bl	8000594 <main>
  bx lr
 8000b0e:	4770      	bx	lr
  ldr r3, =_sidata
 8000b10:	080031a8 	.word	0x080031a8
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b18:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000b1c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000b20:	20000130 	.word	0x20000130

08000b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC1_2_IRQHandler>
	...

08000b28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b2c:	4b08      	ldr	r3, [pc, #32]	; (8000b50 <HAL_Init+0x28>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a07      	ldr	r2, [pc, #28]	; (8000b50 <HAL_Init+0x28>)
 8000b32:	f043 0310 	orr.w	r3, r3, #16
 8000b36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b38:	2003      	movs	r0, #3
 8000b3a:	f000 f945 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3e:	2000      	movs	r0, #0
 8000b40:	f000 f808 	bl	8000b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b44:	f7ff fdc2 	bl	80006cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40022000 	.word	0x40022000

08000b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_InitTick+0x54>)
 8000b5e:	681a      	ldr	r2, [r3, #0]
 8000b60:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_InitTick+0x58>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	4619      	mov	r1, r3
 8000b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b72:	4618      	mov	r0, r3
 8000b74:	f000 f95d 	bl	8000e32 <HAL_SYSTICK_Config>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	e00e      	b.n	8000ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b0f      	cmp	r3, #15
 8000b86:	d80a      	bhi.n	8000b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	6879      	ldr	r1, [r7, #4]
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	f000 f925 	bl	8000dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b94:	4a06      	ldr	r2, [pc, #24]	; (8000bb0 <HAL_InitTick+0x5c>)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e000      	b.n	8000ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	20000000 	.word	0x20000000
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000004 	.word	0x20000004

08000bb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb8:	4b05      	ldr	r3, [pc, #20]	; (8000bd0 <HAL_IncTick+0x1c>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	4a03      	ldr	r2, [pc, #12]	; (8000bd4 <HAL_IncTick+0x20>)
 8000bc6:	6013      	str	r3, [r2, #0]
}
 8000bc8:	bf00      	nop
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr
 8000bd0:	20000008 	.word	0x20000008
 8000bd4:	20000128 	.word	0x20000128

08000bd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b02      	ldr	r3, [pc, #8]	; (8000be8 <HAL_GetTick+0x10>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	20000128 	.word	0x20000128

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff fff0 	bl	8000bd8 <HAL_GetTick>
 8000bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <HAL_Delay+0x40>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c12:	bf00      	nop
 8000c14:	f7ff ffe0 	bl	8000bd8 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000008 	.word	0x20000008

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0b      	blt.n	8000cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	4906      	ldr	r1, [pc, #24]	; (8000cc8 <__NVIC_EnableIRQ+0x34>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100

08000ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	6039      	str	r1, [r7, #0]
 8000cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	db0a      	blt.n	8000cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	490c      	ldr	r1, [pc, #48]	; (8000d18 <__NVIC_SetPriority+0x4c>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	0112      	lsls	r2, r2, #4
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	440b      	add	r3, r1
 8000cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf4:	e00a      	b.n	8000d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4908      	ldr	r1, [pc, #32]	; (8000d1c <__NVIC_SetPriority+0x50>)
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	f003 030f 	and.w	r3, r3, #15
 8000d02:	3b04      	subs	r3, #4
 8000d04:	0112      	lsls	r2, r2, #4
 8000d06:	b2d2      	uxtb	r2, r2
 8000d08:	440b      	add	r3, r1
 8000d0a:	761a      	strb	r2, [r3, #24]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000e100 	.word	0xe000e100
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	; 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	f1c3 0307 	rsb	r3, r3, #7
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	bf28      	it	cs
 8000d3e:	2304      	movcs	r3, #4
 8000d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3304      	adds	r3, #4
 8000d46:	2b06      	cmp	r3, #6
 8000d48:	d902      	bls.n	8000d50 <NVIC_EncodePriority+0x30>
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3b03      	subs	r3, #3
 8000d4e:	e000      	b.n	8000d52 <NVIC_EncodePriority+0x32>
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43da      	mvns	r2, r3
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	401a      	ands	r2, r3
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	43d9      	mvns	r1, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	4313      	orrs	r3, r2
         );
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3724      	adds	r7, #36	; 0x24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d94:	d301      	bcc.n	8000d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00f      	b.n	8000dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <SysTick_Config+0x40>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da2:	210f      	movs	r1, #15
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000da8:	f7ff ff90 	bl	8000ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SysTick_Config+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SysTick_Config+0x40>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff2d 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df0:	f7ff ff42 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000df4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff ff90 	bl	8000d20 <NVIC_EncodePriority>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff5f 	bl	8000ccc <__NVIC_SetPriority>
}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff35 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ffa2 	bl	8000d84 <SysTick_Config>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b08b      	sub	sp, #44	; 0x2c
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e56:	2300      	movs	r3, #0
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5e:	e127      	b.n	80010b0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e60:	2201      	movs	r2, #1
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	69fa      	ldr	r2, [r7, #28]
 8000e70:	4013      	ands	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	f040 8116 	bne.w	80010aa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b12      	cmp	r3, #18
 8000e84:	d034      	beq.n	8000ef0 <HAL_GPIO_Init+0xa4>
 8000e86:	2b12      	cmp	r3, #18
 8000e88:	d80d      	bhi.n	8000ea6 <HAL_GPIO_Init+0x5a>
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d02b      	beq.n	8000ee6 <HAL_GPIO_Init+0x9a>
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d804      	bhi.n	8000e9c <HAL_GPIO_Init+0x50>
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d031      	beq.n	8000efa <HAL_GPIO_Init+0xae>
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d01c      	beq.n	8000ed4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e9a:	e048      	b.n	8000f2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000e9c:	2b03      	cmp	r3, #3
 8000e9e:	d043      	beq.n	8000f28 <HAL_GPIO_Init+0xdc>
 8000ea0:	2b11      	cmp	r3, #17
 8000ea2:	d01b      	beq.n	8000edc <HAL_GPIO_Init+0x90>
          break;
 8000ea4:	e043      	b.n	8000f2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ea6:	4a89      	ldr	r2, [pc, #548]	; (80010cc <HAL_GPIO_Init+0x280>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d026      	beq.n	8000efa <HAL_GPIO_Init+0xae>
 8000eac:	4a87      	ldr	r2, [pc, #540]	; (80010cc <HAL_GPIO_Init+0x280>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d806      	bhi.n	8000ec0 <HAL_GPIO_Init+0x74>
 8000eb2:	4a87      	ldr	r2, [pc, #540]	; (80010d0 <HAL_GPIO_Init+0x284>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d020      	beq.n	8000efa <HAL_GPIO_Init+0xae>
 8000eb8:	4a86      	ldr	r2, [pc, #536]	; (80010d4 <HAL_GPIO_Init+0x288>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d01d      	beq.n	8000efa <HAL_GPIO_Init+0xae>
          break;
 8000ebe:	e036      	b.n	8000f2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ec0:	4a85      	ldr	r2, [pc, #532]	; (80010d8 <HAL_GPIO_Init+0x28c>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d019      	beq.n	8000efa <HAL_GPIO_Init+0xae>
 8000ec6:	4a85      	ldr	r2, [pc, #532]	; (80010dc <HAL_GPIO_Init+0x290>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d016      	beq.n	8000efa <HAL_GPIO_Init+0xae>
 8000ecc:	4a84      	ldr	r2, [pc, #528]	; (80010e0 <HAL_GPIO_Init+0x294>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d013      	beq.n	8000efa <HAL_GPIO_Init+0xae>
          break;
 8000ed2:	e02c      	b.n	8000f2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	623b      	str	r3, [r7, #32]
          break;
 8000eda:	e028      	b.n	8000f2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	623b      	str	r3, [r7, #32]
          break;
 8000ee4:	e023      	b.n	8000f2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	3308      	adds	r3, #8
 8000eec:	623b      	str	r3, [r7, #32]
          break;
 8000eee:	e01e      	b.n	8000f2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	330c      	adds	r3, #12
 8000ef6:	623b      	str	r3, [r7, #32]
          break;
 8000ef8:	e019      	b.n	8000f2e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d102      	bne.n	8000f08 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f02:	2304      	movs	r3, #4
 8000f04:	623b      	str	r3, [r7, #32]
          break;
 8000f06:	e012      	b.n	8000f2e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d105      	bne.n	8000f1c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f10:	2308      	movs	r3, #8
 8000f12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	69fa      	ldr	r2, [r7, #28]
 8000f18:	611a      	str	r2, [r3, #16]
          break;
 8000f1a:	e008      	b.n	8000f2e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	69fa      	ldr	r2, [r7, #28]
 8000f24:	615a      	str	r2, [r3, #20]
          break;
 8000f26:	e002      	b.n	8000f2e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
          break;
 8000f2c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	2bff      	cmp	r3, #255	; 0xff
 8000f32:	d801      	bhi.n	8000f38 <HAL_GPIO_Init+0xec>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	e001      	b.n	8000f3c <HAL_GPIO_Init+0xf0>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	2bff      	cmp	r3, #255	; 0xff
 8000f42:	d802      	bhi.n	8000f4a <HAL_GPIO_Init+0xfe>
 8000f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	e002      	b.n	8000f50 <HAL_GPIO_Init+0x104>
 8000f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4c:	3b08      	subs	r3, #8
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	210f      	movs	r1, #15
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	401a      	ands	r2, r3
 8000f62:	6a39      	ldr	r1, [r7, #32]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f000 8096 	beq.w	80010aa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f7e:	4b59      	ldr	r3, [pc, #356]	; (80010e4 <HAL_GPIO_Init+0x298>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	4a58      	ldr	r2, [pc, #352]	; (80010e4 <HAL_GPIO_Init+0x298>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6193      	str	r3, [r2, #24]
 8000f8a:	4b56      	ldr	r3, [pc, #344]	; (80010e4 <HAL_GPIO_Init+0x298>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000f96:	4a54      	ldr	r2, [pc, #336]	; (80010e8 <HAL_GPIO_Init+0x29c>)
 8000f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9a:	089b      	lsrs	r3, r3, #2
 8000f9c:	3302      	adds	r3, #2
 8000f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	f003 0303 	and.w	r3, r3, #3
 8000faa:	009b      	lsls	r3, r3, #2
 8000fac:	220f      	movs	r2, #15
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4b      	ldr	r2, [pc, #300]	; (80010ec <HAL_GPIO_Init+0x2a0>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d013      	beq.n	8000fea <HAL_GPIO_Init+0x19e>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4a      	ldr	r2, [pc, #296]	; (80010f0 <HAL_GPIO_Init+0x2a4>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d00d      	beq.n	8000fe6 <HAL_GPIO_Init+0x19a>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a49      	ldr	r2, [pc, #292]	; (80010f4 <HAL_GPIO_Init+0x2a8>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d007      	beq.n	8000fe2 <HAL_GPIO_Init+0x196>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a48      	ldr	r2, [pc, #288]	; (80010f8 <HAL_GPIO_Init+0x2ac>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d101      	bne.n	8000fde <HAL_GPIO_Init+0x192>
 8000fda:	2303      	movs	r3, #3
 8000fdc:	e006      	b.n	8000fec <HAL_GPIO_Init+0x1a0>
 8000fde:	2304      	movs	r3, #4
 8000fe0:	e004      	b.n	8000fec <HAL_GPIO_Init+0x1a0>
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	e002      	b.n	8000fec <HAL_GPIO_Init+0x1a0>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e000      	b.n	8000fec <HAL_GPIO_Init+0x1a0>
 8000fea:	2300      	movs	r3, #0
 8000fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fee:	f002 0203 	and.w	r2, r2, #3
 8000ff2:	0092      	lsls	r2, r2, #2
 8000ff4:	4093      	lsls	r3, r2
 8000ff6:	68fa      	ldr	r2, [r7, #12]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ffc:	493a      	ldr	r1, [pc, #232]	; (80010e8 <HAL_GPIO_Init+0x29c>)
 8000ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001000:	089b      	lsrs	r3, r3, #2
 8001002:	3302      	adds	r3, #2
 8001004:	68fa      	ldr	r2, [r7, #12]
 8001006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d006      	beq.n	8001024 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001016:	4b39      	ldr	r3, [pc, #228]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	4938      	ldr	r1, [pc, #224]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 800101c:	69bb      	ldr	r3, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	600b      	str	r3, [r1, #0]
 8001022:	e006      	b.n	8001032 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001024:	4b35      	ldr	r3, [pc, #212]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	43db      	mvns	r3, r3
 800102c:	4933      	ldr	r1, [pc, #204]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 800102e:	4013      	ands	r3, r2
 8001030:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d006      	beq.n	800104c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800103e:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	492e      	ldr	r1, [pc, #184]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	604b      	str	r3, [r1, #4]
 800104a:	e006      	b.n	800105a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800104c:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	43db      	mvns	r3, r3
 8001054:	4929      	ldr	r1, [pc, #164]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8001056:	4013      	ands	r3, r2
 8001058:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d006      	beq.n	8001074 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001066:	4b25      	ldr	r3, [pc, #148]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	4924      	ldr	r1, [pc, #144]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	608b      	str	r3, [r1, #8]
 8001072:	e006      	b.n	8001082 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001074:	4b21      	ldr	r3, [pc, #132]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	43db      	mvns	r3, r3
 800107c:	491f      	ldr	r1, [pc, #124]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 800107e:	4013      	ands	r3, r2
 8001080:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d006      	beq.n	800109c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800108e:	4b1b      	ldr	r3, [pc, #108]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	491a      	ldr	r1, [pc, #104]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	4313      	orrs	r3, r2
 8001098:	60cb      	str	r3, [r1, #12]
 800109a:	e006      	b.n	80010aa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800109c:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	4915      	ldr	r1, [pc, #84]	; (80010fc <HAL_GPIO_Init+0x2b0>)
 80010a6:	4013      	ands	r3, r2
 80010a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	3301      	adds	r3, #1
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	fa22 f303 	lsr.w	r3, r2, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	f47f aed0 	bne.w	8000e60 <HAL_GPIO_Init+0x14>
  }
}
 80010c0:	bf00      	nop
 80010c2:	372c      	adds	r7, #44	; 0x2c
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	10210000 	.word	0x10210000
 80010d0:	10110000 	.word	0x10110000
 80010d4:	10120000 	.word	0x10120000
 80010d8:	10310000 	.word	0x10310000
 80010dc:	10320000 	.word	0x10320000
 80010e0:	10220000 	.word	0x10220000
 80010e4:	40021000 	.word	0x40021000
 80010e8:	40010000 	.word	0x40010000
 80010ec:	40010800 	.word	0x40010800
 80010f0:	40010c00 	.word	0x40010c00
 80010f4:	40011000 	.word	0x40011000
 80010f8:	40011400 	.word	0x40011400
 80010fc:	40010400 	.word	0x40010400

08001100 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]
 800110c:	4613      	mov	r3, r2
 800110e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001110:	787b      	ldrb	r3, [r7, #1]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001116:	887a      	ldrh	r2, [r7, #2]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800111c:	e003      	b.n	8001126 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	041a      	lsls	r2, r3, #16
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	611a      	str	r2, [r3, #16]
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr

08001130 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001142:	887a      	ldrh	r2, [r7, #2]
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4013      	ands	r3, r2
 8001148:	041a      	lsls	r2, r3, #16
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	43d9      	mvns	r1, r3
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	400b      	ands	r3, r1
 8001152:	431a      	orrs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	611a      	str	r2, [r3, #16]
}
 8001158:	bf00      	nop
 800115a:	3714      	adds	r7, #20
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
	...

08001164 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e26c      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 8087 	beq.w	8001292 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001184:	4b92      	ldr	r3, [pc, #584]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 030c 	and.w	r3, r3, #12
 800118c:	2b04      	cmp	r3, #4
 800118e:	d00c      	beq.n	80011aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001190:	4b8f      	ldr	r3, [pc, #572]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 030c 	and.w	r3, r3, #12
 8001198:	2b08      	cmp	r3, #8
 800119a:	d112      	bne.n	80011c2 <HAL_RCC_OscConfig+0x5e>
 800119c:	4b8c      	ldr	r3, [pc, #560]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a8:	d10b      	bne.n	80011c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011aa:	4b89      	ldr	r3, [pc, #548]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d06c      	beq.n	8001290 <HAL_RCC_OscConfig+0x12c>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d168      	bne.n	8001290 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e246      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ca:	d106      	bne.n	80011da <HAL_RCC_OscConfig+0x76>
 80011cc:	4b80      	ldr	r3, [pc, #512]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a7f      	ldr	r2, [pc, #508]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80011d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	e02e      	b.n	8001238 <HAL_RCC_OscConfig+0xd4>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10c      	bne.n	80011fc <HAL_RCC_OscConfig+0x98>
 80011e2:	4b7b      	ldr	r3, [pc, #492]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a7a      	ldr	r2, [pc, #488]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80011e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a77      	ldr	r2, [pc, #476]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80011f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	e01d      	b.n	8001238 <HAL_RCC_OscConfig+0xd4>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001204:	d10c      	bne.n	8001220 <HAL_RCC_OscConfig+0xbc>
 8001206:	4b72      	ldr	r3, [pc, #456]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a71      	ldr	r2, [pc, #452]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 800120c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	4b6f      	ldr	r3, [pc, #444]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a6e      	ldr	r2, [pc, #440]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	e00b      	b.n	8001238 <HAL_RCC_OscConfig+0xd4>
 8001220:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a6a      	ldr	r2, [pc, #424]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001226:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122a:	6013      	str	r3, [r2, #0]
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a67      	ldr	r2, [pc, #412]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001236:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d013      	beq.n	8001268 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001240:	f7ff fcca 	bl	8000bd8 <HAL_GetTick>
 8001244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001246:	e008      	b.n	800125a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001248:	f7ff fcc6 	bl	8000bd8 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	2b64      	cmp	r3, #100	; 0x64
 8001254:	d901      	bls.n	800125a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e1fa      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125a:	4b5d      	ldr	r3, [pc, #372]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d0f0      	beq.n	8001248 <HAL_RCC_OscConfig+0xe4>
 8001266:	e014      	b.n	8001292 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001268:	f7ff fcb6 	bl	8000bd8 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001270:	f7ff fcb2 	bl	8000bd8 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b64      	cmp	r3, #100	; 0x64
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e1e6      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001282:	4b53      	ldr	r3, [pc, #332]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f0      	bne.n	8001270 <HAL_RCC_OscConfig+0x10c>
 800128e:	e000      	b.n	8001292 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d063      	beq.n	8001366 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800129e:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f003 030c 	and.w	r3, r3, #12
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00b      	beq.n	80012c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80012aa:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d11c      	bne.n	80012f0 <HAL_RCC_OscConfig+0x18c>
 80012b6:	4b46      	ldr	r3, [pc, #280]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d116      	bne.n	80012f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c2:	4b43      	ldr	r3, [pc, #268]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <HAL_RCC_OscConfig+0x176>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d001      	beq.n	80012da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e1ba      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012da:	4b3d      	ldr	r3, [pc, #244]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	4939      	ldr	r1, [pc, #228]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	4313      	orrs	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012ee:	e03a      	b.n	8001366 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d020      	beq.n	800133a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012f8:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fe:	f7ff fc6b 	bl	8000bd8 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001306:	f7ff fc67 	bl	8000bd8 <HAL_GetTick>
 800130a:	4602      	mov	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e19b      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001318:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001324:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	4927      	ldr	r1, [pc, #156]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 8001334:	4313      	orrs	r3, r2
 8001336:	600b      	str	r3, [r1, #0]
 8001338:	e015      	b.n	8001366 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800133a:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <HAL_RCC_OscConfig+0x270>)
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fc4a 	bl	8000bd8 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001348:	f7ff fc46 	bl	8000bd8 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b02      	cmp	r3, #2
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e17a      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d03a      	beq.n	80013e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d019      	beq.n	80013ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800137a:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_RCC_OscConfig+0x274>)
 800137c:	2201      	movs	r2, #1
 800137e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001380:	f7ff fc2a 	bl	8000bd8 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001388:	f7ff fc26 	bl	8000bd8 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e15a      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139a:	4b0d      	ldr	r3, [pc, #52]	; (80013d0 <HAL_RCC_OscConfig+0x26c>)
 800139c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d0f0      	beq.n	8001388 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80013a6:	2001      	movs	r0, #1
 80013a8:	f000 faa8 	bl	80018fc <RCC_Delay>
 80013ac:	e01c      	b.n	80013e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ae:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <HAL_RCC_OscConfig+0x274>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013b4:	f7ff fc10 	bl	8000bd8 <HAL_GetTick>
 80013b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ba:	e00f      	b.n	80013dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013bc:	f7ff fc0c 	bl	8000bd8 <HAL_GetTick>
 80013c0:	4602      	mov	r2, r0
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d908      	bls.n	80013dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e140      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000
 80013d4:	42420000 	.word	0x42420000
 80013d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013dc:	4b9e      	ldr	r3, [pc, #632]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1e9      	bne.n	80013bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	f000 80a6 	beq.w	8001542 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013fa:	4b97      	ldr	r3, [pc, #604]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80013fc:	69db      	ldr	r3, [r3, #28]
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d10d      	bne.n	8001422 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	4b94      	ldr	r3, [pc, #592]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 8001408:	69db      	ldr	r3, [r3, #28]
 800140a:	4a93      	ldr	r2, [pc, #588]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	61d3      	str	r3, [r2, #28]
 8001412:	4b91      	ldr	r3, [pc, #580]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800141e:	2301      	movs	r3, #1
 8001420:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001422:	4b8e      	ldr	r3, [pc, #568]	; (800165c <HAL_RCC_OscConfig+0x4f8>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142a:	2b00      	cmp	r3, #0
 800142c:	d118      	bne.n	8001460 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800142e:	4b8b      	ldr	r3, [pc, #556]	; (800165c <HAL_RCC_OscConfig+0x4f8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a8a      	ldr	r2, [pc, #552]	; (800165c <HAL_RCC_OscConfig+0x4f8>)
 8001434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001438:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800143a:	f7ff fbcd 	bl	8000bd8 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001442:	f7ff fbc9 	bl	8000bd8 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b64      	cmp	r3, #100	; 0x64
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e0fd      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001454:	4b81      	ldr	r3, [pc, #516]	; (800165c <HAL_RCC_OscConfig+0x4f8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d106      	bne.n	8001476 <HAL_RCC_OscConfig+0x312>
 8001468:	4b7b      	ldr	r3, [pc, #492]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 800146a:	6a1b      	ldr	r3, [r3, #32]
 800146c:	4a7a      	ldr	r2, [pc, #488]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 800146e:	f043 0301 	orr.w	r3, r3, #1
 8001472:	6213      	str	r3, [r2, #32]
 8001474:	e02d      	b.n	80014d2 <HAL_RCC_OscConfig+0x36e>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10c      	bne.n	8001498 <HAL_RCC_OscConfig+0x334>
 800147e:	4b76      	ldr	r3, [pc, #472]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	4a75      	ldr	r2, [pc, #468]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 8001484:	f023 0301 	bic.w	r3, r3, #1
 8001488:	6213      	str	r3, [r2, #32]
 800148a:	4b73      	ldr	r3, [pc, #460]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	4a72      	ldr	r2, [pc, #456]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 8001490:	f023 0304 	bic.w	r3, r3, #4
 8001494:	6213      	str	r3, [r2, #32]
 8001496:	e01c      	b.n	80014d2 <HAL_RCC_OscConfig+0x36e>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b05      	cmp	r3, #5
 800149e:	d10c      	bne.n	80014ba <HAL_RCC_OscConfig+0x356>
 80014a0:	4b6d      	ldr	r3, [pc, #436]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4a6c      	ldr	r2, [pc, #432]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80014a6:	f043 0304 	orr.w	r3, r3, #4
 80014aa:	6213      	str	r3, [r2, #32]
 80014ac:	4b6a      	ldr	r3, [pc, #424]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80014ae:	6a1b      	ldr	r3, [r3, #32]
 80014b0:	4a69      	ldr	r2, [pc, #420]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80014b2:	f043 0301 	orr.w	r3, r3, #1
 80014b6:	6213      	str	r3, [r2, #32]
 80014b8:	e00b      	b.n	80014d2 <HAL_RCC_OscConfig+0x36e>
 80014ba:	4b67      	ldr	r3, [pc, #412]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	4a66      	ldr	r2, [pc, #408]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80014c0:	f023 0301 	bic.w	r3, r3, #1
 80014c4:	6213      	str	r3, [r2, #32]
 80014c6:	4b64      	ldr	r3, [pc, #400]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	4a63      	ldr	r2, [pc, #396]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80014cc:	f023 0304 	bic.w	r3, r3, #4
 80014d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d015      	beq.n	8001506 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014da:	f7ff fb7d 	bl	8000bd8 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e0:	e00a      	b.n	80014f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e2:	f7ff fb79 	bl	8000bd8 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e0ab      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f8:	4b57      	ldr	r3, [pc, #348]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0ee      	beq.n	80014e2 <HAL_RCC_OscConfig+0x37e>
 8001504:	e014      	b.n	8001530 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001506:	f7ff fb67 	bl	8000bd8 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800150c:	e00a      	b.n	8001524 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150e:	f7ff fb63 	bl	8000bd8 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	f241 3288 	movw	r2, #5000	; 0x1388
 800151c:	4293      	cmp	r3, r2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e095      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001524:	4b4c      	ldr	r3, [pc, #304]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1ee      	bne.n	800150e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001530:	7dfb      	ldrb	r3, [r7, #23]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d105      	bne.n	8001542 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001536:	4b48      	ldr	r3, [pc, #288]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	4a47      	ldr	r2, [pc, #284]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 800153c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001540:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 8081 	beq.w	800164e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800154c:	4b42      	ldr	r3, [pc, #264]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f003 030c 	and.w	r3, r3, #12
 8001554:	2b08      	cmp	r3, #8
 8001556:	d061      	beq.n	800161c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	69db      	ldr	r3, [r3, #28]
 800155c:	2b02      	cmp	r3, #2
 800155e:	d146      	bne.n	80015ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001560:	4b3f      	ldr	r3, [pc, #252]	; (8001660 <HAL_RCC_OscConfig+0x4fc>)
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001566:	f7ff fb37 	bl	8000bd8 <HAL_GetTick>
 800156a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156e:	f7ff fb33 	bl	8000bd8 <HAL_GetTick>
 8001572:	4602      	mov	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e067      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001580:	4b35      	ldr	r3, [pc, #212]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1f0      	bne.n	800156e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001594:	d108      	bne.n	80015a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001596:	4b30      	ldr	r3, [pc, #192]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	492d      	ldr	r1, [pc, #180]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a8:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a19      	ldr	r1, [r3, #32]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b8:	430b      	orrs	r3, r1
 80015ba:	4927      	ldr	r1, [pc, #156]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015c0:	4b27      	ldr	r3, [pc, #156]	; (8001660 <HAL_RCC_OscConfig+0x4fc>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7ff fb07 	bl	8000bd8 <HAL_GetTick>
 80015ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015cc:	e008      	b.n	80015e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ce:	f7ff fb03 	bl	8000bd8 <HAL_GetTick>
 80015d2:	4602      	mov	r2, r0
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	1ad3      	subs	r3, r2, r3
 80015d8:	2b02      	cmp	r3, #2
 80015da:	d901      	bls.n	80015e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80015dc:	2303      	movs	r3, #3
 80015de:	e037      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015e0:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0f0      	beq.n	80015ce <HAL_RCC_OscConfig+0x46a>
 80015ec:	e02f      	b.n	800164e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ee:	4b1c      	ldr	r3, [pc, #112]	; (8001660 <HAL_RCC_OscConfig+0x4fc>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff faf0 	bl	8000bd8 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fc:	f7ff faec 	bl	8000bd8 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e020      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160e:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x498>
 800161a:	e018      	b.n	800164e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d101      	bne.n	8001628 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e013      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_RCC_OscConfig+0x4f4>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	429a      	cmp	r2, r3
 800163a:	d106      	bne.n	800164a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001646:	429a      	cmp	r2, r3
 8001648:	d001      	beq.n	800164e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40021000 	.word	0x40021000
 800165c:	40007000 	.word	0x40007000
 8001660:	42420060 	.word	0x42420060

08001664 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0d0      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001678:	4b6a      	ldr	r3, [pc, #424]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	429a      	cmp	r2, r3
 8001684:	d910      	bls.n	80016a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001686:	4b67      	ldr	r3, [pc, #412]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f023 0207 	bic.w	r2, r3, #7
 800168e:	4965      	ldr	r1, [pc, #404]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	4313      	orrs	r3, r2
 8001694:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b63      	ldr	r3, [pc, #396]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0b8      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d020      	beq.n	80016f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c0:	4b59      	ldr	r3, [pc, #356]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a58      	ldr	r2, [pc, #352]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0308 	and.w	r3, r3, #8
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016d8:	4b53      	ldr	r3, [pc, #332]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	4a52      	ldr	r2, [pc, #328]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e4:	4b50      	ldr	r3, [pc, #320]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	494d      	ldr	r1, [pc, #308]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d040      	beq.n	8001784 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d107      	bne.n	800171a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	4b47      	ldr	r3, [pc, #284]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d115      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e07f      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d107      	bne.n	8001732 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001722:	4b41      	ldr	r3, [pc, #260]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d109      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e073      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e06b      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001742:	4b39      	ldr	r3, [pc, #228]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f023 0203 	bic.w	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4936      	ldr	r1, [pc, #216]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	4313      	orrs	r3, r2
 8001752:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001754:	f7ff fa40 	bl	8000bd8 <HAL_GetTick>
 8001758:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175a:	e00a      	b.n	8001772 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175c:	f7ff fa3c 	bl	8000bd8 <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	; 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e053      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	4b2d      	ldr	r3, [pc, #180]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 020c 	and.w	r2, r3, #12
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	429a      	cmp	r2, r3
 8001782:	d1eb      	bne.n	800175c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	683a      	ldr	r2, [r7, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d210      	bcs.n	80017b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001792:	4b24      	ldr	r3, [pc, #144]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f023 0207 	bic.w	r2, r3, #7
 800179a:	4922      	ldr	r1, [pc, #136]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	4313      	orrs	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b20      	ldr	r3, [pc, #128]	; (8001824 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e032      	b.n	800181a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d008      	beq.n	80017d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	4916      	ldr	r1, [pc, #88]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d009      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	490e      	ldr	r1, [pc, #56]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	4313      	orrs	r3, r2
 80017f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017f2:	f000 f821 	bl	8001838 <HAL_RCC_GetSysClockFreq>
 80017f6:	4601      	mov	r1, r0
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	4a0a      	ldr	r2, [pc, #40]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 8001804:	5cd3      	ldrb	r3, [r2, r3]
 8001806:	fa21 f303 	lsr.w	r3, r1, r3
 800180a:	4a09      	ldr	r2, [pc, #36]	; (8001830 <HAL_RCC_ClockConfig+0x1cc>)
 800180c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_RCC_ClockConfig+0x1d0>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff f99e 	bl	8000b54 <HAL_InitTick>

  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40022000 	.word	0x40022000
 8001828:	40021000 	.word	0x40021000
 800182c:	0800315c 	.word	0x0800315c
 8001830:	20000000 	.word	0x20000000
 8001834:	20000004 	.word	0x20000004

08001838 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001838:	b490      	push	{r4, r7}
 800183a:	b08a      	sub	sp, #40	; 0x28
 800183c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800183e:	4b2a      	ldr	r3, [pc, #168]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001840:	1d3c      	adds	r4, r7, #4
 8001842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001848:	4b28      	ldr	r3, [pc, #160]	; (80018ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
 800185a:	2300      	movs	r3, #0
 800185c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800185e:	2300      	movs	r3, #0
 8001860:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001862:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f003 030c 	and.w	r3, r3, #12
 800186e:	2b04      	cmp	r3, #4
 8001870:	d002      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0x40>
 8001872:	2b08      	cmp	r3, #8
 8001874:	d003      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x46>
 8001876:	e02d      	b.n	80018d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001878:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800187a:	623b      	str	r3, [r7, #32]
      break;
 800187c:	e02d      	b.n	80018da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	0c9b      	lsrs	r3, r3, #18
 8001882:	f003 030f 	and.w	r3, r3, #15
 8001886:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800188a:	4413      	add	r3, r2
 800188c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001890:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d013      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	0c5b      	lsrs	r3, r3, #17
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018aa:	4413      	add	r3, r2
 80018ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	4a0f      	ldr	r2, [pc, #60]	; (80018f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018b6:	fb02 f203 	mul.w	r2, r2, r3
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
 80018c2:	e004      	b.n	80018ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	4a0c      	ldr	r2, [pc, #48]	; (80018f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80018c8:	fb02 f303 	mul.w	r3, r2, r3
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d0:	623b      	str	r3, [r7, #32]
      break;
 80018d2:	e002      	b.n	80018da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80018d6:	623b      	str	r3, [r7, #32]
      break;
 80018d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018da:	6a3b      	ldr	r3, [r7, #32]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3728      	adds	r7, #40	; 0x28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc90      	pop	{r4, r7}
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	08003148 	.word	0x08003148
 80018ec:	08003158 	.word	0x08003158
 80018f0:	40021000 	.word	0x40021000
 80018f4:	007a1200 	.word	0x007a1200
 80018f8:	003d0900 	.word	0x003d0900

080018fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001904:	4b0a      	ldr	r3, [pc, #40]	; (8001930 <RCC_Delay+0x34>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <RCC_Delay+0x38>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	0a5b      	lsrs	r3, r3, #9
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	fb02 f303 	mul.w	r3, r2, r3
 8001916:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001918:	bf00      	nop
  }
  while (Delay --);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1e5a      	subs	r2, r3, #1
 800191e:	60fa      	str	r2, [r7, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f9      	bne.n	8001918 <RCC_Delay+0x1c>
}
 8001924:	bf00      	nop
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	20000000 	.word	0x20000000
 8001934:	10624dd3 	.word	0x10624dd3

08001938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d101      	bne.n	800194a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e041      	b.n	80019ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d106      	bne.n	8001964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff f850 	bl	8000a04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2202      	movs	r2, #2
 8001968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3304      	adds	r3, #4
 8001974:	4619      	mov	r1, r3
 8001976:	4610      	mov	r0, r2
 8001978:	f000 fc24 	bl	80021c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2201      	movs	r2, #1
 8001988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2201      	movs	r2, #1
 80019b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2201      	movs	r2, #1
 80019c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019cc:	2300      	movs	r3, #0
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d001      	beq.n	80019f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e03a      	b.n	8001a66 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2202      	movs	r2, #2
 80019f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f042 0201 	orr.w	r2, r2, #1
 8001a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a18      	ldr	r2, [pc, #96]	; (8001a70 <HAL_TIM_Base_Start_IT+0x98>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d00e      	beq.n	8001a30 <HAL_TIM_Base_Start_IT+0x58>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a1a:	d009      	beq.n	8001a30 <HAL_TIM_Base_Start_IT+0x58>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a14      	ldr	r2, [pc, #80]	; (8001a74 <HAL_TIM_Base_Start_IT+0x9c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d004      	beq.n	8001a30 <HAL_TIM_Base_Start_IT+0x58>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <HAL_TIM_Base_Start_IT+0xa0>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d111      	bne.n	8001a54 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2b06      	cmp	r3, #6
 8001a40:	d010      	beq.n	8001a64 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f042 0201 	orr.w	r2, r2, #1
 8001a50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a52:	e007      	b.n	8001a64 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0201 	orr.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	40012c00 	.word	0x40012c00
 8001a74:	40000400 	.word	0x40000400
 8001a78:	40000800 	.word	0x40000800

08001a7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e041      	b.n	8001b12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d106      	bne.n	8001aa8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f839 	bl	8001b1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3304      	adds	r3, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4610      	mov	r0, r2
 8001abc:	f000 fb82 	bl	80021c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2201      	movs	r2, #1
 8001adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bc80      	pop	{r7}
 8001b2a:	4770      	bx	lr

08001b2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d109      	bne.n	8001b50 <HAL_TIM_PWM_Start+0x24>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	bf14      	ite	ne
 8001b48:	2301      	movne	r3, #1
 8001b4a:	2300      	moveq	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	e022      	b.n	8001b96 <HAL_TIM_PWM_Start+0x6a>
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d109      	bne.n	8001b6a <HAL_TIM_PWM_Start+0x3e>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	bf14      	ite	ne
 8001b62:	2301      	movne	r3, #1
 8001b64:	2300      	moveq	r3, #0
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	e015      	b.n	8001b96 <HAL_TIM_PWM_Start+0x6a>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	2b08      	cmp	r3, #8
 8001b6e:	d109      	bne.n	8001b84 <HAL_TIM_PWM_Start+0x58>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	bf14      	ite	ne
 8001b7c:	2301      	movne	r3, #1
 8001b7e:	2300      	moveq	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	e008      	b.n	8001b96 <HAL_TIM_PWM_Start+0x6a>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	bf14      	ite	ne
 8001b90:	2301      	movne	r3, #1
 8001b92:	2300      	moveq	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e05e      	b.n	8001c5c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d104      	bne.n	8001bae <HAL_TIM_PWM_Start+0x82>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bac:	e013      	b.n	8001bd6 <HAL_TIM_PWM_Start+0xaa>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d104      	bne.n	8001bbe <HAL_TIM_PWM_Start+0x92>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bbc:	e00b      	b.n	8001bd6 <HAL_TIM_PWM_Start+0xaa>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d104      	bne.n	8001bce <HAL_TIM_PWM_Start+0xa2>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bcc:	e003      	b.n	8001bd6 <HAL_TIM_PWM_Start+0xaa>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	6839      	ldr	r1, [r7, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 fd70 	bl	80026c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1e      	ldr	r2, [pc, #120]	; (8001c64 <HAL_TIM_PWM_Start+0x138>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d107      	bne.n	8001bfe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <HAL_TIM_PWM_Start+0x138>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d00e      	beq.n	8001c26 <HAL_TIM_PWM_Start+0xfa>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c10:	d009      	beq.n	8001c26 <HAL_TIM_PWM_Start+0xfa>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a14      	ldr	r2, [pc, #80]	; (8001c68 <HAL_TIM_PWM_Start+0x13c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d004      	beq.n	8001c26 <HAL_TIM_PWM_Start+0xfa>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <HAL_TIM_PWM_Start+0x140>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d111      	bne.n	8001c4a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2b06      	cmp	r3, #6
 8001c36:	d010      	beq.n	8001c5a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f042 0201 	orr.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c48:	e007      	b.n	8001c5a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0201 	orr.w	r2, r2, #1
 8001c58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40012c00 	.word	0x40012c00
 8001c68:	40000400 	.word	0x40000400
 8001c6c:	40000800 	.word	0x40000800

08001c70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	691b      	ldr	r3, [r3, #16]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d122      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d11b      	bne.n	8001ccc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f06f 0202 	mvn.w	r2, #2
 8001c9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d003      	beq.n	8001cba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 fa6b 	bl	800218e <HAL_TIM_IC_CaptureCallback>
 8001cb8:	e005      	b.n	8001cc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f000 fa5e 	bl	800217c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f000 fa6d 	bl	80021a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d122      	bne.n	8001d20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b04      	cmp	r3, #4
 8001ce6:	d11b      	bne.n	8001d20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f06f 0204 	mvn.w	r2, #4
 8001cf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2202      	movs	r2, #2
 8001cf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 fa41 	bl	800218e <HAL_TIM_IC_CaptureCallback>
 8001d0c:	e005      	b.n	8001d1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fa34 	bl	800217c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 fa43 	bl	80021a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d122      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d11b      	bne.n	8001d74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0208 	mvn.w	r2, #8
 8001d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2204      	movs	r2, #4
 8001d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	69db      	ldr	r3, [r3, #28]
 8001d52:	f003 0303 	and.w	r3, r3, #3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 fa17 	bl	800218e <HAL_TIM_IC_CaptureCallback>
 8001d60:	e005      	b.n	8001d6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 fa0a 	bl	800217c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 fa19 	bl	80021a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	f003 0310 	and.w	r3, r3, #16
 8001d7e:	2b10      	cmp	r3, #16
 8001d80:	d122      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	f003 0310 	and.w	r3, r3, #16
 8001d8c:	2b10      	cmp	r3, #16
 8001d8e:	d11b      	bne.n	8001dc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f06f 0210 	mvn.w	r2, #16
 8001d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2208      	movs	r2, #8
 8001d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f9ed 	bl	800218e <HAL_TIM_IC_CaptureCallback>
 8001db4:	e005      	b.n	8001dc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f9e0 	bl	800217c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f9ef 	bl	80021a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d10e      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d107      	bne.n	8001df4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0201 	mvn.w	r2, #1
 8001dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f9bb 	bl	800216a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfe:	2b80      	cmp	r3, #128	; 0x80
 8001e00:	d10e      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e0c:	2b80      	cmp	r3, #128	; 0x80
 8001e0e:	d107      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 fd2e 	bl	800287c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2a:	2b40      	cmp	r3, #64	; 0x40
 8001e2c:	d10e      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e38:	2b40      	cmp	r3, #64	; 0x40
 8001e3a:	d107      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f9b3 	bl	80021b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	2b20      	cmp	r3, #32
 8001e58:	d10e      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0320 	and.w	r3, r3, #32
 8001e64:	2b20      	cmp	r3, #32
 8001e66:	d107      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0220 	mvn.w	r2, #32
 8001e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 fcf9 	bl	800286a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d101      	bne.n	8001e9a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e0ac      	b.n	8001ff4 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b0c      	cmp	r3, #12
 8001ea6:	f200 809f 	bhi.w	8001fe8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001eaa:	a201      	add	r2, pc, #4	; (adr r2, 8001eb0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb0:	08001ee5 	.word	0x08001ee5
 8001eb4:	08001fe9 	.word	0x08001fe9
 8001eb8:	08001fe9 	.word	0x08001fe9
 8001ebc:	08001fe9 	.word	0x08001fe9
 8001ec0:	08001f25 	.word	0x08001f25
 8001ec4:	08001fe9 	.word	0x08001fe9
 8001ec8:	08001fe9 	.word	0x08001fe9
 8001ecc:	08001fe9 	.word	0x08001fe9
 8001ed0:	08001f67 	.word	0x08001f67
 8001ed4:	08001fe9 	.word	0x08001fe9
 8001ed8:	08001fe9 	.word	0x08001fe9
 8001edc:	08001fe9 	.word	0x08001fe9
 8001ee0:	08001fa7 	.word	0x08001fa7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68b9      	ldr	r1, [r7, #8]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f000 f9cc 	bl	8002288 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	699a      	ldr	r2, [r3, #24]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0208 	orr.w	r2, r2, #8
 8001efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0204 	bic.w	r2, r2, #4
 8001f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6999      	ldr	r1, [r3, #24]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	691a      	ldr	r2, [r3, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	619a      	str	r2, [r3, #24]
      break;
 8001f22:	e062      	b.n	8001fea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	68b9      	ldr	r1, [r7, #8]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f000 fa12 	bl	8002354 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699a      	ldr	r2, [r3, #24]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	699a      	ldr	r2, [r3, #24]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6999      	ldr	r1, [r3, #24]
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	021a      	lsls	r2, r3, #8
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	619a      	str	r2, [r3, #24]
      break;
 8001f64:	e041      	b.n	8001fea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	68b9      	ldr	r1, [r7, #8]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 fa5b 	bl	8002428 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	69da      	ldr	r2, [r3, #28]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 0208 	orr.w	r2, r2, #8
 8001f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	69da      	ldr	r2, [r3, #28]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0204 	bic.w	r2, r2, #4
 8001f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	69d9      	ldr	r1, [r3, #28]
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	691a      	ldr	r2, [r3, #16]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	61da      	str	r2, [r3, #28]
      break;
 8001fa4:	e021      	b.n	8001fea <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68b9      	ldr	r1, [r7, #8]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f000 faa5 	bl	80024fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	69da      	ldr	r2, [r3, #28]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	69da      	ldr	r2, [r3, #28]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	69d9      	ldr	r1, [r3, #28]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	021a      	lsls	r2, r3, #8
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	61da      	str	r2, [r3, #28]
      break;
 8001fe6:	e000      	b.n	8001fea <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001fe8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_TIM_ConfigClockSource+0x18>
 8002010:	2302      	movs	r3, #2
 8002012:	e0a6      	b.n	8002162 <HAL_TIM_ConfigClockSource+0x166>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002032:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800203a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b40      	cmp	r3, #64	; 0x40
 800204a:	d067      	beq.n	800211c <HAL_TIM_ConfigClockSource+0x120>
 800204c:	2b40      	cmp	r3, #64	; 0x40
 800204e:	d80b      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x6c>
 8002050:	2b10      	cmp	r3, #16
 8002052:	d073      	beq.n	800213c <HAL_TIM_ConfigClockSource+0x140>
 8002054:	2b10      	cmp	r3, #16
 8002056:	d802      	bhi.n	800205e <HAL_TIM_ConfigClockSource+0x62>
 8002058:	2b00      	cmp	r3, #0
 800205a:	d06f      	beq.n	800213c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800205c:	e078      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800205e:	2b20      	cmp	r3, #32
 8002060:	d06c      	beq.n	800213c <HAL_TIM_ConfigClockSource+0x140>
 8002062:	2b30      	cmp	r3, #48	; 0x30
 8002064:	d06a      	beq.n	800213c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002066:	e073      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002068:	2b70      	cmp	r3, #112	; 0x70
 800206a:	d00d      	beq.n	8002088 <HAL_TIM_ConfigClockSource+0x8c>
 800206c:	2b70      	cmp	r3, #112	; 0x70
 800206e:	d804      	bhi.n	800207a <HAL_TIM_ConfigClockSource+0x7e>
 8002070:	2b50      	cmp	r3, #80	; 0x50
 8002072:	d033      	beq.n	80020dc <HAL_TIM_ConfigClockSource+0xe0>
 8002074:	2b60      	cmp	r3, #96	; 0x60
 8002076:	d041      	beq.n	80020fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002078:	e06a      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800207a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800207e:	d066      	beq.n	800214e <HAL_TIM_ConfigClockSource+0x152>
 8002080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002084:	d017      	beq.n	80020b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002086:	e063      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	6899      	ldr	r1, [r3, #8]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f000 faf5 	bl	8002686 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	609a      	str	r2, [r3, #8]
      break;
 80020b4:	e04c      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	6899      	ldr	r1, [r3, #8]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f000 fade 	bl	8002686 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020d8:	609a      	str	r2, [r3, #8]
      break;
 80020da:	e039      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	461a      	mov	r2, r3
 80020ea:	f000 fa55 	bl	8002598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2150      	movs	r1, #80	; 0x50
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 faac 	bl	8002652 <TIM_ITRx_SetConfig>
      break;
 80020fa:	e029      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	6859      	ldr	r1, [r3, #4]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	461a      	mov	r2, r3
 800210a:	f000 fa73 	bl	80025f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2160      	movs	r1, #96	; 0x60
 8002114:	4618      	mov	r0, r3
 8002116:	f000 fa9c 	bl	8002652 <TIM_ITRx_SetConfig>
      break;
 800211a:	e019      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	461a      	mov	r2, r3
 800212a:	f000 fa35 	bl	8002598 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2140      	movs	r1, #64	; 0x40
 8002134:	4618      	mov	r0, r3
 8002136:	f000 fa8c 	bl	8002652 <TIM_ITRx_SetConfig>
      break;
 800213a:	e009      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4619      	mov	r1, r3
 8002146:	4610      	mov	r0, r2
 8002148:	f000 fa83 	bl	8002652 <TIM_ITRx_SetConfig>
        break;
 800214c:	e000      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800214e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr

080021b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a29      	ldr	r2, [pc, #164]	; (800227c <TIM_Base_SetConfig+0xb8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d00b      	beq.n	80021f4 <TIM_Base_SetConfig+0x30>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e2:	d007      	beq.n	80021f4 <TIM_Base_SetConfig+0x30>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a26      	ldr	r2, [pc, #152]	; (8002280 <TIM_Base_SetConfig+0xbc>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d003      	beq.n	80021f4 <TIM_Base_SetConfig+0x30>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a25      	ldr	r2, [pc, #148]	; (8002284 <TIM_Base_SetConfig+0xc0>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d108      	bne.n	8002206 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a1c      	ldr	r2, [pc, #112]	; (800227c <TIM_Base_SetConfig+0xb8>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d00b      	beq.n	8002226 <TIM_Base_SetConfig+0x62>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002214:	d007      	beq.n	8002226 <TIM_Base_SetConfig+0x62>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a19      	ldr	r2, [pc, #100]	; (8002280 <TIM_Base_SetConfig+0xbc>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d003      	beq.n	8002226 <TIM_Base_SetConfig+0x62>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a18      	ldr	r2, [pc, #96]	; (8002284 <TIM_Base_SetConfig+0xc0>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d108      	bne.n	8002238 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800222c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4313      	orrs	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	4313      	orrs	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a07      	ldr	r2, [pc, #28]	; (800227c <TIM_Base_SetConfig+0xb8>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d103      	bne.n	800226c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	615a      	str	r2, [r3, #20]
}
 8002272:	bf00      	nop
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr
 800227c:	40012c00 	.word	0x40012c00
 8002280:	40000400 	.word	0x40000400
 8002284:	40000800 	.word	0x40000800

08002288 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	f023 0201 	bic.w	r2, r3, #1
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f023 0303 	bic.w	r3, r3, #3
 80022be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f023 0302 	bic.w	r3, r3, #2
 80022d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	4313      	orrs	r3, r2
 80022da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <TIM_OC1_SetConfig+0xc8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d10c      	bne.n	80022fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f023 0308 	bic.w	r3, r3, #8
 80022ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	f023 0304 	bic.w	r3, r3, #4
 80022fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a13      	ldr	r2, [pc, #76]	; (8002350 <TIM_OC1_SetConfig+0xc8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d111      	bne.n	800232a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800230c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4313      	orrs	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4313      	orrs	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	621a      	str	r2, [r3, #32]
}
 8002344:	bf00      	nop
 8002346:	371c      	adds	r7, #28
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40012c00 	.word	0x40012c00

08002354 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002354:	b480      	push	{r7}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	f023 0210 	bic.w	r2, r3, #16
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800238a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	021b      	lsls	r3, r3, #8
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4313      	orrs	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f023 0320 	bic.w	r3, r3, #32
 800239e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	011b      	lsls	r3, r3, #4
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a1d      	ldr	r2, [pc, #116]	; (8002424 <TIM_OC2_SetConfig+0xd0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d10d      	bne.n	80023d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	011b      	lsls	r3, r3, #4
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80023ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a14      	ldr	r2, [pc, #80]	; (8002424 <TIM_OC2_SetConfig+0xd0>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d113      	bne.n	8002400 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	621a      	str	r2, [r3, #32]
}
 800241a:	bf00      	nop
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	bc80      	pop	{r7}
 8002422:	4770      	bx	lr
 8002424:	40012c00 	.word	0x40012c00

08002428 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a1b      	ldr	r3, [r3, #32]
 8002442:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f023 0303 	bic.w	r3, r3, #3
 800245e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	4313      	orrs	r3, r2
 8002468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	021b      	lsls	r3, r3, #8
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	4313      	orrs	r3, r2
 800247c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a1d      	ldr	r2, [pc, #116]	; (80024f8 <TIM_OC3_SetConfig+0xd0>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d10d      	bne.n	80024a2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800248c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	4313      	orrs	r3, r2
 8002498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a14      	ldr	r2, [pc, #80]	; (80024f8 <TIM_OC3_SetConfig+0xd0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d113      	bne.n	80024d2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80024b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	695b      	ldr	r3, [r3, #20]
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	621a      	str	r2, [r3, #32]
}
 80024ec:	bf00      	nop
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40012c00 	.word	0x40012c00

080024fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b087      	sub	sp, #28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800252a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	021b      	lsls	r3, r3, #8
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	4313      	orrs	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	031b      	lsls	r3, r3, #12
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a0f      	ldr	r2, [pc, #60]	; (8002594 <TIM_OC4_SetConfig+0x98>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d109      	bne.n	8002570 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002562:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	695b      	ldr	r3, [r3, #20]
 8002568:	019b      	lsls	r3, r3, #6
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	697a      	ldr	r2, [r7, #20]
 8002574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685a      	ldr	r2, [r3, #4]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	621a      	str	r2, [r3, #32]
}
 800258a:	bf00      	nop
 800258c:	371c      	adds	r7, #28
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	40012c00 	.word	0x40012c00

08002598 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	f023 0201 	bic.w	r2, r3, #1
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	011b      	lsls	r3, r3, #4
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f023 030a 	bic.w	r3, r3, #10
 80025d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025d6:	697a      	ldr	r2, [r7, #20]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	4313      	orrs	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	621a      	str	r2, [r3, #32]
}
 80025ea:	bf00      	nop
 80025ec:	371c      	adds	r7, #28
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b087      	sub	sp, #28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	f023 0210 	bic.w	r2, r3, #16
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800261e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	031b      	lsls	r3, r3, #12
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	4313      	orrs	r3, r2
 8002628:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002630:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	621a      	str	r2, [r3, #32]
}
 8002648:	bf00      	nop
 800264a:	371c      	adds	r7, #28
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr

08002652 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002652:	b480      	push	{r7}
 8002654:	b085      	sub	sp, #20
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002668:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4313      	orrs	r3, r2
 8002670:	f043 0307 	orr.w	r3, r3, #7
 8002674:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68fa      	ldr	r2, [r7, #12]
 800267a:	609a      	str	r2, [r3, #8]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr

08002686 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002686:	b480      	push	{r7}
 8002688:	b087      	sub	sp, #28
 800268a:	af00      	add	r7, sp, #0
 800268c:	60f8      	str	r0, [r7, #12]
 800268e:	60b9      	str	r1, [r7, #8]
 8002690:	607a      	str	r2, [r7, #4]
 8002692:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	021a      	lsls	r2, r3, #8
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	609a      	str	r2, [r3, #8]
}
 80026ba:	bf00      	nop
 80026bc:	371c      	adds	r7, #28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr

080026c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	f003 031f 	and.w	r3, r3, #31
 80026d6:	2201      	movs	r2, #1
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a1a      	ldr	r2, [r3, #32]
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	401a      	ands	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a1a      	ldr	r2, [r3, #32]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f003 031f 	and.w	r3, r3, #31
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	fa01 f303 	lsl.w	r3, r1, r3
 80026fc:	431a      	orrs	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	621a      	str	r2, [r3, #32]
}
 8002702:	bf00      	nop
 8002704:	371c      	adds	r7, #28
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr

0800270c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002720:	2302      	movs	r3, #2
 8002722:	e046      	b.n	80027b2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a16      	ldr	r2, [pc, #88]	; (80027bc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d00e      	beq.n	8002786 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002770:	d009      	beq.n	8002786 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a12      	ldr	r2, [pc, #72]	; (80027c0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d004      	beq.n	8002786 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a10      	ldr	r2, [pc, #64]	; (80027c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d10c      	bne.n	80027a0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800278c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	4313      	orrs	r3, r2
 8002796:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68ba      	ldr	r2, [r7, #8]
 800279e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr
 80027bc:	40012c00 	.word	0x40012c00
 80027c0:	40000400 	.word	0x40000400
 80027c4:	40000800 	.word	0x40000800

080027c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d101      	bne.n	80027e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80027e0:	2302      	movs	r3, #2
 80027e2:	e03d      	b.n	8002860 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4313      	orrs	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	4313      	orrs	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	68fa      	ldr	r2, [r7, #12]
 8002854:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
	...

08002890 <__errno>:
 8002890:	4b01      	ldr	r3, [pc, #4]	; (8002898 <__errno+0x8>)
 8002892:	6818      	ldr	r0, [r3, #0]
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	2000000c 	.word	0x2000000c

0800289c <__libc_init_array>:
 800289c:	b570      	push	{r4, r5, r6, lr}
 800289e:	2500      	movs	r5, #0
 80028a0:	4e0c      	ldr	r6, [pc, #48]	; (80028d4 <__libc_init_array+0x38>)
 80028a2:	4c0d      	ldr	r4, [pc, #52]	; (80028d8 <__libc_init_array+0x3c>)
 80028a4:	1ba4      	subs	r4, r4, r6
 80028a6:	10a4      	asrs	r4, r4, #2
 80028a8:	42a5      	cmp	r5, r4
 80028aa:	d109      	bne.n	80028c0 <__libc_init_array+0x24>
 80028ac:	f000 fc34 	bl	8003118 <_init>
 80028b0:	2500      	movs	r5, #0
 80028b2:	4e0a      	ldr	r6, [pc, #40]	; (80028dc <__libc_init_array+0x40>)
 80028b4:	4c0a      	ldr	r4, [pc, #40]	; (80028e0 <__libc_init_array+0x44>)
 80028b6:	1ba4      	subs	r4, r4, r6
 80028b8:	10a4      	asrs	r4, r4, #2
 80028ba:	42a5      	cmp	r5, r4
 80028bc:	d105      	bne.n	80028ca <__libc_init_array+0x2e>
 80028be:	bd70      	pop	{r4, r5, r6, pc}
 80028c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028c4:	4798      	blx	r3
 80028c6:	3501      	adds	r5, #1
 80028c8:	e7ee      	b.n	80028a8 <__libc_init_array+0xc>
 80028ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028ce:	4798      	blx	r3
 80028d0:	3501      	adds	r5, #1
 80028d2:	e7f2      	b.n	80028ba <__libc_init_array+0x1e>
 80028d4:	080031a0 	.word	0x080031a0
 80028d8:	080031a0 	.word	0x080031a0
 80028dc:	080031a0 	.word	0x080031a0
 80028e0:	080031a4 	.word	0x080031a4

080028e4 <memset>:
 80028e4:	4603      	mov	r3, r0
 80028e6:	4402      	add	r2, r0
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d100      	bne.n	80028ee <memset+0xa>
 80028ec:	4770      	bx	lr
 80028ee:	f803 1b01 	strb.w	r1, [r3], #1
 80028f2:	e7f9      	b.n	80028e8 <memset+0x4>

080028f4 <siprintf>:
 80028f4:	b40e      	push	{r1, r2, r3}
 80028f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80028fa:	b500      	push	{lr}
 80028fc:	b09c      	sub	sp, #112	; 0x70
 80028fe:	ab1d      	add	r3, sp, #116	; 0x74
 8002900:	9002      	str	r0, [sp, #8]
 8002902:	9006      	str	r0, [sp, #24]
 8002904:	9107      	str	r1, [sp, #28]
 8002906:	9104      	str	r1, [sp, #16]
 8002908:	4808      	ldr	r0, [pc, #32]	; (800292c <siprintf+0x38>)
 800290a:	4909      	ldr	r1, [pc, #36]	; (8002930 <siprintf+0x3c>)
 800290c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002910:	9105      	str	r1, [sp, #20]
 8002912:	6800      	ldr	r0, [r0, #0]
 8002914:	a902      	add	r1, sp, #8
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	f000 f866 	bl	80029e8 <_svfiprintf_r>
 800291c:	2200      	movs	r2, #0
 800291e:	9b02      	ldr	r3, [sp, #8]
 8002920:	701a      	strb	r2, [r3, #0]
 8002922:	b01c      	add	sp, #112	; 0x70
 8002924:	f85d eb04 	ldr.w	lr, [sp], #4
 8002928:	b003      	add	sp, #12
 800292a:	4770      	bx	lr
 800292c:	2000000c 	.word	0x2000000c
 8002930:	ffff0208 	.word	0xffff0208

08002934 <__ssputs_r>:
 8002934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002938:	688e      	ldr	r6, [r1, #8]
 800293a:	4682      	mov	sl, r0
 800293c:	429e      	cmp	r6, r3
 800293e:	460c      	mov	r4, r1
 8002940:	4690      	mov	r8, r2
 8002942:	4699      	mov	r9, r3
 8002944:	d837      	bhi.n	80029b6 <__ssputs_r+0x82>
 8002946:	898a      	ldrh	r2, [r1, #12]
 8002948:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800294c:	d031      	beq.n	80029b2 <__ssputs_r+0x7e>
 800294e:	2302      	movs	r3, #2
 8002950:	6825      	ldr	r5, [r4, #0]
 8002952:	6909      	ldr	r1, [r1, #16]
 8002954:	1a6f      	subs	r7, r5, r1
 8002956:	6965      	ldr	r5, [r4, #20]
 8002958:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800295c:	fb95 f5f3 	sdiv	r5, r5, r3
 8002960:	f109 0301 	add.w	r3, r9, #1
 8002964:	443b      	add	r3, r7
 8002966:	429d      	cmp	r5, r3
 8002968:	bf38      	it	cc
 800296a:	461d      	movcc	r5, r3
 800296c:	0553      	lsls	r3, r2, #21
 800296e:	d530      	bpl.n	80029d2 <__ssputs_r+0x9e>
 8002970:	4629      	mov	r1, r5
 8002972:	f000 fb37 	bl	8002fe4 <_malloc_r>
 8002976:	4606      	mov	r6, r0
 8002978:	b950      	cbnz	r0, 8002990 <__ssputs_r+0x5c>
 800297a:	230c      	movs	r3, #12
 800297c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002980:	f8ca 3000 	str.w	r3, [sl]
 8002984:	89a3      	ldrh	r3, [r4, #12]
 8002986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800298a:	81a3      	strh	r3, [r4, #12]
 800298c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002990:	463a      	mov	r2, r7
 8002992:	6921      	ldr	r1, [r4, #16]
 8002994:	f000 fab6 	bl	8002f04 <memcpy>
 8002998:	89a3      	ldrh	r3, [r4, #12]
 800299a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800299e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029a2:	81a3      	strh	r3, [r4, #12]
 80029a4:	6126      	str	r6, [r4, #16]
 80029a6:	443e      	add	r6, r7
 80029a8:	6026      	str	r6, [r4, #0]
 80029aa:	464e      	mov	r6, r9
 80029ac:	6165      	str	r5, [r4, #20]
 80029ae:	1bed      	subs	r5, r5, r7
 80029b0:	60a5      	str	r5, [r4, #8]
 80029b2:	454e      	cmp	r6, r9
 80029b4:	d900      	bls.n	80029b8 <__ssputs_r+0x84>
 80029b6:	464e      	mov	r6, r9
 80029b8:	4632      	mov	r2, r6
 80029ba:	4641      	mov	r1, r8
 80029bc:	6820      	ldr	r0, [r4, #0]
 80029be:	f000 faac 	bl	8002f1a <memmove>
 80029c2:	68a3      	ldr	r3, [r4, #8]
 80029c4:	2000      	movs	r0, #0
 80029c6:	1b9b      	subs	r3, r3, r6
 80029c8:	60a3      	str	r3, [r4, #8]
 80029ca:	6823      	ldr	r3, [r4, #0]
 80029cc:	441e      	add	r6, r3
 80029ce:	6026      	str	r6, [r4, #0]
 80029d0:	e7dc      	b.n	800298c <__ssputs_r+0x58>
 80029d2:	462a      	mov	r2, r5
 80029d4:	f000 fb60 	bl	8003098 <_realloc_r>
 80029d8:	4606      	mov	r6, r0
 80029da:	2800      	cmp	r0, #0
 80029dc:	d1e2      	bne.n	80029a4 <__ssputs_r+0x70>
 80029de:	6921      	ldr	r1, [r4, #16]
 80029e0:	4650      	mov	r0, sl
 80029e2:	f000 fab3 	bl	8002f4c <_free_r>
 80029e6:	e7c8      	b.n	800297a <__ssputs_r+0x46>

080029e8 <_svfiprintf_r>:
 80029e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029ec:	461d      	mov	r5, r3
 80029ee:	898b      	ldrh	r3, [r1, #12]
 80029f0:	b09d      	sub	sp, #116	; 0x74
 80029f2:	061f      	lsls	r7, r3, #24
 80029f4:	4680      	mov	r8, r0
 80029f6:	460c      	mov	r4, r1
 80029f8:	4616      	mov	r6, r2
 80029fa:	d50f      	bpl.n	8002a1c <_svfiprintf_r+0x34>
 80029fc:	690b      	ldr	r3, [r1, #16]
 80029fe:	b96b      	cbnz	r3, 8002a1c <_svfiprintf_r+0x34>
 8002a00:	2140      	movs	r1, #64	; 0x40
 8002a02:	f000 faef 	bl	8002fe4 <_malloc_r>
 8002a06:	6020      	str	r0, [r4, #0]
 8002a08:	6120      	str	r0, [r4, #16]
 8002a0a:	b928      	cbnz	r0, 8002a18 <_svfiprintf_r+0x30>
 8002a0c:	230c      	movs	r3, #12
 8002a0e:	f8c8 3000 	str.w	r3, [r8]
 8002a12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a16:	e0c8      	b.n	8002baa <_svfiprintf_r+0x1c2>
 8002a18:	2340      	movs	r3, #64	; 0x40
 8002a1a:	6163      	str	r3, [r4, #20]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	9309      	str	r3, [sp, #36]	; 0x24
 8002a20:	2320      	movs	r3, #32
 8002a22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a26:	2330      	movs	r3, #48	; 0x30
 8002a28:	f04f 0b01 	mov.w	fp, #1
 8002a2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002a30:	9503      	str	r5, [sp, #12]
 8002a32:	4637      	mov	r7, r6
 8002a34:	463d      	mov	r5, r7
 8002a36:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002a3a:	b10b      	cbz	r3, 8002a40 <_svfiprintf_r+0x58>
 8002a3c:	2b25      	cmp	r3, #37	; 0x25
 8002a3e:	d13e      	bne.n	8002abe <_svfiprintf_r+0xd6>
 8002a40:	ebb7 0a06 	subs.w	sl, r7, r6
 8002a44:	d00b      	beq.n	8002a5e <_svfiprintf_r+0x76>
 8002a46:	4653      	mov	r3, sl
 8002a48:	4632      	mov	r2, r6
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	4640      	mov	r0, r8
 8002a4e:	f7ff ff71 	bl	8002934 <__ssputs_r>
 8002a52:	3001      	adds	r0, #1
 8002a54:	f000 80a4 	beq.w	8002ba0 <_svfiprintf_r+0x1b8>
 8002a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a5a:	4453      	add	r3, sl
 8002a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8002a5e:	783b      	ldrb	r3, [r7, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f000 809d 	beq.w	8002ba0 <_svfiprintf_r+0x1b8>
 8002a66:	2300      	movs	r3, #0
 8002a68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a70:	9304      	str	r3, [sp, #16]
 8002a72:	9307      	str	r3, [sp, #28]
 8002a74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002a78:	931a      	str	r3, [sp, #104]	; 0x68
 8002a7a:	462f      	mov	r7, r5
 8002a7c:	2205      	movs	r2, #5
 8002a7e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002a82:	4850      	ldr	r0, [pc, #320]	; (8002bc4 <_svfiprintf_r+0x1dc>)
 8002a84:	f000 fa30 	bl	8002ee8 <memchr>
 8002a88:	9b04      	ldr	r3, [sp, #16]
 8002a8a:	b9d0      	cbnz	r0, 8002ac2 <_svfiprintf_r+0xda>
 8002a8c:	06d9      	lsls	r1, r3, #27
 8002a8e:	bf44      	itt	mi
 8002a90:	2220      	movmi	r2, #32
 8002a92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a96:	071a      	lsls	r2, r3, #28
 8002a98:	bf44      	itt	mi
 8002a9a:	222b      	movmi	r2, #43	; 0x2b
 8002a9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002aa0:	782a      	ldrb	r2, [r5, #0]
 8002aa2:	2a2a      	cmp	r2, #42	; 0x2a
 8002aa4:	d015      	beq.n	8002ad2 <_svfiprintf_r+0xea>
 8002aa6:	462f      	mov	r7, r5
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	250a      	movs	r5, #10
 8002aac:	9a07      	ldr	r2, [sp, #28]
 8002aae:	4639      	mov	r1, r7
 8002ab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ab4:	3b30      	subs	r3, #48	; 0x30
 8002ab6:	2b09      	cmp	r3, #9
 8002ab8:	d94d      	bls.n	8002b56 <_svfiprintf_r+0x16e>
 8002aba:	b1b8      	cbz	r0, 8002aec <_svfiprintf_r+0x104>
 8002abc:	e00f      	b.n	8002ade <_svfiprintf_r+0xf6>
 8002abe:	462f      	mov	r7, r5
 8002ac0:	e7b8      	b.n	8002a34 <_svfiprintf_r+0x4c>
 8002ac2:	4a40      	ldr	r2, [pc, #256]	; (8002bc4 <_svfiprintf_r+0x1dc>)
 8002ac4:	463d      	mov	r5, r7
 8002ac6:	1a80      	subs	r0, r0, r2
 8002ac8:	fa0b f000 	lsl.w	r0, fp, r0
 8002acc:	4318      	orrs	r0, r3
 8002ace:	9004      	str	r0, [sp, #16]
 8002ad0:	e7d3      	b.n	8002a7a <_svfiprintf_r+0x92>
 8002ad2:	9a03      	ldr	r2, [sp, #12]
 8002ad4:	1d11      	adds	r1, r2, #4
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	9103      	str	r1, [sp, #12]
 8002ada:	2a00      	cmp	r2, #0
 8002adc:	db01      	blt.n	8002ae2 <_svfiprintf_r+0xfa>
 8002ade:	9207      	str	r2, [sp, #28]
 8002ae0:	e004      	b.n	8002aec <_svfiprintf_r+0x104>
 8002ae2:	4252      	negs	r2, r2
 8002ae4:	f043 0302 	orr.w	r3, r3, #2
 8002ae8:	9207      	str	r2, [sp, #28]
 8002aea:	9304      	str	r3, [sp, #16]
 8002aec:	783b      	ldrb	r3, [r7, #0]
 8002aee:	2b2e      	cmp	r3, #46	; 0x2e
 8002af0:	d10c      	bne.n	8002b0c <_svfiprintf_r+0x124>
 8002af2:	787b      	ldrb	r3, [r7, #1]
 8002af4:	2b2a      	cmp	r3, #42	; 0x2a
 8002af6:	d133      	bne.n	8002b60 <_svfiprintf_r+0x178>
 8002af8:	9b03      	ldr	r3, [sp, #12]
 8002afa:	3702      	adds	r7, #2
 8002afc:	1d1a      	adds	r2, r3, #4
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	9203      	str	r2, [sp, #12]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	bfb8      	it	lt
 8002b06:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002b0a:	9305      	str	r3, [sp, #20]
 8002b0c:	4d2e      	ldr	r5, [pc, #184]	; (8002bc8 <_svfiprintf_r+0x1e0>)
 8002b0e:	2203      	movs	r2, #3
 8002b10:	7839      	ldrb	r1, [r7, #0]
 8002b12:	4628      	mov	r0, r5
 8002b14:	f000 f9e8 	bl	8002ee8 <memchr>
 8002b18:	b138      	cbz	r0, 8002b2a <_svfiprintf_r+0x142>
 8002b1a:	2340      	movs	r3, #64	; 0x40
 8002b1c:	1b40      	subs	r0, r0, r5
 8002b1e:	fa03 f000 	lsl.w	r0, r3, r0
 8002b22:	9b04      	ldr	r3, [sp, #16]
 8002b24:	3701      	adds	r7, #1
 8002b26:	4303      	orrs	r3, r0
 8002b28:	9304      	str	r3, [sp, #16]
 8002b2a:	7839      	ldrb	r1, [r7, #0]
 8002b2c:	2206      	movs	r2, #6
 8002b2e:	4827      	ldr	r0, [pc, #156]	; (8002bcc <_svfiprintf_r+0x1e4>)
 8002b30:	1c7e      	adds	r6, r7, #1
 8002b32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002b36:	f000 f9d7 	bl	8002ee8 <memchr>
 8002b3a:	2800      	cmp	r0, #0
 8002b3c:	d038      	beq.n	8002bb0 <_svfiprintf_r+0x1c8>
 8002b3e:	4b24      	ldr	r3, [pc, #144]	; (8002bd0 <_svfiprintf_r+0x1e8>)
 8002b40:	bb13      	cbnz	r3, 8002b88 <_svfiprintf_r+0x1a0>
 8002b42:	9b03      	ldr	r3, [sp, #12]
 8002b44:	3307      	adds	r3, #7
 8002b46:	f023 0307 	bic.w	r3, r3, #7
 8002b4a:	3308      	adds	r3, #8
 8002b4c:	9303      	str	r3, [sp, #12]
 8002b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002b50:	444b      	add	r3, r9
 8002b52:	9309      	str	r3, [sp, #36]	; 0x24
 8002b54:	e76d      	b.n	8002a32 <_svfiprintf_r+0x4a>
 8002b56:	fb05 3202 	mla	r2, r5, r2, r3
 8002b5a:	2001      	movs	r0, #1
 8002b5c:	460f      	mov	r7, r1
 8002b5e:	e7a6      	b.n	8002aae <_svfiprintf_r+0xc6>
 8002b60:	2300      	movs	r3, #0
 8002b62:	250a      	movs	r5, #10
 8002b64:	4619      	mov	r1, r3
 8002b66:	3701      	adds	r7, #1
 8002b68:	9305      	str	r3, [sp, #20]
 8002b6a:	4638      	mov	r0, r7
 8002b6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b70:	3a30      	subs	r2, #48	; 0x30
 8002b72:	2a09      	cmp	r2, #9
 8002b74:	d903      	bls.n	8002b7e <_svfiprintf_r+0x196>
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d0c8      	beq.n	8002b0c <_svfiprintf_r+0x124>
 8002b7a:	9105      	str	r1, [sp, #20]
 8002b7c:	e7c6      	b.n	8002b0c <_svfiprintf_r+0x124>
 8002b7e:	fb05 2101 	mla	r1, r5, r1, r2
 8002b82:	2301      	movs	r3, #1
 8002b84:	4607      	mov	r7, r0
 8002b86:	e7f0      	b.n	8002b6a <_svfiprintf_r+0x182>
 8002b88:	ab03      	add	r3, sp, #12
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	4622      	mov	r2, r4
 8002b8e:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <_svfiprintf_r+0x1ec>)
 8002b90:	a904      	add	r1, sp, #16
 8002b92:	4640      	mov	r0, r8
 8002b94:	f3af 8000 	nop.w
 8002b98:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002b9c:	4681      	mov	r9, r0
 8002b9e:	d1d6      	bne.n	8002b4e <_svfiprintf_r+0x166>
 8002ba0:	89a3      	ldrh	r3, [r4, #12]
 8002ba2:	065b      	lsls	r3, r3, #25
 8002ba4:	f53f af35 	bmi.w	8002a12 <_svfiprintf_r+0x2a>
 8002ba8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002baa:	b01d      	add	sp, #116	; 0x74
 8002bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bb0:	ab03      	add	r3, sp, #12
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	4622      	mov	r2, r4
 8002bb6:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <_svfiprintf_r+0x1ec>)
 8002bb8:	a904      	add	r1, sp, #16
 8002bba:	4640      	mov	r0, r8
 8002bbc:	f000 f882 	bl	8002cc4 <_printf_i>
 8002bc0:	e7ea      	b.n	8002b98 <_svfiprintf_r+0x1b0>
 8002bc2:	bf00      	nop
 8002bc4:	0800316c 	.word	0x0800316c
 8002bc8:	08003172 	.word	0x08003172
 8002bcc:	08003176 	.word	0x08003176
 8002bd0:	00000000 	.word	0x00000000
 8002bd4:	08002935 	.word	0x08002935

08002bd8 <_printf_common>:
 8002bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bdc:	4691      	mov	r9, r2
 8002bde:	461f      	mov	r7, r3
 8002be0:	688a      	ldr	r2, [r1, #8]
 8002be2:	690b      	ldr	r3, [r1, #16]
 8002be4:	4606      	mov	r6, r0
 8002be6:	4293      	cmp	r3, r2
 8002be8:	bfb8      	it	lt
 8002bea:	4613      	movlt	r3, r2
 8002bec:	f8c9 3000 	str.w	r3, [r9]
 8002bf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002bf4:	460c      	mov	r4, r1
 8002bf6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002bfa:	b112      	cbz	r2, 8002c02 <_printf_common+0x2a>
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f8c9 3000 	str.w	r3, [r9]
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	0699      	lsls	r1, r3, #26
 8002c06:	bf42      	ittt	mi
 8002c08:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002c0c:	3302      	addmi	r3, #2
 8002c0e:	f8c9 3000 	strmi.w	r3, [r9]
 8002c12:	6825      	ldr	r5, [r4, #0]
 8002c14:	f015 0506 	ands.w	r5, r5, #6
 8002c18:	d107      	bne.n	8002c2a <_printf_common+0x52>
 8002c1a:	f104 0a19 	add.w	sl, r4, #25
 8002c1e:	68e3      	ldr	r3, [r4, #12]
 8002c20:	f8d9 2000 	ldr.w	r2, [r9]
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	42ab      	cmp	r3, r5
 8002c28:	dc29      	bgt.n	8002c7e <_printf_common+0xa6>
 8002c2a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002c2e:	6822      	ldr	r2, [r4, #0]
 8002c30:	3300      	adds	r3, #0
 8002c32:	bf18      	it	ne
 8002c34:	2301      	movne	r3, #1
 8002c36:	0692      	lsls	r2, r2, #26
 8002c38:	d42e      	bmi.n	8002c98 <_printf_common+0xc0>
 8002c3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002c3e:	4639      	mov	r1, r7
 8002c40:	4630      	mov	r0, r6
 8002c42:	47c0      	blx	r8
 8002c44:	3001      	adds	r0, #1
 8002c46:	d021      	beq.n	8002c8c <_printf_common+0xb4>
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	68e5      	ldr	r5, [r4, #12]
 8002c4c:	f003 0306 	and.w	r3, r3, #6
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	bf18      	it	ne
 8002c54:	2500      	movne	r5, #0
 8002c56:	f8d9 2000 	ldr.w	r2, [r9]
 8002c5a:	f04f 0900 	mov.w	r9, #0
 8002c5e:	bf08      	it	eq
 8002c60:	1aad      	subeq	r5, r5, r2
 8002c62:	68a3      	ldr	r3, [r4, #8]
 8002c64:	6922      	ldr	r2, [r4, #16]
 8002c66:	bf08      	it	eq
 8002c68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	bfc4      	itt	gt
 8002c70:	1a9b      	subgt	r3, r3, r2
 8002c72:	18ed      	addgt	r5, r5, r3
 8002c74:	341a      	adds	r4, #26
 8002c76:	454d      	cmp	r5, r9
 8002c78:	d11a      	bne.n	8002cb0 <_printf_common+0xd8>
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	e008      	b.n	8002c90 <_printf_common+0xb8>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	4652      	mov	r2, sl
 8002c82:	4639      	mov	r1, r7
 8002c84:	4630      	mov	r0, r6
 8002c86:	47c0      	blx	r8
 8002c88:	3001      	adds	r0, #1
 8002c8a:	d103      	bne.n	8002c94 <_printf_common+0xbc>
 8002c8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c94:	3501      	adds	r5, #1
 8002c96:	e7c2      	b.n	8002c1e <_printf_common+0x46>
 8002c98:	2030      	movs	r0, #48	; 0x30
 8002c9a:	18e1      	adds	r1, r4, r3
 8002c9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002ca6:	4422      	add	r2, r4
 8002ca8:	3302      	adds	r3, #2
 8002caa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002cae:	e7c4      	b.n	8002c3a <_printf_common+0x62>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	4622      	mov	r2, r4
 8002cb4:	4639      	mov	r1, r7
 8002cb6:	4630      	mov	r0, r6
 8002cb8:	47c0      	blx	r8
 8002cba:	3001      	adds	r0, #1
 8002cbc:	d0e6      	beq.n	8002c8c <_printf_common+0xb4>
 8002cbe:	f109 0901 	add.w	r9, r9, #1
 8002cc2:	e7d8      	b.n	8002c76 <_printf_common+0x9e>

08002cc4 <_printf_i>:
 8002cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002cc8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002ccc:	460c      	mov	r4, r1
 8002cce:	7e09      	ldrb	r1, [r1, #24]
 8002cd0:	b085      	sub	sp, #20
 8002cd2:	296e      	cmp	r1, #110	; 0x6e
 8002cd4:	4617      	mov	r7, r2
 8002cd6:	4606      	mov	r6, r0
 8002cd8:	4698      	mov	r8, r3
 8002cda:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002cdc:	f000 80b3 	beq.w	8002e46 <_printf_i+0x182>
 8002ce0:	d822      	bhi.n	8002d28 <_printf_i+0x64>
 8002ce2:	2963      	cmp	r1, #99	; 0x63
 8002ce4:	d036      	beq.n	8002d54 <_printf_i+0x90>
 8002ce6:	d80a      	bhi.n	8002cfe <_printf_i+0x3a>
 8002ce8:	2900      	cmp	r1, #0
 8002cea:	f000 80b9 	beq.w	8002e60 <_printf_i+0x19c>
 8002cee:	2958      	cmp	r1, #88	; 0x58
 8002cf0:	f000 8083 	beq.w	8002dfa <_printf_i+0x136>
 8002cf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cf8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002cfc:	e032      	b.n	8002d64 <_printf_i+0xa0>
 8002cfe:	2964      	cmp	r1, #100	; 0x64
 8002d00:	d001      	beq.n	8002d06 <_printf_i+0x42>
 8002d02:	2969      	cmp	r1, #105	; 0x69
 8002d04:	d1f6      	bne.n	8002cf4 <_printf_i+0x30>
 8002d06:	6820      	ldr	r0, [r4, #0]
 8002d08:	6813      	ldr	r3, [r2, #0]
 8002d0a:	0605      	lsls	r5, r0, #24
 8002d0c:	f103 0104 	add.w	r1, r3, #4
 8002d10:	d52a      	bpl.n	8002d68 <_printf_i+0xa4>
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6011      	str	r1, [r2, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	da03      	bge.n	8002d22 <_printf_i+0x5e>
 8002d1a:	222d      	movs	r2, #45	; 0x2d
 8002d1c:	425b      	negs	r3, r3
 8002d1e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002d22:	486f      	ldr	r0, [pc, #444]	; (8002ee0 <_printf_i+0x21c>)
 8002d24:	220a      	movs	r2, #10
 8002d26:	e039      	b.n	8002d9c <_printf_i+0xd8>
 8002d28:	2973      	cmp	r1, #115	; 0x73
 8002d2a:	f000 809d 	beq.w	8002e68 <_printf_i+0x1a4>
 8002d2e:	d808      	bhi.n	8002d42 <_printf_i+0x7e>
 8002d30:	296f      	cmp	r1, #111	; 0x6f
 8002d32:	d020      	beq.n	8002d76 <_printf_i+0xb2>
 8002d34:	2970      	cmp	r1, #112	; 0x70
 8002d36:	d1dd      	bne.n	8002cf4 <_printf_i+0x30>
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	f043 0320 	orr.w	r3, r3, #32
 8002d3e:	6023      	str	r3, [r4, #0]
 8002d40:	e003      	b.n	8002d4a <_printf_i+0x86>
 8002d42:	2975      	cmp	r1, #117	; 0x75
 8002d44:	d017      	beq.n	8002d76 <_printf_i+0xb2>
 8002d46:	2978      	cmp	r1, #120	; 0x78
 8002d48:	d1d4      	bne.n	8002cf4 <_printf_i+0x30>
 8002d4a:	2378      	movs	r3, #120	; 0x78
 8002d4c:	4865      	ldr	r0, [pc, #404]	; (8002ee4 <_printf_i+0x220>)
 8002d4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d52:	e055      	b.n	8002e00 <_printf_i+0x13c>
 8002d54:	6813      	ldr	r3, [r2, #0]
 8002d56:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d5a:	1d19      	adds	r1, r3, #4
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6011      	str	r1, [r2, #0]
 8002d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d64:	2301      	movs	r3, #1
 8002d66:	e08c      	b.n	8002e82 <_printf_i+0x1be>
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002d6e:	6011      	str	r1, [r2, #0]
 8002d70:	bf18      	it	ne
 8002d72:	b21b      	sxthne	r3, r3
 8002d74:	e7cf      	b.n	8002d16 <_printf_i+0x52>
 8002d76:	6813      	ldr	r3, [r2, #0]
 8002d78:	6825      	ldr	r5, [r4, #0]
 8002d7a:	1d18      	adds	r0, r3, #4
 8002d7c:	6010      	str	r0, [r2, #0]
 8002d7e:	0628      	lsls	r0, r5, #24
 8002d80:	d501      	bpl.n	8002d86 <_printf_i+0xc2>
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	e002      	b.n	8002d8c <_printf_i+0xc8>
 8002d86:	0668      	lsls	r0, r5, #25
 8002d88:	d5fb      	bpl.n	8002d82 <_printf_i+0xbe>
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	296f      	cmp	r1, #111	; 0x6f
 8002d8e:	bf14      	ite	ne
 8002d90:	220a      	movne	r2, #10
 8002d92:	2208      	moveq	r2, #8
 8002d94:	4852      	ldr	r0, [pc, #328]	; (8002ee0 <_printf_i+0x21c>)
 8002d96:	2100      	movs	r1, #0
 8002d98:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d9c:	6865      	ldr	r5, [r4, #4]
 8002d9e:	2d00      	cmp	r5, #0
 8002da0:	60a5      	str	r5, [r4, #8]
 8002da2:	f2c0 8095 	blt.w	8002ed0 <_printf_i+0x20c>
 8002da6:	6821      	ldr	r1, [r4, #0]
 8002da8:	f021 0104 	bic.w	r1, r1, #4
 8002dac:	6021      	str	r1, [r4, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d13d      	bne.n	8002e2e <_printf_i+0x16a>
 8002db2:	2d00      	cmp	r5, #0
 8002db4:	f040 808e 	bne.w	8002ed4 <_printf_i+0x210>
 8002db8:	4665      	mov	r5, ip
 8002dba:	2a08      	cmp	r2, #8
 8002dbc:	d10b      	bne.n	8002dd6 <_printf_i+0x112>
 8002dbe:	6823      	ldr	r3, [r4, #0]
 8002dc0:	07db      	lsls	r3, r3, #31
 8002dc2:	d508      	bpl.n	8002dd6 <_printf_i+0x112>
 8002dc4:	6923      	ldr	r3, [r4, #16]
 8002dc6:	6862      	ldr	r2, [r4, #4]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	bfde      	ittt	le
 8002dcc:	2330      	movle	r3, #48	; 0x30
 8002dce:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002dd2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002dd6:	ebac 0305 	sub.w	r3, ip, r5
 8002dda:	6123      	str	r3, [r4, #16]
 8002ddc:	f8cd 8000 	str.w	r8, [sp]
 8002de0:	463b      	mov	r3, r7
 8002de2:	aa03      	add	r2, sp, #12
 8002de4:	4621      	mov	r1, r4
 8002de6:	4630      	mov	r0, r6
 8002de8:	f7ff fef6 	bl	8002bd8 <_printf_common>
 8002dec:	3001      	adds	r0, #1
 8002dee:	d14d      	bne.n	8002e8c <_printf_i+0x1c8>
 8002df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002df4:	b005      	add	sp, #20
 8002df6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002dfa:	4839      	ldr	r0, [pc, #228]	; (8002ee0 <_printf_i+0x21c>)
 8002dfc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002e00:	6813      	ldr	r3, [r2, #0]
 8002e02:	6821      	ldr	r1, [r4, #0]
 8002e04:	1d1d      	adds	r5, r3, #4
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6015      	str	r5, [r2, #0]
 8002e0a:	060a      	lsls	r2, r1, #24
 8002e0c:	d50b      	bpl.n	8002e26 <_printf_i+0x162>
 8002e0e:	07ca      	lsls	r2, r1, #31
 8002e10:	bf44      	itt	mi
 8002e12:	f041 0120 	orrmi.w	r1, r1, #32
 8002e16:	6021      	strmi	r1, [r4, #0]
 8002e18:	b91b      	cbnz	r3, 8002e22 <_printf_i+0x15e>
 8002e1a:	6822      	ldr	r2, [r4, #0]
 8002e1c:	f022 0220 	bic.w	r2, r2, #32
 8002e20:	6022      	str	r2, [r4, #0]
 8002e22:	2210      	movs	r2, #16
 8002e24:	e7b7      	b.n	8002d96 <_printf_i+0xd2>
 8002e26:	064d      	lsls	r5, r1, #25
 8002e28:	bf48      	it	mi
 8002e2a:	b29b      	uxthmi	r3, r3
 8002e2c:	e7ef      	b.n	8002e0e <_printf_i+0x14a>
 8002e2e:	4665      	mov	r5, ip
 8002e30:	fbb3 f1f2 	udiv	r1, r3, r2
 8002e34:	fb02 3311 	mls	r3, r2, r1, r3
 8002e38:	5cc3      	ldrb	r3, [r0, r3]
 8002e3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002e3e:	460b      	mov	r3, r1
 8002e40:	2900      	cmp	r1, #0
 8002e42:	d1f5      	bne.n	8002e30 <_printf_i+0x16c>
 8002e44:	e7b9      	b.n	8002dba <_printf_i+0xf6>
 8002e46:	6813      	ldr	r3, [r2, #0]
 8002e48:	6825      	ldr	r5, [r4, #0]
 8002e4a:	1d18      	adds	r0, r3, #4
 8002e4c:	6961      	ldr	r1, [r4, #20]
 8002e4e:	6010      	str	r0, [r2, #0]
 8002e50:	0628      	lsls	r0, r5, #24
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	d501      	bpl.n	8002e5a <_printf_i+0x196>
 8002e56:	6019      	str	r1, [r3, #0]
 8002e58:	e002      	b.n	8002e60 <_printf_i+0x19c>
 8002e5a:	066a      	lsls	r2, r5, #25
 8002e5c:	d5fb      	bpl.n	8002e56 <_printf_i+0x192>
 8002e5e:	8019      	strh	r1, [r3, #0]
 8002e60:	2300      	movs	r3, #0
 8002e62:	4665      	mov	r5, ip
 8002e64:	6123      	str	r3, [r4, #16]
 8002e66:	e7b9      	b.n	8002ddc <_printf_i+0x118>
 8002e68:	6813      	ldr	r3, [r2, #0]
 8002e6a:	1d19      	adds	r1, r3, #4
 8002e6c:	6011      	str	r1, [r2, #0]
 8002e6e:	681d      	ldr	r5, [r3, #0]
 8002e70:	6862      	ldr	r2, [r4, #4]
 8002e72:	2100      	movs	r1, #0
 8002e74:	4628      	mov	r0, r5
 8002e76:	f000 f837 	bl	8002ee8 <memchr>
 8002e7a:	b108      	cbz	r0, 8002e80 <_printf_i+0x1bc>
 8002e7c:	1b40      	subs	r0, r0, r5
 8002e7e:	6060      	str	r0, [r4, #4]
 8002e80:	6863      	ldr	r3, [r4, #4]
 8002e82:	6123      	str	r3, [r4, #16]
 8002e84:	2300      	movs	r3, #0
 8002e86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e8a:	e7a7      	b.n	8002ddc <_printf_i+0x118>
 8002e8c:	6923      	ldr	r3, [r4, #16]
 8002e8e:	462a      	mov	r2, r5
 8002e90:	4639      	mov	r1, r7
 8002e92:	4630      	mov	r0, r6
 8002e94:	47c0      	blx	r8
 8002e96:	3001      	adds	r0, #1
 8002e98:	d0aa      	beq.n	8002df0 <_printf_i+0x12c>
 8002e9a:	6823      	ldr	r3, [r4, #0]
 8002e9c:	079b      	lsls	r3, r3, #30
 8002e9e:	d413      	bmi.n	8002ec8 <_printf_i+0x204>
 8002ea0:	68e0      	ldr	r0, [r4, #12]
 8002ea2:	9b03      	ldr	r3, [sp, #12]
 8002ea4:	4298      	cmp	r0, r3
 8002ea6:	bfb8      	it	lt
 8002ea8:	4618      	movlt	r0, r3
 8002eaa:	e7a3      	b.n	8002df4 <_printf_i+0x130>
 8002eac:	2301      	movs	r3, #1
 8002eae:	464a      	mov	r2, r9
 8002eb0:	4639      	mov	r1, r7
 8002eb2:	4630      	mov	r0, r6
 8002eb4:	47c0      	blx	r8
 8002eb6:	3001      	adds	r0, #1
 8002eb8:	d09a      	beq.n	8002df0 <_printf_i+0x12c>
 8002eba:	3501      	adds	r5, #1
 8002ebc:	68e3      	ldr	r3, [r4, #12]
 8002ebe:	9a03      	ldr	r2, [sp, #12]
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	42ab      	cmp	r3, r5
 8002ec4:	dcf2      	bgt.n	8002eac <_printf_i+0x1e8>
 8002ec6:	e7eb      	b.n	8002ea0 <_printf_i+0x1dc>
 8002ec8:	2500      	movs	r5, #0
 8002eca:	f104 0919 	add.w	r9, r4, #25
 8002ece:	e7f5      	b.n	8002ebc <_printf_i+0x1f8>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d1ac      	bne.n	8002e2e <_printf_i+0x16a>
 8002ed4:	7803      	ldrb	r3, [r0, #0]
 8002ed6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002eda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ede:	e76c      	b.n	8002dba <_printf_i+0xf6>
 8002ee0:	0800317d 	.word	0x0800317d
 8002ee4:	0800318e 	.word	0x0800318e

08002ee8 <memchr>:
 8002ee8:	b510      	push	{r4, lr}
 8002eea:	b2c9      	uxtb	r1, r1
 8002eec:	4402      	add	r2, r0
 8002eee:	4290      	cmp	r0, r2
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	d101      	bne.n	8002ef8 <memchr+0x10>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e003      	b.n	8002f00 <memchr+0x18>
 8002ef8:	781c      	ldrb	r4, [r3, #0]
 8002efa:	3001      	adds	r0, #1
 8002efc:	428c      	cmp	r4, r1
 8002efe:	d1f6      	bne.n	8002eee <memchr+0x6>
 8002f00:	4618      	mov	r0, r3
 8002f02:	bd10      	pop	{r4, pc}

08002f04 <memcpy>:
 8002f04:	b510      	push	{r4, lr}
 8002f06:	1e43      	subs	r3, r0, #1
 8002f08:	440a      	add	r2, r1
 8002f0a:	4291      	cmp	r1, r2
 8002f0c:	d100      	bne.n	8002f10 <memcpy+0xc>
 8002f0e:	bd10      	pop	{r4, pc}
 8002f10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f18:	e7f7      	b.n	8002f0a <memcpy+0x6>

08002f1a <memmove>:
 8002f1a:	4288      	cmp	r0, r1
 8002f1c:	b510      	push	{r4, lr}
 8002f1e:	eb01 0302 	add.w	r3, r1, r2
 8002f22:	d807      	bhi.n	8002f34 <memmove+0x1a>
 8002f24:	1e42      	subs	r2, r0, #1
 8002f26:	4299      	cmp	r1, r3
 8002f28:	d00a      	beq.n	8002f40 <memmove+0x26>
 8002f2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f2e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002f32:	e7f8      	b.n	8002f26 <memmove+0xc>
 8002f34:	4283      	cmp	r3, r0
 8002f36:	d9f5      	bls.n	8002f24 <memmove+0xa>
 8002f38:	1881      	adds	r1, r0, r2
 8002f3a:	1ad2      	subs	r2, r2, r3
 8002f3c:	42d3      	cmn	r3, r2
 8002f3e:	d100      	bne.n	8002f42 <memmove+0x28>
 8002f40:	bd10      	pop	{r4, pc}
 8002f42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f46:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002f4a:	e7f7      	b.n	8002f3c <memmove+0x22>

08002f4c <_free_r>:
 8002f4c:	b538      	push	{r3, r4, r5, lr}
 8002f4e:	4605      	mov	r5, r0
 8002f50:	2900      	cmp	r1, #0
 8002f52:	d043      	beq.n	8002fdc <_free_r+0x90>
 8002f54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f58:	1f0c      	subs	r4, r1, #4
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bfb8      	it	lt
 8002f5e:	18e4      	addlt	r4, r4, r3
 8002f60:	f000 f8d0 	bl	8003104 <__malloc_lock>
 8002f64:	4a1e      	ldr	r2, [pc, #120]	; (8002fe0 <_free_r+0x94>)
 8002f66:	6813      	ldr	r3, [r2, #0]
 8002f68:	4610      	mov	r0, r2
 8002f6a:	b933      	cbnz	r3, 8002f7a <_free_r+0x2e>
 8002f6c:	6063      	str	r3, [r4, #4]
 8002f6e:	6014      	str	r4, [r2, #0]
 8002f70:	4628      	mov	r0, r5
 8002f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f76:	f000 b8c6 	b.w	8003106 <__malloc_unlock>
 8002f7a:	42a3      	cmp	r3, r4
 8002f7c:	d90b      	bls.n	8002f96 <_free_r+0x4a>
 8002f7e:	6821      	ldr	r1, [r4, #0]
 8002f80:	1862      	adds	r2, r4, r1
 8002f82:	4293      	cmp	r3, r2
 8002f84:	bf01      	itttt	eq
 8002f86:	681a      	ldreq	r2, [r3, #0]
 8002f88:	685b      	ldreq	r3, [r3, #4]
 8002f8a:	1852      	addeq	r2, r2, r1
 8002f8c:	6022      	streq	r2, [r4, #0]
 8002f8e:	6063      	str	r3, [r4, #4]
 8002f90:	6004      	str	r4, [r0, #0]
 8002f92:	e7ed      	b.n	8002f70 <_free_r+0x24>
 8002f94:	4613      	mov	r3, r2
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	b10a      	cbz	r2, 8002f9e <_free_r+0x52>
 8002f9a:	42a2      	cmp	r2, r4
 8002f9c:	d9fa      	bls.n	8002f94 <_free_r+0x48>
 8002f9e:	6819      	ldr	r1, [r3, #0]
 8002fa0:	1858      	adds	r0, r3, r1
 8002fa2:	42a0      	cmp	r0, r4
 8002fa4:	d10b      	bne.n	8002fbe <_free_r+0x72>
 8002fa6:	6820      	ldr	r0, [r4, #0]
 8002fa8:	4401      	add	r1, r0
 8002faa:	1858      	adds	r0, r3, r1
 8002fac:	4282      	cmp	r2, r0
 8002fae:	6019      	str	r1, [r3, #0]
 8002fb0:	d1de      	bne.n	8002f70 <_free_r+0x24>
 8002fb2:	6810      	ldr	r0, [r2, #0]
 8002fb4:	6852      	ldr	r2, [r2, #4]
 8002fb6:	4401      	add	r1, r0
 8002fb8:	6019      	str	r1, [r3, #0]
 8002fba:	605a      	str	r2, [r3, #4]
 8002fbc:	e7d8      	b.n	8002f70 <_free_r+0x24>
 8002fbe:	d902      	bls.n	8002fc6 <_free_r+0x7a>
 8002fc0:	230c      	movs	r3, #12
 8002fc2:	602b      	str	r3, [r5, #0]
 8002fc4:	e7d4      	b.n	8002f70 <_free_r+0x24>
 8002fc6:	6820      	ldr	r0, [r4, #0]
 8002fc8:	1821      	adds	r1, r4, r0
 8002fca:	428a      	cmp	r2, r1
 8002fcc:	bf01      	itttt	eq
 8002fce:	6811      	ldreq	r1, [r2, #0]
 8002fd0:	6852      	ldreq	r2, [r2, #4]
 8002fd2:	1809      	addeq	r1, r1, r0
 8002fd4:	6021      	streq	r1, [r4, #0]
 8002fd6:	6062      	str	r2, [r4, #4]
 8002fd8:	605c      	str	r4, [r3, #4]
 8002fda:	e7c9      	b.n	8002f70 <_free_r+0x24>
 8002fdc:	bd38      	pop	{r3, r4, r5, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000090 	.word	0x20000090

08002fe4 <_malloc_r>:
 8002fe4:	b570      	push	{r4, r5, r6, lr}
 8002fe6:	1ccd      	adds	r5, r1, #3
 8002fe8:	f025 0503 	bic.w	r5, r5, #3
 8002fec:	3508      	adds	r5, #8
 8002fee:	2d0c      	cmp	r5, #12
 8002ff0:	bf38      	it	cc
 8002ff2:	250c      	movcc	r5, #12
 8002ff4:	2d00      	cmp	r5, #0
 8002ff6:	4606      	mov	r6, r0
 8002ff8:	db01      	blt.n	8002ffe <_malloc_r+0x1a>
 8002ffa:	42a9      	cmp	r1, r5
 8002ffc:	d903      	bls.n	8003006 <_malloc_r+0x22>
 8002ffe:	230c      	movs	r3, #12
 8003000:	6033      	str	r3, [r6, #0]
 8003002:	2000      	movs	r0, #0
 8003004:	bd70      	pop	{r4, r5, r6, pc}
 8003006:	f000 f87d 	bl	8003104 <__malloc_lock>
 800300a:	4a21      	ldr	r2, [pc, #132]	; (8003090 <_malloc_r+0xac>)
 800300c:	6814      	ldr	r4, [r2, #0]
 800300e:	4621      	mov	r1, r4
 8003010:	b991      	cbnz	r1, 8003038 <_malloc_r+0x54>
 8003012:	4c20      	ldr	r4, [pc, #128]	; (8003094 <_malloc_r+0xb0>)
 8003014:	6823      	ldr	r3, [r4, #0]
 8003016:	b91b      	cbnz	r3, 8003020 <_malloc_r+0x3c>
 8003018:	4630      	mov	r0, r6
 800301a:	f000 f863 	bl	80030e4 <_sbrk_r>
 800301e:	6020      	str	r0, [r4, #0]
 8003020:	4629      	mov	r1, r5
 8003022:	4630      	mov	r0, r6
 8003024:	f000 f85e 	bl	80030e4 <_sbrk_r>
 8003028:	1c43      	adds	r3, r0, #1
 800302a:	d124      	bne.n	8003076 <_malloc_r+0x92>
 800302c:	230c      	movs	r3, #12
 800302e:	4630      	mov	r0, r6
 8003030:	6033      	str	r3, [r6, #0]
 8003032:	f000 f868 	bl	8003106 <__malloc_unlock>
 8003036:	e7e4      	b.n	8003002 <_malloc_r+0x1e>
 8003038:	680b      	ldr	r3, [r1, #0]
 800303a:	1b5b      	subs	r3, r3, r5
 800303c:	d418      	bmi.n	8003070 <_malloc_r+0x8c>
 800303e:	2b0b      	cmp	r3, #11
 8003040:	d90f      	bls.n	8003062 <_malloc_r+0x7e>
 8003042:	600b      	str	r3, [r1, #0]
 8003044:	18cc      	adds	r4, r1, r3
 8003046:	50cd      	str	r5, [r1, r3]
 8003048:	4630      	mov	r0, r6
 800304a:	f000 f85c 	bl	8003106 <__malloc_unlock>
 800304e:	f104 000b 	add.w	r0, r4, #11
 8003052:	1d23      	adds	r3, r4, #4
 8003054:	f020 0007 	bic.w	r0, r0, #7
 8003058:	1ac3      	subs	r3, r0, r3
 800305a:	d0d3      	beq.n	8003004 <_malloc_r+0x20>
 800305c:	425a      	negs	r2, r3
 800305e:	50e2      	str	r2, [r4, r3]
 8003060:	e7d0      	b.n	8003004 <_malloc_r+0x20>
 8003062:	684b      	ldr	r3, [r1, #4]
 8003064:	428c      	cmp	r4, r1
 8003066:	bf16      	itet	ne
 8003068:	6063      	strne	r3, [r4, #4]
 800306a:	6013      	streq	r3, [r2, #0]
 800306c:	460c      	movne	r4, r1
 800306e:	e7eb      	b.n	8003048 <_malloc_r+0x64>
 8003070:	460c      	mov	r4, r1
 8003072:	6849      	ldr	r1, [r1, #4]
 8003074:	e7cc      	b.n	8003010 <_malloc_r+0x2c>
 8003076:	1cc4      	adds	r4, r0, #3
 8003078:	f024 0403 	bic.w	r4, r4, #3
 800307c:	42a0      	cmp	r0, r4
 800307e:	d005      	beq.n	800308c <_malloc_r+0xa8>
 8003080:	1a21      	subs	r1, r4, r0
 8003082:	4630      	mov	r0, r6
 8003084:	f000 f82e 	bl	80030e4 <_sbrk_r>
 8003088:	3001      	adds	r0, #1
 800308a:	d0cf      	beq.n	800302c <_malloc_r+0x48>
 800308c:	6025      	str	r5, [r4, #0]
 800308e:	e7db      	b.n	8003048 <_malloc_r+0x64>
 8003090:	20000090 	.word	0x20000090
 8003094:	20000094 	.word	0x20000094

08003098 <_realloc_r>:
 8003098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309a:	4607      	mov	r7, r0
 800309c:	4614      	mov	r4, r2
 800309e:	460e      	mov	r6, r1
 80030a0:	b921      	cbnz	r1, 80030ac <_realloc_r+0x14>
 80030a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80030a6:	4611      	mov	r1, r2
 80030a8:	f7ff bf9c 	b.w	8002fe4 <_malloc_r>
 80030ac:	b922      	cbnz	r2, 80030b8 <_realloc_r+0x20>
 80030ae:	f7ff ff4d 	bl	8002f4c <_free_r>
 80030b2:	4625      	mov	r5, r4
 80030b4:	4628      	mov	r0, r5
 80030b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030b8:	f000 f826 	bl	8003108 <_malloc_usable_size_r>
 80030bc:	42a0      	cmp	r0, r4
 80030be:	d20f      	bcs.n	80030e0 <_realloc_r+0x48>
 80030c0:	4621      	mov	r1, r4
 80030c2:	4638      	mov	r0, r7
 80030c4:	f7ff ff8e 	bl	8002fe4 <_malloc_r>
 80030c8:	4605      	mov	r5, r0
 80030ca:	2800      	cmp	r0, #0
 80030cc:	d0f2      	beq.n	80030b4 <_realloc_r+0x1c>
 80030ce:	4631      	mov	r1, r6
 80030d0:	4622      	mov	r2, r4
 80030d2:	f7ff ff17 	bl	8002f04 <memcpy>
 80030d6:	4631      	mov	r1, r6
 80030d8:	4638      	mov	r0, r7
 80030da:	f7ff ff37 	bl	8002f4c <_free_r>
 80030de:	e7e9      	b.n	80030b4 <_realloc_r+0x1c>
 80030e0:	4635      	mov	r5, r6
 80030e2:	e7e7      	b.n	80030b4 <_realloc_r+0x1c>

080030e4 <_sbrk_r>:
 80030e4:	b538      	push	{r3, r4, r5, lr}
 80030e6:	2300      	movs	r3, #0
 80030e8:	4c05      	ldr	r4, [pc, #20]	; (8003100 <_sbrk_r+0x1c>)
 80030ea:	4605      	mov	r5, r0
 80030ec:	4608      	mov	r0, r1
 80030ee:	6023      	str	r3, [r4, #0]
 80030f0:	f7fd fb50 	bl	8000794 <_sbrk>
 80030f4:	1c43      	adds	r3, r0, #1
 80030f6:	d102      	bne.n	80030fe <_sbrk_r+0x1a>
 80030f8:	6823      	ldr	r3, [r4, #0]
 80030fa:	b103      	cbz	r3, 80030fe <_sbrk_r+0x1a>
 80030fc:	602b      	str	r3, [r5, #0]
 80030fe:	bd38      	pop	{r3, r4, r5, pc}
 8003100:	2000012c 	.word	0x2000012c

08003104 <__malloc_lock>:
 8003104:	4770      	bx	lr

08003106 <__malloc_unlock>:
 8003106:	4770      	bx	lr

08003108 <_malloc_usable_size_r>:
 8003108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800310c:	1f18      	subs	r0, r3, #4
 800310e:	2b00      	cmp	r3, #0
 8003110:	bfbc      	itt	lt
 8003112:	580b      	ldrlt	r3, [r1, r0]
 8003114:	18c0      	addlt	r0, r0, r3
 8003116:	4770      	bx	lr

08003118 <_init>:
 8003118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311a:	bf00      	nop
 800311c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311e:	bc08      	pop	{r3}
 8003120:	469e      	mov	lr, r3
 8003122:	4770      	bx	lr

08003124 <_fini>:
 8003124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003126:	bf00      	nop
 8003128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800312a:	bc08      	pop	{r3}
 800312c:	469e      	mov	lr, r3
 800312e:	4770      	bx	lr
